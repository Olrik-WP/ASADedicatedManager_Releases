<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Discord.Net.Rest</name>
    </assembly>
    <members>
        <member name="P:Discord.API.Application.TermsOfService">
            Urls
        </member>
        <member name="T:Discord.API.InviteVanity">
            <summary>
            Represents a vanity invite.
            </summary>
        </member>
        <member name="P:Discord.API.InviteVanity.Code">
            <summary>
            The unique code for the invite link.
            </summary>
        </member>
        <member name="P:Discord.API.InviteVanity.Uses">
            <summary>
            The total amount of vanity invite uses.
            </summary>
        </member>
        <member name="P:Discord.API.MessageApplication.Id">
            <summary>
                Gets the snowflake ID of the application.
            </summary>
        </member>
        <member name="P:Discord.API.MessageApplication.CoverImage">
            <summary>
                Gets the ID of the embed's image asset.
            </summary>
        </member>
        <member name="P:Discord.API.MessageApplication.Description">
            <summary>
                Gets the application's description.
            </summary>
        </member>
        <member name="P:Discord.API.MessageApplication.Icon">
            <summary>
                Gets the ID of the application's icon.
            </summary>
        </member>
        <member name="P:Discord.API.MessageApplication.Name">
            <summary>
                Gets the name of the application.
            </summary>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.#ctor(Discord.Net.Rest.RestClientProvider,System.String,Discord.RetryMode,Newtonsoft.Json.JsonSerializer,System.Boolean,System.Func{Discord.IRateLimitInfo,System.Threading.Tasks.Task})">
            <exception cref="T:System.ArgumentException">Unknown OAuth token type.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.SetBaseUrl(System.String)">
            <exception cref="T:System.ArgumentException">Unknown OAuth token type.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.GetPrefixedToken(Discord.TokenType,System.String)">
            <exception cref="T:System.ArgumentException">Unknown OAuth token type.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.ModifyGuildChannelAsync(System.UInt64,Discord.API.Rest.ModifyGuildChannelParams,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentException">
            <paramref name="channelId"/> must not be equal to zero.
            -and-
            <paramref name="args.Position.Position"/> must be greater than zero.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="args"/> must not be <see langword="null"/>.
            -and-
            <paramref name="args.Name.Name"/> must not be <see langword="null"/> or empty.
            </exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.CreateMessageAsync(System.UInt64,Discord.API.Rest.CreateMessageParams,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.CreateWebhookMessageAsync(System.UInt64,Discord.API.Rest.CreateWebhookMessageParams,Discord.RequestOptions,System.Nullable{System.UInt64})">
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
            <exception cref="T:System.InvalidOperationException">This operation may only be called with a <see cref="F:Discord.TokenType.Webhook"/> token.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.ModifyWebhookMessageAsync(System.UInt64,System.UInt64,Discord.API.Rest.ModifyWebhookMessageParams,Discord.RequestOptions,System.Nullable{System.UInt64})">
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
            <exception cref="T:System.InvalidOperationException">This operation may only be called with a <see cref="F:Discord.TokenType.Webhook"/> token.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.ModifyWebhookMessageAsync(System.UInt64,System.UInt64,Discord.API.Rest.UploadWebhookFileParams,Discord.RequestOptions,System.Nullable{System.UInt64})">
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
            <exception cref="T:System.InvalidOperationException">This operation may only be called with a <see cref="F:Discord.TokenType.Webhook"/> token.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.DeleteWebhookMessageAsync(System.UInt64,System.UInt64,Discord.RequestOptions,System.Nullable{System.UInt64})">
            <exception cref="T:System.InvalidOperationException">This operation may only be called with a <see cref="F:Discord.TokenType.Webhook"/> token.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.UploadFileAsync(System.UInt64,Discord.API.Rest.UploadFileParams,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.UploadWebhookFileAsync(System.UInt64,Discord.API.Rest.UploadWebhookFileParams,Discord.RequestOptions,System.Nullable{System.UInt64})">
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
            <exception cref="T:System.InvalidOperationException">This operation may only be called with a <see cref="F:Discord.TokenType.Webhook"/> token.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.ModifyMessageAsync(System.UInt64,System.UInt64,Discord.API.Rest.ModifyMessageParams,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.CreateGuildBanAsync(System.UInt64,System.UInt64,System.UInt32,System.String,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentException">
            <paramref name="guildId"/> and <paramref name="userId"/> must not be equal to zero.
            -and-
            <paramref name="deleteMessageSeconds"/> must be between 0 and 604800.
            </exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.RemoveGuildBanAsync(System.UInt64,System.UInt64,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentException"><paramref name="guildId"/> and <paramref name="userId"/> must not be equal to zero.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.GetGuildWidgetAsync(System.UInt64,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentException"><paramref name="guildId"/> must not be equal to zero.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.ModifyGuildWidgetAsync(System.UInt64,Discord.API.Rest.ModifyGuildWidgetParams,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentException"><paramref name="guildId"/> must not be equal to zero.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="args"/> must not be <see langword="null"/>.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.GetIntegrationsAsync(System.UInt64,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentException"><paramref name="guildId"/> must not be equal to zero.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.GetInviteAsync(System.String,Discord.RequestOptions,System.Nullable{System.UInt64})">
            <exception cref="T:System.ArgumentException"><paramref name="inviteId"/> cannot be blank.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="inviteId"/> must not be <see langword="null"/>.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.GetVanityInviteAsync(System.UInt64,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentException"><paramref name="guildId"/> may not be equal to zero.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.GetGuildInvitesAsync(System.UInt64,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentException"><paramref name="guildId"/> may not be equal to zero.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.GetChannelInvitesAsync(System.UInt64,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentException"><paramref name="channelId"/> may not be equal to zero.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.CreateChannelInviteAsync(System.UInt64,Discord.API.Rest.CreateChannelInviteParams,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentException">
            <paramref name="channelId"/> may not be equal to zero.
            -and-
            <paramref name="args.MaxAge.MaxAge"/> and <paramref name="args.MaxUses.MaxUses"/> must be greater than zero.
            -and-
            <paramref name="args.MaxAge.MaxAge"/> must be lesser than 86400.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="args"/> must not be <see langword="null"/>.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.CheckState">
            <exception cref="T:System.InvalidOperationException">Client is not logged in.</exception>
        </member>
        <member name="M:Discord.Net.Rest.DefaultRestClient.SendAsync(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.CancellationToken,System.Boolean,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.String}}})">
            <exception cref="T:System.InvalidOperationException">Unsupported param type.</exception>
        </member>
        <member name="M:Discord.Net.Rest.DefaultRestClientProvider.Create(System.Boolean)">
            <exception cref="T:System.PlatformNotSupportedException">The default RestClientProvider is not supported on this platform.</exception>
        </member>
        <member name="M:Discord.Net.Converters.ImageConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <exception cref="T:System.InvalidOperationException">Cannot read from image.</exception>
        </member>
        <member name="M:Discord.Net.ED25519.CryptoBytes.ConstantTimeEquals(System.Byte[],System.Byte[])">
             <summary>
             Comparison of two arrays.
            
             The runtime of this method does not depend on the contents of the arrays. Using constant time
             prevents timing attacks that allow an attacker to learn if the arrays have a common prefix.
            
             It is important to use such a constant time comparison when verifying MACs.
             </summary>
             <param name="x">Byte array</param>
             <param name="y">Byte array</param>
             <returns>True if arrays are equal</returns>
        </member>
        <member name="M:Discord.Net.ED25519.CryptoBytes.ConstantTimeEquals(System.ArraySegment{System.Byte},System.ArraySegment{System.Byte})">
             <summary>
             Comparison of two array segments.
            
             The runtime of this method does not depend on the contents of the arrays. Using constant time
             prevents timing attacks that allow an attacker to learn if the arrays have a common prefix.
            
             It is important to use such a constant time comparison when verifying MACs.
             </summary>
             <param name="x">Byte array segment</param>
             <param name="y">Byte array segment</param>
             <returns>True if contents of x and y are equal</returns>
        </member>
        <member name="M:Discord.Net.ED25519.CryptoBytes.ConstantTimeEquals(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
             <summary>
             Comparison of two byte sequences.
            
             The runtime of this method does not depend on the contents of the arrays. Using constant time
             prevents timing attacks that allow an attacker to learn if the arrays have a common prefix.
            
             It is important to use such a constant time comparison when verifying MACs.
             </summary>
             <param name="x">Byte array</param>
             <param name="xOffset">Offset of byte sequence in the x array</param>
             <param name="y">Byte array</param>
             <param name="yOffset">Offset of byte sequence in the y array</param>
             <param name="length">Length of byte sequence</param>
             <returns>True if sequences are equal</returns>
        </member>
        <member name="M:Discord.Net.ED25519.CryptoBytes.Wipe(System.Byte[])">
            <summary>
            Overwrites the contents of the array, wiping the previous content.
            </summary>
            <param name="data">Byte array</param>
        </member>
        <member name="M:Discord.Net.ED25519.CryptoBytes.Wipe(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Overwrites the contents of the array, wiping the previous content.
            </summary>
            <param name="data">Byte array</param>
            <param name="offset">Index of byte sequence</param>
            <param name="length">Length of byte sequence</param>
        </member>
        <member name="M:Discord.Net.ED25519.CryptoBytes.Wipe(System.ArraySegment{System.Byte})">
            <summary>
            Overwrites the contents of the array segment, wiping the previous content.
            </summary>
            <param name="data">Byte array segment</param>
        </member>
        <member name="M:Discord.Net.ED25519.CryptoBytes.ToHexStringUpper(System.Byte[])">
            <summary>
            Constant-time conversion of the bytes array to an upper-case hex string.
            Please see http://stackoverflow.com/a/14333437/445517 for the detailed explanation
            </summary>
            <param name="data">Byte array</param>
            <returns>Hex representation of byte array</returns>
        </member>
        <member name="M:Discord.Net.ED25519.CryptoBytes.ToHexStringLower(System.Byte[])">
            <summary>
            Constant-time conversion of the bytes array to an lower-case hex string.
            Please see http://stackoverflow.com/a/14333437/445517 for the detailed explanation.
            </summary>
            <param name="data">Byte array</param>
            <returns>Hex representation of byte array</returns>
        </member>
        <member name="M:Discord.Net.ED25519.CryptoBytes.FromHexString(System.String)">
            <summary>
            Converts the hex string to bytes. Case insensitive.
            </summary>
            <param name="hexString">Hex encoded byte sequence</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:Discord.Net.ED25519.CryptoBytes.ToBase64String(System.Byte[])">
            <summary>
            Encodes the bytes with the Base64 encoding.
            More compact than hex, but it is case-sensitive and uses the special characters `+`, `/` and `=`.
            </summary>
            <param name="data">Byte array</param>
            <returns>Base 64 encoded data</returns>
        </member>
        <member name="M:Discord.Net.ED25519.CryptoBytes.FromBase64String(System.String)">
            <summary>
            Decodes a Base64 encoded string back to bytes.
            </summary>
            <param name="base64String">Base 64 encoded data</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:Discord.Net.ED25519.CryptoBytes.Base58Encode(System.Byte[])">
            <summary>
            Encode a byte sequence as a base58-encoded string
            </summary>
            <param name="input">Byte sequence</param>
            <returns>Encoding result</returns>
        </member>
        <member name="M:Discord.Net.ED25519.CryptoBytes.Base58Decode(System.String)">
            <summary>
            // Decode a base58-encoded string into byte array
            </summary>
            <param name="input">Base58 data string</param>
            <returns>Byte array</returns>
        </member>
        <member name="F:Discord.Net.ED25519.Ed25519.PublicKeySize">
            <summary>
            Public Keys are 32 byte values. All possible values of this size a valid.
            </summary>
        </member>
        <member name="F:Discord.Net.ED25519.Ed25519.SignatureSize">
            <summary>
            Signatures are 64 byte values
            </summary>
        </member>
        <member name="F:Discord.Net.ED25519.Ed25519.PrivateKeySeedSize">
            <summary>
            Private key seeds are 32 byte arbitrary values. This is the form that should be generated and stored.
            </summary>
        </member>
        <member name="F:Discord.Net.ED25519.Ed25519.ExpandedPrivateKeySize">
            <summary>
            A 64 byte expanded form of private key. This form is used internally to improve performance
            </summary>
        </member>
        <member name="M:Discord.Net.ED25519.Ed25519.Verify(System.ArraySegment{System.Byte},System.ArraySegment{System.Byte},System.ArraySegment{System.Byte})">
            <summary>
            Verify Ed25519 signature
            </summary>
            <param name="signature">Signature bytes</param>
            <param name="message">Message</param>
            <param name="publicKey">Public key</param>
            <returns>True if signature is valid, false if it's not</returns>
        </member>
        <member name="M:Discord.Net.ED25519.Ed25519.Verify(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Verify Ed25519 signature
            </summary>
            <param name="signature">Signature bytes</param>
            <param name="message">Message</param>
            <param name="publicKey">Public key</param>
            <returns>True if signature is valid, false if it's not</returns>
        </member>
        <member name="M:Discord.Net.ED25519.Sha512.#ctor">
            <summary>
            Allocation and initialization of the new SHA-512 object.
            </summary>
        </member>
        <member name="M:Discord.Net.ED25519.Sha512.Init">
            <summary>
            Performs an initialization of internal SHA-512 state.
            </summary>
        </member>
        <member name="M:Discord.Net.ED25519.Sha512.Update(System.ArraySegment{System.Byte})">
            <summary>
            Updates internal state with data from the provided array segment.
            </summary>
            <param name="data">Array segment</param>
        </member>
        <member name="M:Discord.Net.ED25519.Sha512.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates internal state with data from the provided array.
            </summary>
            <param name="data">Array of bytes</param>
            <param name="index">Offset of byte sequence</param>
            <param name="length">Sequence length</param>
        </member>
        <member name="M:Discord.Net.ED25519.Sha512.Finalize(System.ArraySegment{System.Byte})">
            <summary>
            Finalizes SHA-512 hashing
            </summary>
            <param name="output">Output buffer</param>
        </member>
        <member name="M:Discord.Net.ED25519.Sha512.Finalize">
            <summary>
            Finalizes SHA-512 hashing.
            </summary>
            <returns>Hash bytes</returns>
        </member>
        <member name="M:Discord.Net.ED25519.Sha512.Hash(System.Byte[])">
            <summary>
            Calculates SHA-512 hash value for the given bytes array.
            </summary>
            <param name="data">Data bytes array</param>
            <returns>Hash bytes</returns>
        </member>
        <member name="M:Discord.Net.ED25519.Sha512.Hash(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Calculates SHA-512 hash value for the given bytes array.
            </summary>
            <param name="data">Data bytes array</param>
            <param name="index">Offset of byte sequence</param>
            <param name="length">Sequence length</param>
            <returns>Hash bytes</returns>
        </member>
        <member name="T:Discord.Net.RateLimitInfo">
            <summary>
                Represents a REST-Based ratelimit info.
            </summary>
        </member>
        <member name="P:Discord.Net.RateLimitInfo.IsGlobal">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Net.RateLimitInfo.Limit">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Net.RateLimitInfo.Remaining">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Net.RateLimitInfo.RetryAfter">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Net.RateLimitInfo.Reset">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Net.RateLimitInfo.ResetAfter">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Net.RateLimitInfo.Bucket">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Net.RateLimitInfo.Lag">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Net.RateLimitInfo.Endpoint">
            <inheritdoc/>
        </member>
        <member name="E:Discord.Rest.BaseDiscordClient.SentRequest">
            <summary>
                Fired when a REST request is sent to the API. First parameter is the HTTP method,
                second is the endpoint, and third is the time taken to complete the request.
            </summary>
        </member>
        <member name="P:Discord.Rest.BaseDiscordClient.LoginState">
            <summary>
                Gets the login state of the client.
            </summary>
        </member>
        <member name="P:Discord.Rest.BaseDiscordClient.CurrentUser">
            <summary>
                Gets the logged-in user.
            </summary>
        </member>
        <member name="P:Discord.Rest.BaseDiscordClient.TokenType">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.#ctor(Discord.Rest.DiscordRestConfig,Discord.API.DiscordRestApiClient)">
            <summary> Creates a new REST-only Discord client. </summary>
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.GetRecommendedShardCountAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.GetBotGatewayAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.BaseDiscordClient.ConnectionState">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#CurrentUser">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetApplicationInfoAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetPrivateChannelsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetDMChannelsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetGroupChannelsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetConnectionsAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetInviteAsync(System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetGuildAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetGuildsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#CreateGuildAsync(System.String,Discord.IVoiceRegion,System.IO.Stream,Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">Creating a guild is not supported with the base client.</exception>
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetUserAsync(System.String,System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetVoiceRegionsAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetVoiceRegionAsync(System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetWebhookAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetGlobalApplicationCommandAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetGlobalApplicationCommandsAsync(System.Boolean,System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#StartAsync">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#StopAsync">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#CreateTestEntitlementAsync(System.UInt64,System.UInt64,Discord.SubscriptionOwnerType,Discord.RequestOptions)">
            <summary>
                Creates a test entitlement to a given SKU for a given guild or user.
            </summary>
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#DeleteTestEntitlementAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Deletes a currently-active test entitlement.
            </summary>
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetEntitlementsAsync(System.Nullable{System.Int32},System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Boolean,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.UInt64[],Discord.RequestOptions)">
            <summary>
                Returns all entitlements for a given app.
            </summary>
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetSKUsAsync(Discord.RequestOptions)">
            <summary>
                Gets all SKUs for a given application.
            </summary>
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#ConsumeEntitlementAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Marks a given one-time purchase entitlement for the user as consumed.
            </summary>
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetApplicationEmoteAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetApplicationEmotesAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#ModifyApplicationEmoteAsync(System.UInt64,System.Action{Discord.ApplicationEmoteProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#CreateApplicationEmoteAsync(System.String,Discord.Image,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#DeleteApplicationEmoteAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.ClientHelper.GetPrivateChannelsAsync(Discord.Rest.BaseDiscordClient,Discord.RequestOptions)">
            <exception cref="T:System.InvalidOperationException">Unexpected channel type.</exception>
        </member>
        <member name="T:Discord.Rest.DiscordRestClient">
            <summary>
                Provides a client to send REST-based requests to Discord.
            </summary>
        </member>
        <member name="P:Discord.Rest.DiscordRestClient.CurrentUser">
            <summary>
                Gets the logged-in user.
            </summary>
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.#ctor(Discord.Rest.DiscordRestConfig)">
            <summary>
                Initializes a new <see cref="T:Discord.Rest.DiscordRestClient"/> with the provided configuration.
            </summary>
            <param name="config">The configuration to be used with the client.</param>
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.OnLoginAsync(Discord.TokenType,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.OnLogoutAsync">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.ParseHttpInteractionAsync(System.String,System.String,System.String,System.String,System.Func{Discord.Rest.InteractionProperties,System.Boolean})">
            <summary>
                Creates a <see cref="T:Discord.Rest.RestInteraction"/> from a http message.
            </summary>
            <param name="publicKey">The public key of your application</param>
            <param name="signature">The signature sent with the interaction.</param>
            <param name="timestamp">The timestamp sent with the interaction.</param>
            <param name="body">The body of the http message.</param>
            <returns>
                A <see cref="T:Discord.Rest.RestInteraction"/> that represents the incoming http interaction.
            </returns>
            <exception cref="T:Discord.Rest.BadSignatureException">Thrown when the signature doesn't match the public key.</exception>
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.ParseHttpInteractionAsync(System.String,System.String,System.String,System.Byte[],System.Func{Discord.Rest.InteractionProperties,System.Boolean})">
            <summary>
                Creates a <see cref="T:Discord.Rest.RestInteraction"/> from a http message.
            </summary>
            <param name="publicKey">The public key of your application</param>
            <param name="signature">The signature sent with the interaction.</param>
            <param name="timestamp">The timestamp sent with the interaction.</param>
            <param name="body">The body of the http message.</param>
            <returns>
                A <see cref="T:Discord.Rest.RestInteraction"/> that represents the incoming http interaction.
            </returns>
            <exception cref="T:Discord.Rest.BadSignatureException">Thrown when the signature doesn't match the public key.</exception>
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.CreateTestEntitlementAsync(System.UInt64,System.UInt64,Discord.SubscriptionOwnerType,Discord.RequestOptions)">
            <inheritdoc cref="M:Discord.IDiscordClient.CreateTestEntitlementAsync(System.UInt64,System.UInt64,Discord.SubscriptionOwnerType,Discord.RequestOptions)" />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.DeleteTestEntitlementAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.GetEntitlementsAsync(System.Nullable{System.Int32},System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Boolean,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.UInt64[],Discord.RequestOptions)">
            <inheritdoc cref="M:Discord.IDiscordClient.GetEntitlementsAsync(System.Nullable{System.Int32},System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Boolean,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.UInt64[],Discord.RequestOptions)" />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.GetSKUsAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.ConsumeEntitlementAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.GetApplicationEmoteAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.GetApplicationEmotesAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.ModifyApplicationEmoteAsync(System.UInt64,System.Action{Discord.ApplicationEmoteProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.CreateApplicationEmoteAsync(System.String,Discord.Image,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.DeleteApplicationEmoteAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.Discord#IDiscordClient#GetApplicationInfoAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.Discord#IDiscordClient#GetChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.Discord#IDiscordClient#GetPrivateChannelsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.Discord#IDiscordClient#GetDMChannelsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.Discord#IDiscordClient#GetGroupChannelsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.Discord#IDiscordClient#GetConnectionsAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.Discord#IDiscordClient#GetGuildAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.Discord#IDiscordClient#GetGuildsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.Discord#IDiscordClient#CreateGuildAsync(System.String,Discord.IVoiceRegion,System.IO.Stream,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.Discord#IDiscordClient#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.Discord#IDiscordClient#GetVoiceRegionsAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.Discord#IDiscordClient#GetVoiceRegionAsync(System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.Discord#IDiscordClient#GetWebhookAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.Discord#IDiscordClient#GetGlobalApplicationCommandsAsync(System.Boolean,System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.Discord#IDiscordClient#GetGlobalApplicationCommandAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.Discord#IDiscordClient#CreateGlobalApplicationCommand(Discord.ApplicationCommandProperties,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.Discord#IDiscordClient#BulkOverwriteGlobalApplicationCommand(Discord.ApplicationCommandProperties[],Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.DiscordRestConfig">
            <summary>
                Represents a configuration class for <see cref="T:Discord.Rest.DiscordRestClient"/>.
            </summary>
        </member>
        <member name="P:Discord.Rest.DiscordRestConfig.RestClientProvider">
            <summary> Gets or sets the provider used to generate new REST connections. </summary>
        </member>
        <member name="P:Discord.Rest.RestEntitlement.CreatedAt">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestEntitlement.SkuId">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestEntitlement.UserId">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestEntitlement.GuildId">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestEntitlement.ApplicationId">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestEntitlement.Type">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestEntitlement.IsConsumed">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestEntitlement.StartsAt">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestEntitlement.EndsAt">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Rest.AutoModBlockedMessageAuditLogData">
            <summary>
                Contains a piece of audit log data related to message getting blocked by automod.
            </summary>
        </member>
        <member name="P:Discord.Rest.AutoModBlockedMessageAuditLogData.ChannelId">
            <summary>
                Gets the channel the message was sent in.
            </summary>
        </member>
        <member name="P:Discord.Rest.AutoModBlockedMessageAuditLogData.AutoModRuleName">
            <summary>
                Gets the name of the auto moderation rule that got triggered.
            </summary>
        </member>
        <member name="P:Discord.Rest.AutoModBlockedMessageAuditLogData.AutoModRuleTriggerType">
            <summary>
                Gets the trigger type of the auto moderation rule that got triggered.
            </summary>
        </member>
        <member name="T:Discord.Rest.AutoModFlaggedMessageAuditLogData">
            <summary>
                Contains a piece of audit log data related to message getting flagged by automod.
            </summary>
        </member>
        <member name="P:Discord.Rest.AutoModFlaggedMessageAuditLogData.ChannelId">
            <summary>
                Gets the channel the message was sent in. Will be 0 if a user profile was flagged.
            </summary>
        </member>
        <member name="P:Discord.Rest.AutoModFlaggedMessageAuditLogData.AutoModRuleName">
            <summary>
                Gets the name of the auto moderation rule that got triggered.
            </summary>
        </member>
        <member name="P:Discord.Rest.AutoModFlaggedMessageAuditLogData.AutoModRuleTriggerType">
            <summary>
                Gets the trigger type of the auto moderation rule that got triggered.
            </summary>
        </member>
        <member name="T:Discord.Rest.AutoModRuleCreatedAuditLogData">
            <summary>
                Contains a piece of audit log data related to an auto moderation rule creation.
            </summary>
        </member>
        <member name="P:Discord.Rest.AutoModRuleCreatedAuditLogData.Data">
            <summary>
                Gets the auto moderation rule information after the changes.
            </summary>
        </member>
        <member name="T:Discord.Rest.AutoModRuleDeletedAuditLogData">
            <summary>
                Contains a piece of audit log data related to an auto moderation rule removal.
            </summary>
        </member>
        <member name="P:Discord.Rest.AutoModRuleDeletedAuditLogData.Data">
            <summary>
                Gets the auto moderation rule information before the changes.
            </summary>
        </member>
        <member name="T:Discord.Rest.AutoModRuleInfo">
            <summary>
                Represents information for an auto moderation rule.
            </summary>
        </member>
        <member name="P:Discord.Rest.AutoModRuleInfo.Name">
            <inheritdoc cref="P:Discord.IAutoModRule.Name"/>
            <remarks>
                <see langword="null"/> if this property is not mentioned in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.AutoModRuleInfo.EventType">
            <inheritdoc cref="P:Discord.IAutoModRule.EventType"/>
            <remarks>
                <see langword="null"/> if this property is not mentioned in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.AutoModRuleInfo.TriggerType">
            <inheritdoc cref="P:Discord.IAutoModRule.TriggerType"/>
            <remarks>
                <see langword="null"/> if this property is not mentioned in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.AutoModRuleInfo.Enabled">
            <inheritdoc cref="P:Discord.IAutoModRule.Enabled"/>
            <remarks>
                <see langword="null"/> if this property is not mentioned in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.AutoModRuleInfo.ExemptRoles">
            <inheritdoc cref="P:Discord.IAutoModRule.ExemptRoles"/>
            <remarks>
                <see langword="null"/> if this property is not mentioned in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.AutoModRuleInfo.ExemptChannels">
            <inheritdoc cref="P:Discord.IAutoModRule.ExemptChannels"/>
            <remarks>
                <see langword="null"/> if this property is not mentioned in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.AutoModRuleInfo.KeywordFilter">
            <inheritdoc cref="P:Discord.IAutoModRule.KeywordFilter"/>
            <remarks>
                <see langword="null"/> if this property is not mentioned in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.AutoModRuleInfo.RegexPatterns">
            <inheritdoc cref="P:Discord.IAutoModRule.RegexPatterns"/>
            <remarks>
                <see langword="null"/> if this property is not mentioned in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.AutoModRuleInfo.AllowList">
            <inheritdoc cref="P:Discord.IAutoModRule.AllowList"/>
            <remarks>
                <see langword="null"/> if this property is not mentioned in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.AutoModRuleInfo.Presets">
            <inheritdoc cref="P:Discord.IAutoModRule.Presets"/>
            <remarks>
                <see langword="null"/> if this property is not mentioned in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.AutoModRuleInfo.MentionTotalLimit">
            <inheritdoc cref="P:Discord.IAutoModRule.MentionTotalLimit"/>
            <remarks>
                <see langword="null"/> if this property is not mentioned in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.AutoModRuleInfo.Actions">
            <inheritdoc cref="P:Discord.IAutoModRule.Actions"/>
            <remarks>
                <see langword="null"/> if this property is not mentioned in this entry.
            </remarks>
        </member>
        <member name="T:Discord.Rest.AutoModRuleUpdatedAuditLogData">
            <summary>
                Contains a piece of audit log data related to an auto moderation rule update.
            </summary>
        </member>
        <member name="P:Discord.Rest.AutoModRuleUpdatedAuditLogData.Rule">
            <summary>
                Gets the auto moderation rule the changes correspond to.
            </summary>
        </member>
        <member name="P:Discord.Rest.AutoModRuleUpdatedAuditLogData.Before">
            <summary>
                Gets the auto moderation rule information before the changes.
            </summary>
        </member>
        <member name="P:Discord.Rest.AutoModRuleUpdatedAuditLogData.After">
            <summary>
                Gets the auto moderation rule information after the changes.
            </summary>
        </member>
        <member name="T:Discord.Rest.AutoModTimeoutUserAuditLogData">
            <summary>
                Contains a piece of audit log data related to user getting in timeout by automod.
            </summary>
        </member>
        <member name="P:Discord.Rest.AutoModTimeoutUserAuditLogData.ChannelId">
            <summary>
                Gets the channel the message was sent in.
            </summary>
        </member>
        <member name="P:Discord.Rest.AutoModTimeoutUserAuditLogData.AutoModRuleName">
            <summary>
                Gets the name of the auto moderation rule that got triggered.
            </summary>
        </member>
        <member name="P:Discord.Rest.AutoModTimeoutUserAuditLogData.AutoModRuleTriggerType">
            <summary>
                Gets the trigger type of the auto moderation rule that got triggered.
            </summary>
        </member>
        <member name="T:Discord.Rest.BanAuditLogData">
            <summary>
                Contains a piece of audit log data related to a ban.
            </summary>
        </member>
        <member name="P:Discord.Rest.BanAuditLogData.Target">
            <summary>
                Gets the user that was banned.
            </summary>
            <remarks>
                Will be <see langword="null"/> if the user is a 'Deleted User#....' because Discord does send user data for deleted users.
            </remarks>
            <returns>
                A user object representing the banned user.
            </returns>
        </member>
        <member name="T:Discord.Rest.BotAddAuditLogData">
            <summary>
                Contains a piece of audit log data related to a adding a bot to a guild.
            </summary>
        </member>
        <member name="P:Discord.Rest.BotAddAuditLogData.Target">
            <summary>
                Gets the bot that was added.
            </summary>
            <remarks>
                Will be <see langword="null"/> if the bot is a 'Deleted User#....' because Discord does send user data for deleted users.
            </remarks>
            <returns>
                A user object representing the bot.
            </returns>
        </member>
        <member name="T:Discord.Rest.ChannelCreateAuditLogData">
            <summary>
                Contains a piece of audit log data related to a channel creation.
            </summary>
        </member>
        <member name="P:Discord.Rest.ChannelCreateAuditLogData.ChannelId">
            <summary>
                Gets the snowflake ID of the created channel.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier for the created channel.
            </returns>
        </member>
        <member name="P:Discord.Rest.ChannelCreateAuditLogData.ChannelName">
            <summary>
                Gets the name of the created channel.
            </summary>
            <returns>
                A string containing the name of the created channel.
            </returns>
        </member>
        <member name="P:Discord.Rest.ChannelCreateAuditLogData.ChannelType">
            <summary>
                Gets the type of the created channel.
            </summary>
            <returns>
                The type of channel that was created.
            </returns>
        </member>
        <member name="P:Discord.Rest.ChannelCreateAuditLogData.SlowModeInterval">
            <summary>
                Gets the current slow-mode delay of the created channel.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the time in seconds required before the user can send another
                message; <c>0</c> if disabled.
                <see langword="null" /> if this is not mentioned in this entry.
            </returns>
        </member>
        <member name="P:Discord.Rest.ChannelCreateAuditLogData.IsNsfw">
            <summary>
                Gets the value that indicates whether the created channel is NSFW.
            </summary>
            <returns>
                <see langword="true" /> if the created channel has the NSFW flag enabled; otherwise <see langword="false" />.
                <see langword="null" /> if this is not mentioned in this entry.
            </returns>
        </member>
        <member name="P:Discord.Rest.ChannelCreateAuditLogData.Bitrate">
            <summary>
                Gets the bit-rate that the clients in the created voice channel are requested to use.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the bit-rate (bps) that the created voice channel defines and requests the
                client(s) to use.
                <see langword="null" /> if this is not mentioned in this entry.
            </returns>
        </member>
        <member name="P:Discord.Rest.ChannelCreateAuditLogData.Overwrites">
            <summary>
                Gets a collection of permission overwrites that was assigned to the created channel.
            </summary>
            <returns>
                A collection of permission <see cref="T:Discord.Overwrite"/>, containing the permission overwrites that were
                assigned to the created channel.
            </returns>
        </member>
        <member name="P:Discord.Rest.ChannelCreateAuditLogData.AutoArchiveDuration">
            <summary>
                Gets the thread archive duration that was set in the created channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.ChannelCreateAuditLogData.DefaultAutoArchiveDuration">
            <summary>
                Gets the default thread archive duration that was set in the created channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.ChannelCreateAuditLogData.DefaultSlowModeInterval">
            <summary>
                Gets the default slow mode interval that will be set in child threads in the channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.ChannelCreateAuditLogData.Topic">
            <summary>
                Gets the topic that was set in the created channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.ChannelCreateAuditLogData.AvailableTags">
            <summary>
                Gets tags available in the created forum channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.ChannelCreateAuditLogData.DefaultReactionEmoji">
            <summary>
                Gets the default reaction added to posts in the created forum channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.ChannelCreateAuditLogData.UserLimit">
            <summary>
                Gets the user limit configured in the created voice channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.ChannelCreateAuditLogData.VideoQualityMode">
            <summary>
                Gets the video quality mode configured in the created voice channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.ChannelCreateAuditLogData.RtcRegion">
            <summary>
                Gets the region configured in the created voice channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.ChannelCreateAuditLogData.Flags">
            <summary>
                Gets channel flags configured for the created channel.
            </summary>
        </member>
        <member name="T:Discord.Rest.ChannelDeleteAuditLogData">
            <summary>
                Contains a piece of audit log data related to a channel deletion.
            </summary>
        </member>
        <member name="P:Discord.Rest.ChannelDeleteAuditLogData.ChannelId">
            <summary>
                Gets the snowflake ID of the deleted channel.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier for the deleted channel.
            </returns>
        </member>
        <member name="P:Discord.Rest.ChannelDeleteAuditLogData.ChannelName">
            <summary>
                Gets the name of the deleted channel.
            </summary>
            <returns>
                A string containing the name of the deleted channel.
            </returns>
        </member>
        <member name="P:Discord.Rest.ChannelDeleteAuditLogData.ChannelType">
            <summary>
                Gets the type of the deleted channel.
            </summary>
            <returns>
                The type of channel that was deleted.
            </returns>
        </member>
        <member name="P:Discord.Rest.ChannelDeleteAuditLogData.SlowModeInterval">
            <summary>
                Gets the slow-mode delay of the deleted channel.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the time in seconds required before the user can send another
                message; <c>0</c> if disabled.
                <see langword="null" /> if this is not mentioned in this entry.
            </returns>
        </member>
        <member name="P:Discord.Rest.ChannelDeleteAuditLogData.IsNsfw">
            <summary>
                Gets the value that indicates whether the deleted channel was NSFW.
            </summary>
            <returns>
                <see langword="true" /> if this channel had the NSFW flag enabled; otherwise <see langword="false" />.
                <see langword="null" /> if this is not mentioned in this entry.
            </returns>
        </member>
        <member name="P:Discord.Rest.ChannelDeleteAuditLogData.Bitrate">
            <summary>
                Gets the bit-rate of this channel if applicable.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the bit-rate set of the voice channel.
                <see langword="null" /> if this is not mentioned in this entry.
            </returns>
        </member>
        <member name="P:Discord.Rest.ChannelDeleteAuditLogData.Overwrites">
            <summary>
                Gets a collection of permission overwrites that was assigned to the deleted channel.
            </summary>
            <returns>
                A collection of permission <see cref="T:Discord.Overwrite"/>.
            </returns>
        </member>
        <member name="P:Discord.Rest.ChannelDeleteAuditLogData.UserLimit">
            <summary>
                Gets the user limit configured in the created voice channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.ChannelDeleteAuditLogData.VideoQualityMode">
            <summary>
                Gets the video quality mode configured in the created voice channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.ChannelDeleteAuditLogData.RtcRegion">
            <summary>
                Gets the region configured in the created voice channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.ChannelDeleteAuditLogData.Flags">
            <summary>
                Gets channel flags configured for the created channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.ChannelDeleteAuditLogData.AutoArchiveDuration">
            <summary>
                Gets the thread archive duration that was configured for the created channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.ChannelDeleteAuditLogData.DefaultSlowModeInterval">
            <summary>
                Gets the default slow mode interval that was configured for the channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.ChannelDeleteAuditLogData.DefaultArchiveDuration">
            <inheritdoc cref="P:Discord.ITextChannel.DefaultArchiveDuration"/>
            <remarks>
                <see langword="null" /> if the value was not specified in this entry..
            </remarks>
        </member>
        <member name="P:Discord.Rest.ChannelDeleteAuditLogData.ForumTags">
            <inheritdoc cref="P:Discord.IForumChannel.Tags"/>
            <remarks>
                <see langword="null" /> if the value was not specified in this entry..
            </remarks>
        </member>
        <member name="P:Discord.Rest.ChannelDeleteAuditLogData.Topic">
            <inheritdoc cref="P:Discord.ITextChannel.Topic"/>
            <remarks>
                <see langword="null" /> if the value was not specified in this entry..
            </remarks>
        </member>
        <member name="P:Discord.Rest.ChannelDeleteAuditLogData.DefaultReactionEmoji">
            <inheritdoc cref="P:Discord.IForumChannel.DefaultReactionEmoji"/>
            <remarks>
                <see langword="null" /> if the value was not specified in this entry..
            </remarks>
        </member>
        <member name="T:Discord.Rest.ChannelInfo">
            <summary>
                Represents information for a channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.ChannelInfo.Name">
            <summary>
                Gets the name of this channel.
            </summary>
            <returns>
                A string containing the name of this channel.
            </returns>
        </member>
        <member name="P:Discord.Rest.ChannelInfo.Topic">
            <summary>
                Gets the topic of this channel.
            </summary>
            <returns>
                A string containing the topic of this channel, if any.
            </returns>
        </member>
        <member name="P:Discord.Rest.ChannelInfo.SlowModeInterval">
            <summary>
                Gets the current slow-mode delay of this channel.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the time in seconds required before the user can send another
                message; <c>0</c> if disabled.
                <see langword="null" /> if this is not mentioned in this entry.
            </returns>
        </member>
        <member name="P:Discord.Rest.ChannelInfo.IsNsfw">
            <summary>
                Gets the value that indicates whether this channel is NSFW.
            </summary>
            <returns>
                <see langword="true" /> if this channel has the NSFW flag enabled; otherwise <see langword="false" />.
                <see langword="null" /> if this is not mentioned in this entry.
            </returns>
        </member>
        <member name="P:Discord.Rest.ChannelInfo.Bitrate">
            <summary>
                Gets the bit-rate of this channel if applicable.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the bit-rate set for the voice channel;
                <see langword="null" /> if this is not mentioned in this entry.
            </returns>
        </member>
        <member name="P:Discord.Rest.ChannelInfo.ChannelType">
            <summary>
                Gets the type of this channel.
            </summary>
            <returns>
                The channel type of this channel; <see langword="null" /> if not applicable.
            </returns>
        </member>
        <member name="P:Discord.Rest.ChannelInfo.DefaultArchiveDuration">
            <inheritdoc cref="P:Discord.ITextChannel.DefaultArchiveDuration"/>
            <remarks>
                <see langword="null" /> if the value was not updated in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.ChannelInfo.ForumTags">
            <inheritdoc cref="P:Discord.IForumChannel.Tags"/>
            <remarks>
                <see langword="null" /> if the value was not updated in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.ChannelInfo.DefaultReactionEmoji">
            <inheritdoc cref="P:Discord.IForumChannel.DefaultReactionEmoji"/>
            <remarks>
                <see langword="null" /> if the value was not updated in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.ChannelInfo.UserLimit">
            <summary>
                Gets the user limit configured in the created voice channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.ChannelInfo.VideoQualityMode">
            <summary>
                Gets the video quality mode configured in the created voice channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.ChannelInfo.RtcRegion">
            <summary>
                Gets the region configured in the created voice channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.ChannelInfo.Flags">
            <summary>
                Gets channel flags configured for the created channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.ChannelInfo.AutoArchiveDuration">
            <summary>
                Gets the thread archive duration that was set in the created channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.ChannelInfo.DefaultSlowModeInterval">
            <summary>
                Gets the default slow mode interval that will be set in child threads in the channel.
            </summary>
        </member>
        <member name="T:Discord.Rest.ChannelUpdateAuditLogData">
            <summary>
                Contains a piece of audit log data related to a channel update.
            </summary>
        </member>
        <member name="P:Discord.Rest.ChannelUpdateAuditLogData.ChannelId">
            <summary>
                Gets the snowflake ID of the updated channel.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier for the updated channel.
            </returns>
        </member>
        <member name="P:Discord.Rest.ChannelUpdateAuditLogData.Before">
            <summary>
                Gets the channel information before the changes.
            </summary>
            <returns>
                An information object containing the original channel information before the changes were made.
            </returns>
        </member>
        <member name="P:Discord.Rest.ChannelUpdateAuditLogData.After">
            <summary>
                Gets the channel information after the changes.
            </summary>
            <returns>
                An information object containing the channel information after the changes were made.
            </returns>
        </member>
        <member name="T:Discord.Rest.CommandPermissionUpdateAuditLogData">
            <summary>
                Contains a piece of audit log data related to an application command permission update.
            </summary>
        </member>
        <member name="P:Discord.Rest.CommandPermissionUpdateAuditLogData.ApplicationId">
            <summary>
                Gets the ID of the app whose permissions were targeted.
            </summary>
        </member>
        <member name="P:Discord.Rest.CommandPermissionUpdateAuditLogData.ApplicationCommand">
            <summary>
                Gets the application command which permissions were updated.
            </summary>
        </member>
        <member name="P:Discord.Rest.CommandPermissionUpdateAuditLogData.Before">
            <summary>
                Gets values of the permissions before the change if available.
            </summary>
        </member>
        <member name="P:Discord.Rest.CommandPermissionUpdateAuditLogData.After">
            <summary>
                Gets values of the permissions after the change if available.
            </summary>
        </member>
        <member name="T:Discord.Rest.EmoteCreateAuditLogData">
            <summary>
                Contains a piece of audit log data related to an emoji creation.
            </summary>
        </member>
        <member name="P:Discord.Rest.EmoteCreateAuditLogData.EmoteId">
            <summary>
                Gets the snowflake ID of the created emoji.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier for the created emoji.
            </returns>
        </member>
        <member name="P:Discord.Rest.EmoteCreateAuditLogData.Name">
            <summary>
                Gets the name of the created emoji.
            </summary>
            <returns>
                A string containing the name of the created emoji.
            </returns>
        </member>
        <member name="T:Discord.Rest.EmoteDeleteAuditLogData">
            <summary>
                Contains a piece of audit log data related to an emoji deletion.
            </summary>
        </member>
        <member name="P:Discord.Rest.EmoteDeleteAuditLogData.EmoteId">
            <summary>
                Gets the snowflake ID of the deleted emoji.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier for the deleted emoji.
            </returns>
        </member>
        <member name="P:Discord.Rest.EmoteDeleteAuditLogData.Name">
            <summary>
                Gets the name of the deleted emoji.
            </summary>
            <returns>
                A string containing the name of the deleted emoji.
            </returns>
        </member>
        <member name="T:Discord.Rest.EmoteUpdateAuditLogData">
            <summary>
                Contains a piece of audit log data related to an emoji update.
            </summary>
        </member>
        <member name="P:Discord.Rest.EmoteUpdateAuditLogData.EmoteId">
            <summary>
                Gets the snowflake ID of the updated emoji.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier of the updated emoji.
            </returns>
        </member>
        <member name="P:Discord.Rest.EmoteUpdateAuditLogData.NewName">
            <summary>
                Gets the new name of the updated emoji.
            </summary>
            <returns>
                A string containing the new name of the updated emoji.
            </returns>
        </member>
        <member name="P:Discord.Rest.EmoteUpdateAuditLogData.OldName">
            <summary>
                Gets the old name of the updated emoji.
            </summary>
            <returns>
                A string containing the old name of the updated emoji.
            </returns>
        </member>
        <member name="T:Discord.Rest.GuildInfo">
            <summary>
                Represents information for a guild.
            </summary>
        </member>
        <member name="P:Discord.Rest.GuildInfo.DiscoverySplashId">
            <inheritdoc cref="P:Discord.IGuild.DiscoverySplashId"/>
            <remarks>
                <see langword="null" /> if the value was not updated in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.GuildInfo.SplashId">
            <inheritdoc cref="P:Discord.IGuild.SplashId"/>
            <remarks>
                <see langword="null" /> if the value was not updated in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.GuildInfo.RulesChannelId">
            <inheritdoc cref="P:Discord.IGuild.RulesChannelId"/>
            <remarks>
                <see langword="null" /> if the value was not updated in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.GuildInfo.PublicUpdatesChannelId">
            <inheritdoc cref="P:Discord.IGuild.PublicUpdatesChannelId"/>
            <remarks>
                <see langword="null" /> if the value was not updated in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.GuildInfo.OwnerId">
            <inheritdoc cref="P:Discord.IGuild.OwnerId"/>
            <remarks>
                <see langword="null" /> if the value was not updated in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.GuildInfo.ApplicationId">
            <inheritdoc cref="P:Discord.IGuild.ApplicationId"/>
            <remarks>
                <see langword="null" /> if the value was not updated in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.GuildInfo.BannerId">
            <inheritdoc cref="P:Discord.IGuild.BannerId"/>
            <remarks>
                <see langword="null" /> if the value was not updated in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.GuildInfo.VanityURLCode">
            <inheritdoc cref="P:Discord.IGuild.VanityURLCode"/>
            <remarks>
                <see langword="null" /> if the value was not updated in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.GuildInfo.SystemChannelFlags">
            <inheritdoc cref="P:Discord.IGuild.SystemChannelFlags"/>
            <remarks>
                <see langword="null" /> if the value was not updated in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.GuildInfo.Description">
            <inheritdoc cref="P:Discord.IGuild.Description"/>
            <remarks>
                <see langword="null" /> if the value was not updated in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.GuildInfo.PreferredLocale">
            <inheritdoc cref="P:Discord.IGuild.PreferredLocale"/>
            <remarks>
                <see langword="null" /> if the value was not updated in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.GuildInfo.NsfwLevel">
            <inheritdoc cref="P:Discord.IGuild.NsfwLevel"/>
            <remarks>
                <see langword="null" /> if the value was not updated in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.GuildInfo.IsBoostProgressBarEnabled">
            <inheritdoc cref="P:Discord.IGuild.IsBoostProgressBarEnabled"/>
            <remarks>
                <see langword="null" /> if the value was not updated in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.GuildInfo.AfkTimeout">
            <summary>
                Gets the amount of time (in seconds) a user must be inactive in a voice channel for until they are
                automatically moved to the AFK voice channel.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the amount of time in seconds for a user to be marked as inactive
                and moved into the AFK voice channel.
                <see langword="null" /> if this is not mentioned in this entry.
            </returns>
        </member>
        <member name="P:Discord.Rest.GuildInfo.DefaultMessageNotifications">
            <summary>
                Gets the default message notifications for users who haven't explicitly set their notification settings.
            </summary>
            <returns>
                The default message notifications setting of this guild.
                <see langword="null" /> if this is not mentioned in this entry.
            </returns>
        </member>
        <member name="P:Discord.Rest.GuildInfo.AfkChannelId">
            <summary>
                Gets the ID of the AFK voice channel for this guild.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier of the AFK voice channel; <see langword="null" /> if
                none is set.
            </returns>
        </member>
        <member name="P:Discord.Rest.GuildInfo.Name">
            <summary>
                Gets the name of this guild.
            </summary>
            <returns>
                A string containing the name of this guild.
            </returns>
        </member>
        <member name="P:Discord.Rest.GuildInfo.RegionId">
            <summary>
                Gets the ID of the region hosting this guild's voice channels.
            </summary>
        </member>
        <member name="P:Discord.Rest.GuildInfo.IconHash">
            <summary>
                Gets the ID of this guild's icon.
            </summary>
            <returns>
                A string containing the identifier for the splash image; <see langword="null" /> if none is set.
            </returns>
        </member>
        <member name="P:Discord.Rest.GuildInfo.VerificationLevel">
            <summary>
                Gets the level of requirements a user must fulfill before being allowed to post messages in this guild.
            </summary>
            <returns>
                The level of requirements.
                <see langword="null" /> if this is not mentioned in this entry.
            </returns>
        </member>
        <member name="P:Discord.Rest.GuildInfo.Owner">
            <summary>
                Gets the owner of this guild.
            </summary>
            <returns>
                A user object representing the owner of this guild.
            </returns>
        </member>
        <member name="P:Discord.Rest.GuildInfo.MfaLevel">
            <summary>
                Gets the level of Multi-Factor Authentication requirements a user must fulfill before being allowed to
                perform administrative actions in this guild.
            </summary>
            <returns>
                The level of MFA requirement.
                <see langword="null" /> if this is not mentioned in this entry.
            </returns>
        </member>
        <member name="P:Discord.Rest.GuildInfo.ExplicitContentFilter">
            <summary>
                Gets the level of content filtering applied to user's content in a Guild.
            </summary>
            <returns>
                The level of explicit content filtering.
            </returns>
        </member>
        <member name="P:Discord.Rest.GuildInfo.SystemChannelId">
            <summary>
                Gets the ID of the channel where system messages are sent.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier of the channel where system
                messages are sent; <see langword="null" /> if none is set.
            </returns>
        </member>
        <member name="P:Discord.Rest.GuildInfo.EmbedChannelId">
            <summary>
                Gets the ID of the widget embed channel of this guild.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier of the embedded channel found within the
                widget settings of this guild; <see langword="null" /> if none is set.
            </returns>
        </member>
        <member name="P:Discord.Rest.GuildInfo.IsEmbeddable">
            <summary>
                Gets a value that indicates whether this guild is embeddable (i.e. can use widget).
            </summary>
            <returns>
                <see langword="true" /> if this guild can be embedded via widgets; otherwise <see langword="false" />.
                <see langword="null" /> if this is not mentioned in this entry.
            </returns>
        </member>
        <member name="T:Discord.Rest.GuildUpdateAuditLogData">
            <summary>
                Contains a piece of audit log data related to a guild update.
            </summary>
        </member>
        <member name="P:Discord.Rest.GuildUpdateAuditLogData.Before">
            <summary>
                Gets the guild information before the changes.
            </summary>
            <returns>
                An information object containing the original guild information before the changes were made.
            </returns>
        </member>
        <member name="P:Discord.Rest.GuildUpdateAuditLogData.After">
            <summary>
                Gets the guild information after the changes.
            </summary>
            <returns>
                An information object containing the guild information after the changes were made.
            </returns>
        </member>
        <member name="T:Discord.Rest.IntegrationCreatedAuditLogData">
            <summary>
                Contains a piece of audit log data related to an integration authorization.
            </summary>
        </member>
        <member name="P:Discord.Rest.IntegrationCreatedAuditLogData.Integration">
            <summary>
                Gets the partial integration the changes correspond to.
            </summary>
        </member>
        <member name="P:Discord.Rest.IntegrationCreatedAuditLogData.Data">
            <summary>
                Gets the integration information after the changes.
            </summary>
        </member>
        <member name="T:Discord.Rest.IntegrationDeletedAuditLogData">
            <summary>
                Contains a piece of audit log data related to an integration removal.
            </summary>
        </member>
        <member name="P:Discord.Rest.IntegrationDeletedAuditLogData.Data">
            <summary>
                Gets the integration information before the changes.
            </summary>
        </member>
        <member name="T:Discord.Rest.IntegrationInfo">
            <summary>
                Represents information for an integration.
            </summary>
        </member>
        <member name="P:Discord.Rest.IntegrationInfo.Name">
            <summary>
                Gets the name of the integration. <see landword="null"/> if the property was not mentioned in this audit log.
            </summary>
        </member>
        <member name="P:Discord.Rest.IntegrationInfo.Type">
            <summary>
                Gets the type of the integration. <see landword="null"/> if the property was not mentioned in this audit log.
            </summary>
        </member>
        <member name="P:Discord.Rest.IntegrationInfo.Enabled">
            <summary>
                Gets if the integration is enabled. <see landword="null"/> if the property was not mentioned in this audit log.
            </summary>
        </member>
        <member name="P:Discord.Rest.IntegrationInfo.Syncing">
            <summary>
                Gets if syncing is enabled for this integration. <see landword="null"/> if the property was not mentioned in this audit log.
            </summary>
        </member>
        <member name="P:Discord.Rest.IntegrationInfo.RoleId">
            <summary>
                Gets the id of the role that this integration uses for subscribers. <see landword="null"/> if the property was not mentioned in this audit log.
            </summary>
        </member>
        <member name="P:Discord.Rest.IntegrationInfo.EnableEmojis">
            <summary>
                Gets whether emoticons should be synced for this integration. <see landword="null"/> if the property was not mentioned in this audit log.
            </summary>
        </member>
        <member name="P:Discord.Rest.IntegrationInfo.ExpireBehavior">
            <summary>
                Gets the behavior of expiring subscribers. <see landword="null"/> if the property was not mentioned in this audit log.
            </summary>
        </member>
        <member name="P:Discord.Rest.IntegrationInfo.ExpireGracePeriod">
            <summary>
            	Gets the grace period (in days) before expiring subscribers. <see landword="null"/> if the property was not mentioned in this audit log.
            </summary>
        </member>
        <member name="P:Discord.Rest.IntegrationInfo.Scopes">
            <summary>
                Gets the scopes the application has been authorized for. <see landword="null"/> if the property was not mentioned in this audit log.
            </summary>
        </member>
        <member name="T:Discord.Rest.IntegrationUpdatedAuditLogData">
            <summary>
                Contains a piece of audit log data related to an integration update.
            </summary>
        </member>
        <member name="P:Discord.Rest.IntegrationUpdatedAuditLogData.Integration">
            <summary>
                Gets the partial integration the changes correspond to.
            </summary>
        </member>
        <member name="P:Discord.Rest.IntegrationUpdatedAuditLogData.Before">
            <summary>
                Gets the integration information before the changes.
            </summary>
        </member>
        <member name="P:Discord.Rest.IntegrationUpdatedAuditLogData.After">
            <summary>
                Gets the integration information after the changes.
            </summary>
        </member>
        <member name="T:Discord.Rest.InviteCreateAuditLogData">
            <summary>
                Contains a piece of audit log data related to an invite creation.
            </summary>
        </member>
        <member name="P:Discord.Rest.InviteCreateAuditLogData.MaxAge">
            <summary>
                Gets the time (in seconds) until the invite expires.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the time in seconds until this invite expires.
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteCreateAuditLogData.Code">
            <summary>
                Gets the unique identifier for this invite.
            </summary>
            <returns>
                A string containing the invite code (e.g. <c>FTqNnyS</c>).
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteCreateAuditLogData.Temporary">
            <summary>
                Gets a value that determines whether the invite is a temporary one.
            </summary>
            <returns>
                <see langword="true" /> if users accepting this invite will be removed from the guild when they log off; otherwise
                <see langword="false" />.
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteCreateAuditLogData.Creator">
            <summary>
                Gets the user that created this invite if available.
            </summary>
            <remarks>
                Will be <see langword="null"/> if the user is a 'Deleted User#....' because Discord does send user data for deleted users.
            </remarks>
            <returns>
                A user that created this invite or <see langword="null"/>.
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteCreateAuditLogData.ChannelId">
            <summary>
                Gets the ID of the channel this invite is linked to.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the channel snowflake identifier that the invite points to.
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteCreateAuditLogData.Uses">
            <summary>
                Gets the number of times this invite has been used.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the number of times this invite was used.
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteCreateAuditLogData.MaxUses">
            <summary>
                Gets the max number of uses this invite may have.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the number of uses this invite may be accepted until it is removed
                from the guild; <see langword="null" /> if none is set.
            </returns>
        </member>
        <member name="T:Discord.Rest.InviteDeleteAuditLogData">
            <summary>
                Contains a piece of audit log data related to an invite removal.
            </summary>
        </member>
        <member name="P:Discord.Rest.InviteDeleteAuditLogData.MaxAge">
            <summary>
                Gets the time (in seconds) until the invite expires.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the time in seconds until this invite expires.
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteDeleteAuditLogData.Code">
            <summary>
                Gets the unique identifier for this invite.
            </summary>
            <returns>
                A string containing the invite code (e.g. <c>FTqNnyS</c>).
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteDeleteAuditLogData.Temporary">
            <summary>
                Gets a value that indicates whether the invite is a temporary one.
            </summary>
            <returns>
                <see langword="true" /> if users accepting this invite will be removed from the guild when they log off; otherwise
                <see langword="false" />.
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteDeleteAuditLogData.Creator">
            <summary>
                Gets the user that created this invite if available.
            </summary>
            <remarks>
                Will be <see langword="null"/> if the user is a 'Deleted User#....' because Discord does send user data for deleted users.
            </remarks>
            <returns>
                A user that created this invite or <see langword="null"/>.
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteDeleteAuditLogData.ChannelId">
            <summary>
                Gets the ID of the channel this invite is linked to.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the channel snowflake identifier that the invite points to.
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteDeleteAuditLogData.Uses">
            <summary>
                Gets the number of times this invite has been used.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the number of times this invite has been used.
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteDeleteAuditLogData.MaxUses">
            <summary>
                Gets the max number of uses this invite may have.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the number of uses this invite may be accepted until it is removed
                from the guild; <see langword="null" /> if none is set.
            </returns>
        </member>
        <member name="T:Discord.Rest.InviteInfo">
            <summary>
                Represents information for an invite.
            </summary>
        </member>
        <member name="P:Discord.Rest.InviteInfo.MaxAge">
            <summary>
                Gets the time (in seconds) until the invite expires.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the time in seconds until this invite expires; <see langword="null" /> if this
                invite never expires or not specified.
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteInfo.Code">
            <summary>
                Gets the unique identifier for this invite.
            </summary>
            <returns>
                A string containing the invite code (e.g. <c>FTqNnyS</c>).
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteInfo.Temporary">
            <summary>
                Gets a value that indicates whether the invite is a temporary one.
            </summary>
            <returns>
                <see langword="true" /> if users accepting this invite will be removed from the guild when they log off, 
                <see langword="false" /> if not; <see langword="null" /> if not specified.
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteInfo.ChannelId">
            <summary>
                Gets the ID of the channel this invite is linked to.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the channel snowflake identifier that the invite points to; 
                <see langword="null" /> if not specified.
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteInfo.MaxUses">
            <summary>
                Gets the max number of uses this invite may have.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the number of uses this invite may be accepted until it is removed
                from the guild; <see langword="null" /> if none is specified.
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteInfo.CreatorId">
            <summary>
                Gets the id of the user created this invite.
            </summary>
        </member>
        <member name="T:Discord.Rest.InviteUpdateAuditLogData">
            <summary>
                Contains a piece of audit log data relating to an invite update.
            </summary>
        </member>
        <member name="P:Discord.Rest.InviteUpdateAuditLogData.Before">
            <summary>
                Gets the invite information before the changes.
            </summary>
            <returns>
                An information object containing the original invite information before the changes were made.
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteUpdateAuditLogData.After">
            <summary>
                Gets the invite information after the changes.
            </summary>
            <returns>
                An information object containing the invite information after the changes were made.
            </returns>
        </member>
        <member name="T:Discord.Rest.KickAuditLogData">
            <summary>
                Contains a piece of audit log data related to a kick.
            </summary>
        </member>
        <member name="P:Discord.Rest.KickAuditLogData.Target">
            <summary>
                Gets the user that was kicked.
            </summary>
            <remarks>
                Will be <see langword="null"/> if the user is a 'Deleted User#....' because Discord does send user data for deleted users.
            </remarks>
            <returns>
                A user object representing the kicked user.
            </returns>
        </member>
        <member name="P:Discord.Rest.KickAuditLogData.IntegrationType">
            <summary>
                Gets the type of integration which performed the action. <see langword="null"/> if the action was performed by a user.
            </summary>
        </member>
        <member name="T:Discord.Rest.MemberDisconnectAuditLogData">
            <summary>
                Contains a piece of audit log data related to disconnecting members from voice channels.
            </summary>
        </member>
        <member name="P:Discord.Rest.MemberDisconnectAuditLogData.MemberCount">
            <summary>
                Gets the number of members that were disconnected.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the number of members that were disconnected from a voice channel.
            </returns>
        </member>
        <member name="T:Discord.Rest.MemberInfo">
            <summary>
                Represents information for a member.
            </summary>
        </member>
        <member name="P:Discord.Rest.MemberInfo.Nickname">
            <summary>
                Gets the nickname of the updated member.
            </summary>
            <returns>
                A string representing the nickname of the updated member; <see langword="null"/> if none is set.
            </returns>
        </member>
        <member name="P:Discord.Rest.MemberInfo.Deaf">
            <summary>
                Gets a value that indicates whether the updated member is deafened by the guild.
            </summary>
            <returns>
                <see langword="true"/> if the updated member is deafened (i.e. not permitted to listen to or speak to others) by the guild;
                otherwise <see langword="false"/>.
               <see langword="null"/> if this is not mentioned in this entry.
            </returns>
        </member>
        <member name="P:Discord.Rest.MemberInfo.Mute">
            <summary>
                Gets a value that indicates whether the updated member is muted (i.e. not permitted to speak via voice) by the
                guild.
            </summary>
            <returns>
                <see langword="true"/> if the updated member is muted by the guild; otherwise <see langword="false"/>.
                <see langword="null"/> if this is not mentioned in this entry.
            </returns>
        </member>
        <member name="P:Discord.Rest.MemberInfo.TimedOutUntil">
            <summary>
                Gets the date and time that indicates if and for how long the updated user has been timed out.
            </summary>
            <remarks>
                <see langword="null"/> or a timestamp in the past if the user is not timed out.
            </remarks>
            <returns>
                A <see cref="T:System.DateTimeOffset"/> indicating how long the user will be timed out for.
            </returns>
        </member>
        <member name="T:Discord.Rest.MemberMoveAuditLogData">
            <summary>
                Contains a piece of audit log data related to moving members between voice channels.
            </summary>
        </member>
        <member name="P:Discord.Rest.MemberMoveAuditLogData.ChannelId">
            <summary>
                Gets the ID of the channel that the members were moved to.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier for the channel that the members were moved to.
            </returns>
        </member>
        <member name="P:Discord.Rest.MemberMoveAuditLogData.MemberCount">
            <summary>
                Gets the number of members that were moved.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the number of members that were moved to another voice channel.
            </returns>
        </member>
        <member name="T:Discord.Rest.MemberRoleAuditLogData">
            <summary>
                Contains a piece of audit log data related to a change in a guild member's roles.
            </summary>
        </member>
        <member name="P:Discord.Rest.MemberRoleAuditLogData.Roles">
            <summary>
                Gets a collection of role changes that were performed on the member.
            </summary>
            <returns>
                A read-only collection of <see cref="T:Discord.Rest.MemberRoleEditInfo"/>, containing the roles that were changed on
                the member.
            </returns>
        </member>
        <member name="P:Discord.Rest.MemberRoleAuditLogData.Target">
            <summary>
                Gets the user that the roles changes were performed on.
            </summary>
            <returns>
                A user object representing the user that the role changes were performed on.
            </returns>
        </member>
        <member name="P:Discord.Rest.MemberRoleAuditLogData.IntegrationType">
            <summary>
                Gets the type of integration which performed the action. <see langword="null"/> if the action was performed by a user.
            </summary>
        </member>
        <member name="T:Discord.Rest.MemberRoleEditInfo">
            <summary>
                An information object representing a change in one of a guild member's roles.
            </summary>
        </member>
        <member name="P:Discord.Rest.MemberRoleEditInfo.Name">
            <summary>
                Gets the name of the role that was changed.
            </summary>
            <returns>
                A string containing the name of the role that was changed.
            </returns>
        </member>
        <member name="P:Discord.Rest.MemberRoleEditInfo.RoleId">
            <summary>
                Gets the ID of the role that was changed.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier of the role that was changed.
            </returns>
        </member>
        <member name="P:Discord.Rest.MemberRoleEditInfo.Added">
            <summary>
                Gets a value that indicates whether the role was added to the user.
            </summary>
            <returns>
                <see langword="true" /> if the role was added to the user; otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="P:Discord.Rest.MemberRoleEditInfo.Removed">
            <summary>
                Gets a value indicating that the user role has been removed.
            </summary>
            <returns>
                 <c>true</c> if the role has been removed from the user; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:Discord.Rest.MemberUpdateAuditLogData">
            <summary>
                Contains a piece of audit log data related to a change in a guild member.
            </summary>
        </member>
        <member name="P:Discord.Rest.MemberUpdateAuditLogData.Target">
            <summary>
                Gets the user that the changes were performed on.
            </summary>
            <remarks>
                Will be <see langword="null"/> if the user is a 'Deleted User#....' because Discord does send user data for deleted users.
            </remarks>
            <returns>
                A user object representing the user who the changes were performed on.
            </returns>
        </member>
        <member name="P:Discord.Rest.MemberUpdateAuditLogData.Before">
            <summary>
                Gets the member information before the changes.
            </summary>
            <returns>
                An information object containing the original member information before the changes were made.
            </returns>
        </member>
        <member name="P:Discord.Rest.MemberUpdateAuditLogData.After">
            <summary>
                Gets the member information after the changes.
            </summary>
            <returns>
                An information object containing the member information after the changes were made.
            </returns>
        </member>
        <member name="T:Discord.Rest.MessageBulkDeleteAuditLogData">
            <summary>
                Contains a piece of audit log data related to message deletion(s).
            </summary>
        </member>
        <member name="P:Discord.Rest.MessageBulkDeleteAuditLogData.ChannelId">
            <summary>
                Gets the ID of the channel that the messages were deleted from.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier for the channel that the messages were
                deleted from.
            </returns>
        </member>
        <member name="P:Discord.Rest.MessageBulkDeleteAuditLogData.MessageCount">
            <summary>
                Gets the number of messages that were deleted.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the number of messages that were deleted from the channel.
            </returns>
        </member>
        <member name="T:Discord.Rest.MessageDeleteAuditLogData">
            <summary>
                Contains a piece of audit log data related to message deletion(s).
            </summary>
        </member>
        <member name="P:Discord.Rest.MessageDeleteAuditLogData.MessageCount">
            <summary>
                Gets the number of messages that were deleted.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the number of messages that were deleted from the channel.
            </returns>
        </member>
        <member name="P:Discord.Rest.MessageDeleteAuditLogData.ChannelId">
            <summary>
                Gets the ID of the channel that the messages were deleted from.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier for the channel that the messages were
                deleted from.
            </returns>
        </member>
        <member name="P:Discord.Rest.MessageDeleteAuditLogData.Target">
            <summary>
                Gets the user of the messages that were deleted.
            </summary>
            <remarks>
                Will be <see langword="null"/> if the user is a 'Deleted User#....' because Discord does send user data for deleted users.
            </remarks>
            <returns>
                A user object representing the user that created the deleted messages.
            </returns>
        </member>
        <member name="T:Discord.Rest.MessagePinAuditLogData">
            <summary>
                Contains a piece of audit log data related to a pinned message.
            </summary>
        </member>
        <member name="P:Discord.Rest.MessagePinAuditLogData.MessageId">
            <summary>
                Gets the ID of the messages that was pinned.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier for the messages that was pinned.
            </returns>
        </member>
        <member name="P:Discord.Rest.MessagePinAuditLogData.ChannelId">
            <summary>
                Gets the ID of the channel that the message was pinned from.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier for the channel that the message was pinned from.
            </returns>
        </member>
        <member name="P:Discord.Rest.MessagePinAuditLogData.Target">
            <summary>
                Gets the user of the message that was pinned if available.
            </summary>
            <remarks>
                Will be <see langword="null"/> if the user is a 'Deleted User#....' because Discord does send user data for deleted users.
            </remarks>
            <returns>
                A user object representing the user that created the pinned message or <see langword="null"/>.
            </returns>
        </member>
        <member name="T:Discord.Rest.MessageUnpinAuditLogData">
            <summary>
                Contains a piece of audit log data related to an unpinned message.
            </summary>
        </member>
        <member name="P:Discord.Rest.MessageUnpinAuditLogData.MessageId">
            <summary>
                Gets the ID of the messages that was unpinned.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier for the messages that was unpinned.
            </returns>
        </member>
        <member name="P:Discord.Rest.MessageUnpinAuditLogData.ChannelId">
            <summary>
                Gets the ID of the channel that the message was unpinned from.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier for the channel that the message was unpinned from.
            </returns>
        </member>
        <member name="P:Discord.Rest.MessageUnpinAuditLogData.Target">
            <summary>
                Gets the user of the message that was unpinned if available.
            </summary>
            <remarks>
                Will be <see langword="null"/> if the user is a 'Deleted User#....' because Discord does send user data for deleted users.
            </remarks>
            <returns>
                A user object representing the user that created the unpinned message or <see langword="null"/>.
            </returns>
        </member>
        <member name="P:Discord.Rest.OnboardingInfo.Prompts">
            <inheritdoc cref="P:Discord.IGuildOnboarding.Prompts"/>
            <remarks>
                <see langword="null"/> if this property is not mentioned in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.OnboardingInfo.DefaultChannelIds">
            <inheritdoc cref="P:Discord.IGuildOnboarding.DefaultChannelIds"/>
            <remarks>
                <see langword="null"/> if this property is not mentioned in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.OnboardingInfo.IsEnabled">
            <inheritdoc cref="P:Discord.IGuildOnboarding.IsEnabled"/>
            <remarks>
                <see langword="null"/> if this property is not mentioned in this entry.
            </remarks>
        </member>
        <member name="T:Discord.Rest.OnboardingPromptCreatedAuditLogData">
            <summary>
                Contains a piece of audit log data related to an onboarding prompt creation.
            </summary>
        </member>
        <member name="P:Discord.Rest.OnboardingPromptCreatedAuditLogData.Data">
            <summary>
                Gets the onboarding prompt information after the changes.
            </summary>
        </member>
        <member name="P:Discord.Rest.OnboardingPromptInfo.Title">
            <inheritdoc cref="P:Discord.IGuildOnboardingPrompt.Title"/>
            <remarks>
                <see langword="null"/> if this property is not mentioned in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.OnboardingPromptInfo.IsSingleSelect">
            <inheritdoc cref="P:Discord.IGuildOnboardingPrompt.IsSingleSelect"/>
            <remarks>
                <see langword="null"/> if this property is not mentioned in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.OnboardingPromptInfo.IsRequired">
            <inheritdoc cref="P:Discord.IGuildOnboardingPrompt.IsRequired"/>
            <remarks>
                <see langword="null"/> if this property is not mentioned in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.OnboardingPromptInfo.IsInOnboarding">
            <inheritdoc cref="P:Discord.IGuildOnboardingPrompt.IsInOnboarding"/>
            <remarks>
                <see langword="null"/> if this property is not mentioned in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.OnboardingPromptInfo.Type">
            <inheritdoc cref="P:Discord.IGuildOnboardingPrompt.Type"/>
            <remarks>
                <see langword="null"/> if this property is not mentioned in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.OnboardingPromptInfo.Options">
            <inheritdoc cref="P:Discord.IGuildOnboardingPrompt.Options"/>
            <remarks>
                <see langword="null"/> if this property is not mentioned in this entry.
            </remarks>
        </member>
        <member name="T:Discord.Rest.OnboardingPromptUpdatedAuditLogData">
            <summary>
                Contains a piece of audit log data related to an onboarding prompt update.
            </summary>
        </member>
        <member name="P:Discord.Rest.OnboardingPromptUpdatedAuditLogData.After">
            <summary>
                Gets the onboarding prompt information after the changes.
            </summary>
        </member>
        <member name="P:Discord.Rest.OnboardingPromptUpdatedAuditLogData.Before">
            <summary>
                Gets the onboarding prompt information before the changes.
            </summary>
        </member>
        <member name="T:Discord.Rest.OnboardingUpdatedAuditLogData">
            <summary>
                Contains a piece of audit log data related to a guild update.
            </summary>
        </member>
        <member name="P:Discord.Rest.OnboardingUpdatedAuditLogData.After">
            <summary>
                Gets the onboarding information after the changes.
            </summary>
        </member>
        <member name="P:Discord.Rest.OnboardingUpdatedAuditLogData.Before">
            <summary>
                Gets the onboarding information before the changes.
            </summary>
        </member>
        <member name="T:Discord.Rest.OverwriteCreateAuditLogData">
            <summary>
                Contains a piece of audit log data for a permissions overwrite creation.
            </summary>
        </member>
        <member name="P:Discord.Rest.OverwriteCreateAuditLogData.ChannelId">
            <summary>
                Gets the ID of the channel that the overwrite was created from.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier for the channel that the overwrite was
                created from.
            </returns>
        </member>
        <member name="P:Discord.Rest.OverwriteCreateAuditLogData.Overwrite">
            <summary>
                Gets the permission overwrite object that was created.
            </summary>
            <returns>
                An <see cref="P:Discord.Rest.OverwriteCreateAuditLogData.Overwrite"/> object representing the overwrite that was created.
            </returns>
        </member>
        <member name="T:Discord.Rest.OverwriteDeleteAuditLogData">
            <summary>
                Contains a piece of audit log data related to the deletion of a permission overwrite.
            </summary>
        </member>
        <member name="P:Discord.Rest.OverwriteDeleteAuditLogData.ChannelId">
            <summary>
                Gets the ID of the channel that the overwrite was deleted from.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier for the channel that the overwrite was
                deleted from.
            </returns>
        </member>
        <member name="P:Discord.Rest.OverwriteDeleteAuditLogData.Overwrite">
            <summary>
                Gets the permission overwrite object that was deleted.
            </summary>
            <returns>
                An <see cref="P:Discord.Rest.OverwriteDeleteAuditLogData.Overwrite"/> object representing the overwrite that was deleted.
            </returns>
        </member>
        <member name="T:Discord.Rest.OverwriteUpdateAuditLogData">
            <summary>
                Contains a piece of audit log data related to the update of a permission overwrite.
            </summary>
        </member>
        <member name="P:Discord.Rest.OverwriteUpdateAuditLogData.ChannelId">
            <summary>
                Gets the ID of the channel that the overwrite was updated from.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier for the channel that the overwrite was
                updated from.
            </returns>
        </member>
        <member name="P:Discord.Rest.OverwriteUpdateAuditLogData.OldPermissions">
            <summary>
                Gets the overwrite permissions before the changes.
            </summary>
            <returns>
                An overwrite permissions object representing the overwrite permissions that the overwrite had before
                the changes were made.
            </returns>
        </member>
        <member name="P:Discord.Rest.OverwriteUpdateAuditLogData.NewPermissions">
            <summary>
                Gets the overwrite permissions after the changes.
            </summary>
            <returns>
                An overwrite permissions object representing the overwrite permissions that the overwrite had after the
                changes.
            </returns>
        </member>
        <member name="P:Discord.Rest.OverwriteUpdateAuditLogData.OverwriteTargetId">
            <summary>
                Gets the ID of the overwrite that was updated.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier of the overwrite that was updated.
            </returns>
        </member>
        <member name="P:Discord.Rest.OverwriteUpdateAuditLogData.OverwriteType">
            <summary>
                Gets the target of the updated permission overwrite.
            </summary>
            <returns>
                The target of the updated permission overwrite.
            </returns>
        </member>
        <member name="T:Discord.Rest.PruneAuditLogData">
            <summary>
                Contains a piece of audit log data related to a guild prune.
            </summary>
        </member>
        <member name="P:Discord.Rest.PruneAuditLogData.PruneDays">
            <summary>
                Gets the threshold for a guild member to not be kicked.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the amount of days that a member must have been seen in the server,
                to avoid being kicked. (i.e. If a user has not been seen for more than <paramref cref="P:Discord.Rest.PruneAuditLogData.PruneDays"/>, they will be
                kicked from the server)
            </returns>
        </member>
        <member name="P:Discord.Rest.PruneAuditLogData.MembersRemoved">
            <summary>
                Gets the number of members that were kicked during the purge.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the number of members that were removed from this guild for having
                not been seen within <paramref cref="P:Discord.Rest.PruneAuditLogData.PruneDays"/>.
            </returns>
        </member>
        <member name="T:Discord.Rest.RoleCreateAuditLogData">
            <summary>
                Contains a piece of audit log data related to a role creation.
            </summary>
        </member>
        <member name="P:Discord.Rest.RoleCreateAuditLogData.RoleId">
            <summary>
                Gets the ID of the role that was created.
            </summary>
            <return>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier to the role that was created.
            </return>
        </member>
        <member name="P:Discord.Rest.RoleCreateAuditLogData.Properties">
            <summary>
                Gets the role information that was created.
            </summary>
            <return>
                An information object representing the properties of the role that was created.
            </return>
        </member>
        <member name="T:Discord.Rest.RoleDeleteAuditLogData">
            <summary>
                Contains a piece of audit log data relating to a role deletion.
            </summary>
        </member>
        <member name="P:Discord.Rest.RoleDeleteAuditLogData.RoleId">
            <summary>
                Gets the ID of the role that was deleted.
            </summary>
            <return>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier to the role that was deleted.
            </return>
        </member>
        <member name="P:Discord.Rest.RoleDeleteAuditLogData.Properties">
            <summary>
                Gets the role information that was deleted.
            </summary>
            <return>
                An information object representing the properties of the role that was deleted.
            </return>
        </member>
        <member name="T:Discord.Rest.RoleEditInfo">
            <summary>
                Represents information for a role edit.
            </summary>
        </member>
        <member name="P:Discord.Rest.RoleEditInfo.Color">
            <summary>
                Gets the color of this role.
            </summary>
            <returns>
                A color object representing the color assigned to this role; <see langword="null" /> if this role does not have a
                color.
            </returns>
        </member>
        <member name="P:Discord.Rest.RoleEditInfo.Mentionable">
            <summary>
                Gets a value that indicates whether this role is mentionable.
            </summary>
            <returns>
                <see langword="true" /> if other members can mention this role in a text channel; otherwise <see langword="false" />; 
                <see langword="null" /> if this is not mentioned in this entry.
            </returns>
        </member>
        <member name="P:Discord.Rest.RoleEditInfo.Hoist">
            <summary>
                Gets a value that indicates whether this role is hoisted (i.e. its members will appear in a separate
                section on the user list).
            </summary>
            <returns>
                <see langword="true" /> if this role's members will appear in a separate section in the user list; otherwise 
                <see langword="false" />; <see langword="null" /> if this is not mentioned in this entry.
            </returns>
        </member>
        <member name="P:Discord.Rest.RoleEditInfo.Name">
            <summary>
                Gets the name of this role.
            </summary>
            <returns>
               A string containing the name of this role.
            </returns>
        </member>
        <member name="P:Discord.Rest.RoleEditInfo.Permissions">
            <summary>
                Gets the permissions assigned to this role.
            </summary>
            <returns>
                A guild permissions object representing the permissions that have been assigned to this role; <see langword="null" />
                if no permissions have been assigned.
            </returns>
        </member>
        <member name="P:Discord.Rest.RoleEditInfo.IconId">
            <inheritdoc cref="P:Discord.IRole.Icon"/>
            <remarks>
                <see langword="null" /> if the value was not updated in this entry.
            </remarks>
        </member>
        <member name="T:Discord.Rest.RoleUpdateAuditLogData">
            <summary>
                Contains a piece of audit log data related to a role update.
            </summary>
        </member>
        <member name="P:Discord.Rest.RoleUpdateAuditLogData.RoleId">
            <summary>
                Gets the ID of the role that was changed.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier of the role that was changed.
            </returns>
        </member>
        <member name="P:Discord.Rest.RoleUpdateAuditLogData.Before">
            <summary>
                Gets the role information before the changes.
            </summary>
            <returns>
                A role information object containing the role information before the changes were made.
            </returns>
        </member>
        <member name="P:Discord.Rest.RoleUpdateAuditLogData.After">
            <summary>
                Gets the role information after the changes.
            </summary>
            <returns>
                A role information object containing the role information after the changes were made.
            </returns>
        </member>
        <member name="T:Discord.Rest.ScheduledEventCreateAuditLogData">
            <summary>
                Contains a piece of audit log data related to a scheduled event creation.
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventCreateAuditLogData.ScheduledEvent">
            <summary>
                Gets the scheduled event this log corresponds to.
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventCreateAuditLogData.Id">
            <summary>
                Gets the snowflake id of the event.
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventCreateAuditLogData.ChannelId">
            <summary>
                Gets the snowflake id of the channel the event is associated with.
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventCreateAuditLogData.Name">
            <summary>
                Gets name of the event.
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventCreateAuditLogData.Description">
            <summary>
                Gets the description of the event. null if none is set.
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventCreateAuditLogData.ScheduledStartTime">
            <summary>
                Gets the time the event was scheduled for.
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventCreateAuditLogData.ScheduledEndTime">
            <summary>
                Gets the time the event was scheduled to end.
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventCreateAuditLogData.PrivacyLevel">
            <summary>
                Gets the privacy level of the event.
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventCreateAuditLogData.Status">
            <summary>
                Gets the status of the event.
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventCreateAuditLogData.EntityType">
            <summary>
                Gets the type of the entity associated with the event (stage / void / external).
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventCreateAuditLogData.EntityId">
            <summary>
                Gets the snowflake id of the entity associated with the event (stage / void / external).
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventCreateAuditLogData.Location">
            <summary>
                Gets the metadata for the entity associated with the event.
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventCreateAuditLogData.Image">
            <summary>
                Gets the image hash of the image that was attached to the event. Null if not set.
            </summary>
        </member>
        <member name="T:Discord.Rest.ScheduledEventDeleteAuditLogData">
            <summary>
                Contains a piece of audit log data related to a scheduled event deletion.
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventDeleteAuditLogData.Id">
            <summary>
                Gets the snowflake id of the event.
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventDeleteAuditLogData.ChannelId">
            <summary>
                Gets the snowflake id of the channel the event is associated with.
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventDeleteAuditLogData.Name">
            <summary>
                Gets name of the event.
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventDeleteAuditLogData.Description">
            <summary>
                Gets the description of the event. null if none is set.
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventDeleteAuditLogData.ScheduledStartTime">
            <summary>
                Gets the time the event was scheduled for.
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventDeleteAuditLogData.ScheduledEndTime">
            <summary>
                Gets the time the event was scheduled to end.
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventDeleteAuditLogData.PrivacyLevel">
            <summary>
                Gets the privacy level of the event.
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventDeleteAuditLogData.Status">
            <summary>
                Gets the status of the event.
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventDeleteAuditLogData.EntityType">
            <summary>
                Gets the type of the entity associated with the event (stage / void / external).
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventDeleteAuditLogData.EntityId">
            <summary>
                Gets the snowflake id of the entity associated with the event (stage / void / external).
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventDeleteAuditLogData.Location">
            <summary>
                Gets the metadata for the entity associated with the event.
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventDeleteAuditLogData.Image">
            <summary>
                Gets the image hash of the image that was attached to the event. Null if not set.
            </summary>
        </member>
        <member name="T:Discord.Rest.ScheduledEventInfo">
            <summary>
                Represents information for a scheduled event.
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventInfo.ChannelId">
            <summary>
                Gets the snowflake id of the channel the event is associated with.
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventInfo.Name">
            <summary>
                Gets name of the event.
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventInfo.Description">
            <summary>
                Gets the description of the event. null if none is set.
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventInfo.ScheduledStartTime">
            <summary>
                Gets the time the event was scheduled for.
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventInfo.ScheduledEndTime">
            <summary>
                Gets the time the event was scheduled to end.
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventInfo.PrivacyLevel">
            <summary>
                Gets the privacy level of the event.
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventInfo.Status">
            <summary>
                Gets the status of the event.
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventInfo.EntityType">
            <summary>
                Gets the type of the entity associated with the event (stage / void / external).
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventInfo.EntityId">
            <summary>
                Gets the snowflake id of the entity associated with the event (stage / void / external).
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventInfo.Location">
            <summary>
                Gets the metadata for the entity associated with the event.
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventInfo.Image">
            <summary>
                Gets the image hash of the image that was attached to the event. Null if not set.
            </summary>
        </member>
        <member name="T:Discord.Rest.ScheduledEventUpdateAuditLogData">
            <summary>
                Contains a piece of audit log data related to a scheduled event updates.
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventUpdateAuditLogData.ScheduledEvent">
            <summary>
                Gets the scheduled event this log corresponds to.
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventUpdateAuditLogData.Id">
            <summary>
                Gets the snowflake id of the event.
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventUpdateAuditLogData.Before">
            <summary>
                Gets the state before the change.
            </summary>
        </member>
        <member name="P:Discord.Rest.ScheduledEventUpdateAuditLogData.After">
            <summary>
                Gets the state after the change.
            </summary>
        </member>
        <member name="T:Discord.Rest.StageInfo">
            <summary>
                Represents information for a stage.
            </summary>
        </member>
        <member name="P:Discord.Rest.StageInfo.Topic">
            <summary>
                Gets the topic of the stage channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.StageInfo.PrivacyLevel">
            <summary>
                Gets the privacy level of the stage channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.StageInfo.User">
            <summary>
                Gets the user who started the stage channel.
            </summary>
        </member>
        <member name="T:Discord.Rest.StageInstanceCreateAuditLogData">
            <summary>
                Contains a piece of audit log data related to a stage going live.
            </summary>
        </member>
        <member name="P:Discord.Rest.StageInstanceCreateAuditLogData.Topic">
            <summary>
                Gets the topic of the stage channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.StageInstanceCreateAuditLogData.PrivacyLevel">
            <summary>
                Gets the privacy level of the stage channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.StageInstanceCreateAuditLogData.User">
            <summary>
                Gets the user who started the stage channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.StageInstanceCreateAuditLogData.StageChannelId">
            <summary>
                Gets the Id of the stage channel.
            </summary>
        </member>
        <member name="T:Discord.Rest.StageInstanceDeleteAuditLogData">
            <summary>
                Contains a piece of audit log data related to a stage instance deleted.
            </summary>
        </member>
        <member name="P:Discord.Rest.StageInstanceDeleteAuditLogData.Topic">
            <summary>
                Gets the topic of the stage channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.StageInstanceDeleteAuditLogData.PrivacyLevel">
            <summary>
                Gets the privacy level of the stage channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.StageInstanceDeleteAuditLogData.User">
            <summary>
                Gets the user who started the stage channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.StageInstanceDeleteAuditLogData.StageChannelId">
            <summary>
                Gets the Id of the stage channel.
            </summary>
        </member>
        <member name="T:Discord.Rest.StageInstanceUpdatedAuditLogData">
            <summary>
                Contains a piece of audit log data related to a stage instance update.
            </summary>
        </member>
        <member name="P:Discord.Rest.StageInstanceUpdatedAuditLogData.StageChannelId">
            <summary>
                Gets the Id of the stage channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.StageInstanceUpdatedAuditLogData.Before">
            <summary>
                Gets the stage information before the changes.
            </summary>
        </member>
        <member name="P:Discord.Rest.StageInstanceUpdatedAuditLogData.After">
            <summary>
                Gets the stage information after the changes.
            </summary>
        </member>
        <member name="T:Discord.Rest.StickerCreatedAuditLogData">
            <summary>
                Contains a piece of audit log data related to a sticker creation.
            </summary>
        </member>
        <member name="P:Discord.Rest.StickerCreatedAuditLogData.Data">
            <summary>
                Gets the sticker information after the changes.
            </summary>
        </member>
        <member name="T:Discord.Rest.StickerDeletedAuditLogData">
            <summary>
                Contains a piece of audit log data related to a sticker removal.
            </summary>
        </member>
        <member name="P:Discord.Rest.StickerDeletedAuditLogData.Data">
            <summary>
                Gets the sticker information before the changes.
            </summary>
        </member>
        <member name="T:Discord.Rest.StickerInfo">
            <summary>
                Represents information for a guild.
            </summary>
        </member>
        <member name="P:Discord.Rest.StickerInfo.Name">
            <summary>
                Gets the name of the sticker. <see langword="null" /> if the value was not updated in this entry.
            </summary>
        </member>
        <member name="P:Discord.Rest.StickerInfo.Tags">
            <summary>
                Gets tags of the sticker. <see langword="null" /> if the value was not updated in this entry.
            </summary>
        </member>
        <member name="P:Discord.Rest.StickerInfo.Description">
            <summary>
                Gets the description of the sticker. <see langword="null" /> if the value was not updated in this entry.
            </summary>
        </member>
        <member name="T:Discord.Rest.StickerUpdatedAuditLogData">
            <summary>
                Contains a piece of audit log data related to a sticker update.
            </summary>
        </member>
        <member name="P:Discord.Rest.StickerUpdatedAuditLogData.Before">
            <summary>
                Gets the sticker information before the changes.
            </summary>
        </member>
        <member name="P:Discord.Rest.StickerUpdatedAuditLogData.After">
            <summary>
                Gets the sticker information after the changes.
            </summary>
        </member>
        <member name="T:Discord.Rest.ThreadCreateAuditLogData">
            <summary>
                Contains a piece of audit log data related to a thread creation.
            </summary>
        </member>
        <member name="P:Discord.Rest.ThreadCreateAuditLogData.Thread">
            <summary>
                Gets the thread that was created if it still exists.
            </summary>
            <returns>
                A thread object representing the thread that was created if it still exists, otherwise returns <see langword="null" />.
            </returns>
        </member>
        <member name="P:Discord.Rest.ThreadCreateAuditLogData.ThreadId">
            <summary>
                Gets the snowflake ID of the thread.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier for the thread.
            </returns>
        </member>
        <member name="P:Discord.Rest.ThreadCreateAuditLogData.ThreadName">
            <summary>
                Gets the name of the thread.
            </summary>
            <returns>
                A string containing the name of the thread.
            </returns>
        </member>
        <member name="P:Discord.Rest.ThreadCreateAuditLogData.ThreadType">
            <summary>
                Gets the type of the thread.
            </summary>
            <returns>
                The type of thread.
            </returns>
        </member>
        <member name="P:Discord.Rest.ThreadCreateAuditLogData.IsArchived">
            <summary>
                Gets the value that indicates whether the thread is archived.
            </summary>
            <returns>
                <see langword="true" /> if this thread has the Archived flag enabled; otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="P:Discord.Rest.ThreadCreateAuditLogData.AutoArchiveDuration">
            <summary>
                Gets the auto archive duration of the thread.
            </summary>
            <returns>
                The thread auto archive duration of the thread.
            </returns>
        </member>
        <member name="P:Discord.Rest.ThreadCreateAuditLogData.IsLocked">
            <summary>
                Gets the value that indicates whether the thread is locked.
            </summary>
            <returns>
                <see langword="true" /> if this thread has the Locked flag enabled; otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="P:Discord.Rest.ThreadCreateAuditLogData.SlowModeInterval">
            <summary>
                Gets the slow-mode delay of the thread.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the time in seconds required before the user can send another
                message; <c>0</c> if disabled.
                <see langword="null" /> if this is not mentioned in this entry.
            </returns>
        </member>
        <member name="P:Discord.Rest.ThreadCreateAuditLogData.AppliedTags">
            <summary>
                Gets the applied tags of this thread.
            </summary>
            <remarks>
                <see langword="null"/> if the property was not updated.
            </remarks>
        </member>
        <member name="P:Discord.Rest.ThreadCreateAuditLogData.Flags">
            <summary>
                Gets the flags of the thread channel.
            </summary>
            <remarks>
                <see langword="null"/> if the property was not updated.
            </remarks>
        </member>
        <member name="T:Discord.Rest.ThreadDeleteAuditLogData">
            <summary>
                Contains a piece of audit log data related to a thread deletion.
            </summary>
        </member>
        <member name="P:Discord.Rest.ThreadDeleteAuditLogData.ThreadId">
            <summary>
                Gets the snowflake ID of the deleted thread.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier for the deleted thread.
            
            </returns>
        </member>
        <member name="P:Discord.Rest.ThreadDeleteAuditLogData.ThreadName">
            <summary>
                Gets the name of the deleted thread.
            </summary>
            <returns>
                A string containing the name of the deleted thread.
            
            </returns>
        </member>
        <member name="P:Discord.Rest.ThreadDeleteAuditLogData.ThreadType">
            <summary>
                Gets the type of the deleted thread.
            </summary>
            <returns>
                The type of thread that was deleted.
            </returns>
        </member>
        <member name="P:Discord.Rest.ThreadDeleteAuditLogData.IsArchived">
            <summary>
                Gets the value that indicates whether the deleted thread was archived.
            </summary>
            <returns>
                <see langword="true" /> if this thread had the Archived flag enabled; otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="P:Discord.Rest.ThreadDeleteAuditLogData.AutoArchiveDuration">
            <summary>
                Gets the thread auto archive duration of the deleted thread.
            </summary>
            <returns>
                The thread auto archive duration of the thread that was deleted.
            </returns>
        </member>
        <member name="P:Discord.Rest.ThreadDeleteAuditLogData.IsLocked">
            <summary>
                Gets the value that indicates whether the deleted thread was locked.
            </summary>
            <returns>
                <see langword="true" /> if this thread had the Locked flag enabled; otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="P:Discord.Rest.ThreadDeleteAuditLogData.SlowModeInterval">
            <summary>
                Gets the slow-mode delay of the deleted thread.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the time in seconds required before the user can send another
                message; <c>0</c> if disabled.
                <see langword="null" /> if this is not mentioned in this entry.
            </returns>
        </member>
        <member name="P:Discord.Rest.ThreadDeleteAuditLogData.AppliedTags">
            <summary>
                Gets the applied tags of this thread.
            </summary>
            <remarks>
                <see langword="null"/> if this is not mentioned in this entry.
            </remarks>
        </member>
        <member name="P:Discord.Rest.ThreadDeleteAuditLogData.Flags">
            <summary>
                Gets the flags of the thread channel.
            </summary>
            <remarks>
                <see langword="null"/> if this is not mentioned in this entry.
            </remarks>
        </member>
        <member name="T:Discord.Rest.ThreadInfo">
            <summary>
                Represents information for a thread.
            </summary>
        </member>
        <member name="P:Discord.Rest.ThreadInfo.Name">
            <summary>
                Gets the name of the thread.
            </summary>
        </member>
        <member name="P:Discord.Rest.ThreadInfo.IsArchived">
            <summary>
                Gets the value that indicates whether the thread is archived.
            </summary>
            <remarks>
                <see langword="null"/> if the property was not updated.
            </remarks>
        </member>
        <member name="P:Discord.Rest.ThreadInfo.AutoArchiveDuration">
            <summary>
                Gets the auto archive duration of thread.
            </summary>
            <remarks>
                <see langword="null"/> if the property was not updated.
            </remarks>
        </member>
        <member name="P:Discord.Rest.ThreadInfo.IsLocked">
            <summary>
                Gets the value that indicates whether the thread is locked.
            </summary>
            <remarks>
                <see langword="null"/> if the property was not updated.
            </remarks>
        </member>
        <member name="P:Discord.Rest.ThreadInfo.SlowModeInterval">
            <summary>
                Gets the slow-mode delay of the thread.
            </summary>
            <remarks>
                <see langword="null"/> if the property was not updated.
            </remarks>
        </member>
        <member name="P:Discord.Rest.ThreadInfo.AppliedTags">
            <summary>
                Gets the applied tags of this thread.
            </summary>
            <remarks>
                <see langword="null"/> if the property was not updated.
            </remarks>
        </member>
        <member name="P:Discord.Rest.ThreadInfo.Flags">
            <summary>
                Gets the flags of the thread channel.
            </summary>
            <remarks>
                <see langword="null"/> if the property was not updated.
            </remarks>
        </member>
        <member name="P:Discord.Rest.ThreadInfo.Type">
            <summary>
                Gets the type of the thread.
            </summary>
            <remarks>
                <see langword="null"/> if the property was not updated.
            </remarks>
        </member>
        <member name="T:Discord.Rest.ThreadUpdateAuditLogData">
            <summary>
                Contains a piece of audit log data related to a thread update.
            </summary>
        </member>
        <member name="P:Discord.Rest.ThreadUpdateAuditLogData.Thread">
            <summary>
                Gets the thread that was created if it still exists.
            </summary>
            <returns>
                A thread object representing the thread that was created if it still exists, otherwise returns <see langword="null" />.
            </returns>
        </member>
        <member name="P:Discord.Rest.ThreadUpdateAuditLogData.ThreadType">
            <summary>
                Gets the type of the thread.
            </summary>
            <returns>
                The type of thread.
            </returns>
        </member>
        <member name="P:Discord.Rest.ThreadUpdateAuditLogData.Before">
            <summary>
                Gets the thread information before the changes.
            </summary>
            <returns>
                A thread information object representing the thread before the changes were made.
            </returns>
        </member>
        <member name="P:Discord.Rest.ThreadUpdateAuditLogData.After">
            <summary>
                Gets the thread information after the changes.
            </summary>
            <returns>
                A thread information object representing the thread after the changes were made.
            </returns>
        </member>
        <member name="T:Discord.Rest.UnbanAuditLogData">
            <summary>
                Contains a piece of audit log data related to an unban.
            </summary>
        </member>
        <member name="P:Discord.Rest.UnbanAuditLogData.Target">
            <summary>
                Gets the user that was unbanned.
            </summary>
            <returns>
                A user object representing the user that was unbanned.
            </returns>
        </member>
        <member name="T:Discord.Rest.VoiceChannelStatusDeletedAuditLogData">
            <summary>
                Contains a piece of audit log data related to a voice channel status delete.
            </summary>
        </member>
        <member name="P:Discord.Rest.VoiceChannelStatusDeletedAuditLogData.ChannelId">
            <summary>
                Get the id of the channel status was removed in.
            </summary>
        </member>
        <member name="T:Discord.Rest.VoiceChannelStatusUpdateAuditLogData">
            <summary>
                Contains a piece of audit log data related to a voice channel status update.
            </summary>
        </member>
        <member name="P:Discord.Rest.VoiceChannelStatusUpdateAuditLogData.Status">
            <summary>
                Gets the status that was set in the voice channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.VoiceChannelStatusUpdateAuditLogData.ChannelId">
            <summary>
                Get the id of the channel status was updated in.
            </summary>
        </member>
        <member name="T:Discord.Rest.WebhookCreateAuditLogData">
            <summary>
                Contains a piece of audit log data related to a webhook creation.
            </summary>
        </member>
        <member name="P:Discord.Rest.WebhookCreateAuditLogData.Webhook">
            <summary>
                Gets the webhook that was created if it still exists.
            </summary>
            <returns>
                A webhook object representing the webhook that was created if it still exists, otherwise returns <see langword="null" />.
            </returns>
        </member>
        <member name="P:Discord.Rest.WebhookCreateAuditLogData.WebhookId">
            <summary>
                Gets the webhook id.
            </summary>
            <returns>
                The webhook identifier.
            </returns>
        </member>
        <member name="P:Discord.Rest.WebhookCreateAuditLogData.Type">
            <summary>
                Gets the type of webhook that was created.
            </summary>
            <returns>
                The type of webhook that was created.
            </returns>
        </member>
        <member name="P:Discord.Rest.WebhookCreateAuditLogData.Name">
            <summary>
                Gets the name of the webhook.
            </summary>
            <returns>
                A string containing the name of the webhook.
            </returns>
        </member>
        <member name="P:Discord.Rest.WebhookCreateAuditLogData.ChannelId">
            <summary>
                Gets the ID of the channel that the webhook could send to.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier of the channel that the webhook could send
                to.
            </returns>
        </member>
        <member name="P:Discord.Rest.WebhookCreateAuditLogData.Avatar">
            <summary>
                Gets the hash value of the webhook's avatar.
            </summary>
            <returns>
                A string containing the hash of the webhook's avatar.
            </returns>
        </member>
        <member name="T:Discord.Rest.WebhookDeleteAuditLogData">
            <summary>
                Contains a piece of audit log data related to a webhook deletion.
            </summary>
        </member>
        <member name="P:Discord.Rest.WebhookDeleteAuditLogData.WebhookId">
            <summary>
                Gets the ID of the webhook that was deleted.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier of the webhook that was deleted.
            </returns>
        </member>
        <member name="P:Discord.Rest.WebhookDeleteAuditLogData.ChannelId">
            <summary>
                Gets the ID of the channel that the webhook could send to.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier of the channel that the webhook could send
                to.
            </returns>
        </member>
        <member name="P:Discord.Rest.WebhookDeleteAuditLogData.Type">
            <summary>
                Gets the type of the webhook that was deleted.
            </summary>
            <returns>
                The type of webhook that was deleted.
            </returns>
        </member>
        <member name="P:Discord.Rest.WebhookDeleteAuditLogData.Name">
            <summary>
                Gets the name of the webhook that was deleted.
            </summary>
            <returns>
                A string containing the name of the webhook that was deleted.
            </returns>
        </member>
        <member name="P:Discord.Rest.WebhookDeleteAuditLogData.Avatar">
            <summary>
                Gets the hash value of the webhook's avatar.
            </summary>
            <returns>
                A string containing the hash of the webhook's avatar.
            </returns>
        </member>
        <member name="T:Discord.Rest.WebhookInfo">
            <summary>
                Represents information for a webhook.
            </summary>
        </member>
        <member name="P:Discord.Rest.WebhookInfo.Name">
            <summary>
                Gets the name of this webhook.
            </summary>
            <returns>
                A string containing the name of this webhook.
            </returns>
        </member>
        <member name="P:Discord.Rest.WebhookInfo.ChannelId">
            <summary>
                Gets the ID of the channel that this webhook sends to.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier of the channel that this webhook can send
                to.
            </returns>
        </member>
        <member name="P:Discord.Rest.WebhookInfo.Avatar">
            <summary>
                Gets the hash value of this webhook's avatar.
            </summary>
            <returns>
                A string containing the hash of this webhook's avatar.
            </returns>
        </member>
        <member name="T:Discord.Rest.WebhookUpdateAuditLogData">
            <summary>
                Contains a piece of audit log data related to a webhook update.
            </summary>
        </member>
        <member name="P:Discord.Rest.WebhookUpdateAuditLogData.Webhook">
            <summary>
                Gets the webhook that was updated.
            </summary>
            <returns>
                A webhook object representing the webhook that was updated.
            </returns>
        </member>
        <member name="P:Discord.Rest.WebhookUpdateAuditLogData.Before">
            <summary>
                Gets the webhook information before the changes.
            </summary>
            <returns>
                A webhook information object representing the webhook before the changes were made.
            </returns>
        </member>
        <member name="P:Discord.Rest.WebhookUpdateAuditLogData.After">
            <summary>
                Gets the webhook information after the changes.
            </summary>
            <returns>
                A webhook information object representing the webhook after the changes were made.
            </returns>
        </member>
        <member name="T:Discord.Rest.RestAuditLogEntry">
            <summary>
                Represents a REST-based audit log entry.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestAuditLogEntry.CreatedAt">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestAuditLogEntry.Action">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestAuditLogEntry.Data">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestAuditLogEntry.User">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestAuditLogEntry.Reason">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.ChannelHelper.CreateInviteAsync(Discord.IGuildChannel,Discord.Rest.BaseDiscordClient,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentException">
            <paramref name="channel.Id.Id"/> may not be equal to zero.
            -and-
            <paramref name="maxAge"/> and <paramref name="maxUses"/> must be greater than zero.
            -and-
            <paramref name="maxAge"/> must be lesser than 86400.
            </exception>
        </member>
        <member name="M:Discord.Rest.ChannelHelper.CreateInviteToStreamAsync(Discord.IGuildChannel,Discord.Rest.BaseDiscordClient,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.IUser,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentException">
            <paramref name="channel.Id.Id"/> may not be equal to zero.
            -and-
            <paramref name="maxAge"/> and <paramref name="maxUses"/> must be greater than zero.
            -and-
            <paramref name="maxAge"/> must be lesser than 86400.
            </exception>
        </member>
        <member name="M:Discord.Rest.ChannelHelper.CreateInviteToApplicationAsync(Discord.IGuildChannel,Discord.Rest.BaseDiscordClient,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.UInt64,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentException">
            <paramref name="channel.Id.Id"/> may not be equal to zero.
            -and-
            <paramref name="maxAge"/> and <paramref name="maxUses"/> must be greater than zero.
            -and-
            <paramref name="maxAge"/> must be lesser than 86400.
            </exception>
        </member>
        <member name="M:Discord.Rest.ChannelHelper.SendMessageAsync(Discord.IMessageChannel,Discord.Rest.BaseDiscordClient,System.String,System.Boolean,Discord.Embed,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.RequestOptions,Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
            <exception cref="T:System.ArgumentException">The only valid <see cref="T:Discord.MessageFlags"/> are <see cref="F:Discord.MessageFlags.SuppressEmbeds"/> and <see cref="F:Discord.MessageFlags.None"/>.</exception>
        </member>
        <member name="M:Discord.Rest.ChannelHelper.SendFileAsync(Discord.IMessageChannel,Discord.Rest.BaseDiscordClient,System.String,System.String,System.Boolean,Discord.Embed,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.RequestOptions,System.Boolean,Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <exception cref="T:System.ArgumentException">
            <paramref name="filePath" /> is a zero-length string, contains only white space, or contains one or more
            invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filePath" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length. For example, on
            Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260
            characters.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid, (for example, it is on an unmapped drive).
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="filePath" /> specified a directory.-or- The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            The file specified in <paramref name="filePath" /> was not found.
            </exception>
            <exception cref="T:System.NotSupportedException"><paramref name="filePath" /> is in an invalid format.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
            <exception cref="T:System.ArgumentException">The only valid <see cref="T:Discord.MessageFlags"/> are <see cref="F:Discord.MessageFlags.SuppressEmbeds"/>, <see cref="F:Discord.MessageFlags.SuppressNotification"/> and <see cref="F:Discord.MessageFlags.None"/>.</exception>
        </member>
        <member name="M:Discord.Rest.ChannelHelper.SendFileAsync(Discord.IMessageChannel,Discord.Rest.BaseDiscordClient,System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.RequestOptions,System.Boolean,Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
            <exception cref="T:System.ArgumentException">The only valid <see cref="T:Discord.MessageFlags"/> are <see cref="F:Discord.MessageFlags.SuppressEmbeds"/> and <see cref="F:Discord.MessageFlags.None"/>.</exception>
        </member>
        <member name="M:Discord.Rest.ChannelHelper.SendFileAsync(Discord.IMessageChannel,Discord.Rest.BaseDiscordClient,Discord.FileAttachment,System.String,System.Boolean,Discord.Embed,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.RequestOptions,Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
            <exception cref="T:System.ArgumentException">The only valid <see cref="T:Discord.MessageFlags"/> are <see cref="F:Discord.MessageFlags.SuppressEmbeds"/> and <see cref="F:Discord.MessageFlags.None"/>.</exception>
        </member>
        <member name="M:Discord.Rest.ChannelHelper.SendFilesAsync(Discord.IMessageChannel,Discord.Rest.BaseDiscordClient,System.Collections.Generic.IEnumerable{Discord.FileAttachment},System.String,System.Boolean,Discord.Embed,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.RequestOptions,Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <exception cref="T:System.ArgumentException">The only valid <see cref="T:Discord.MessageFlags"/> are <see cref="F:Discord.MessageFlags.SuppressEmbeds"/>, <see cref="F:Discord.MessageFlags.SuppressNotification"/> and <see cref="F:Discord.MessageFlags.None"/>.</exception>
        </member>
        <member name="M:Discord.Rest.ChannelHelper.GetUserAsync(Discord.IGuildChannel,Discord.IGuild,Discord.Rest.BaseDiscordClient,System.UInt64,Discord.RequestOptions)">
            <exception cref="T:System.InvalidOperationException">Resolving permissions requires the parent guild to be downloaded.</exception>
        </member>
        <member name="M:Discord.Rest.ChannelHelper.GetUsersAsync(Discord.IGuildChannel,Discord.IGuild,Discord.Rest.BaseDiscordClient,System.Nullable{System.UInt64},System.Nullable{System.Int32},Discord.RequestOptions)">
            <exception cref="T:System.InvalidOperationException">Resolving permissions requires the parent guild to be downloaded.</exception>
        </member>
        <member name="M:Discord.Rest.ChannelHelper.SyncPermissionsAsync(Discord.INestedChannel,Discord.Rest.BaseDiscordClient,Discord.RequestOptions)">
            <exception cref="T:System.InvalidOperationException">This channel does not have a parent channel.</exception>
        </member>
        <member name="T:Discord.Rest.IRestMessageChannel">
            <summary>
                Represents a REST-based channel that can send and receive messages.
            </summary>
        </member>
        <member name="M:Discord.Rest.IRestMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc cref="M:Discord.IMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)"/>
        </member>
        <member name="M:Discord.Rest.IRestMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc cref="M:Discord.IMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)"/>
        </member>
        <member name="M:Discord.Rest.IRestMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc cref="M:Discord.IMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)"/>
        </member>
        <member name="M:Discord.Rest.IRestMessageChannel.SendFileAsync(Discord.FileAttachment,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc cref="M:Discord.IMessageChannel.SendFileAsync(Discord.FileAttachment,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)"/>
        </member>
        <member name="M:Discord.Rest.IRestMessageChannel.SendFilesAsync(System.Collections.Generic.IEnumerable{Discord.FileAttachment},System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc cref="M:Discord.IMessageChannel.SendFilesAsync(System.Collections.Generic.IEnumerable{Discord.FileAttachment},System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)"/>
        </member>
        <member name="M:Discord.Rest.IRestMessageChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Gets a message from this message channel.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="M:Discord.IMessageChannel.GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="id">The snowflake identifier of the message.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents an asynchronous get operation for retrieving the message. The task result contains
                the retrieved message; <see langword="null" /> if no message is found with the specified identifier.
            </returns>
        </member>
        <member name="M:Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)">
            <summary>
                Gets the last N messages from this message channel.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="M:Discord.IMessageChannel.GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="limit">The numbers of message to be gotten from.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                Paged collection of messages.
            </returns>
        </member>
        <member name="M:Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)">
            <summary>
                Gets a collection of messages in this channel.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="M:Discord.IMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="fromMessageId">The ID of the starting message to get the messages from.</param>
            <param name="dir">The direction of the messages to be gotten from.</param>
            <param name="limit">The numbers of message to be gotten from.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                Paged collection of messages.
            </returns>
        </member>
        <member name="M:Discord.Rest.IRestMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)">
            <summary>
                Gets a collection of messages in this channel.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="M:Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="fromMessage">The starting message to get the messages from.</param>
            <param name="dir">The direction of the messages to be gotten from.</param>
            <param name="limit">The numbers of message to be gotten from.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                Paged collection of messages.
            </returns>
        </member>
        <member name="M:Discord.Rest.IRestMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)">
            <summary>
                Gets a collection of pinned messages in this channel.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="M:Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation for retrieving pinned messages in this channel.
                The task result contains a collection of messages found in the pinned messages.
            </returns>
        </member>
        <member name="T:Discord.Rest.IRestPrivateChannel">
            <summary>
                Represents a REST-based channel that is private to select recipients.
            </summary>
        </member>
        <member name="P:Discord.Rest.IRestPrivateChannel.Recipients">
            <summary>
                Users that can access this channel.
            </summary>
        </member>
        <member name="T:Discord.Rest.RestCategoryChannel">
            <summary>
                Represents a REST-based category channel.
            </summary>
        </member>
        <member name="M:Discord.Rest.RestCategoryChannel.Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">This method is not supported with category channels.</exception>
        </member>
        <member name="M:Discord.Rest.RestCategoryChannel.Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">This method is not supported with category channels.</exception>
        </member>
        <member name="T:Discord.Rest.RestChannel">
            <summary>
                Represents a generic REST-based channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestChannel.CreatedAt">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestChannel.Create(Discord.Rest.BaseDiscordClient,Discord.API.Channel)">
            <exception cref="T:System.InvalidOperationException">Unexpected channel type.</exception>
        </member>
        <member name="M:Discord.Rest.RestChannel.CreatePrivate(Discord.Rest.BaseDiscordClient,Discord.API.Channel)">
            <exception cref="T:System.InvalidOperationException">Unexpected channel type.</exception>
        </member>
        <member name="M:Discord.Rest.RestChannel.UpdateAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestChannel.Discord#IChannel#Name">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestChannel.Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestChannel.Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.RestDMChannel">
            <summary>
                Represents a REST-based direct-message channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestDMChannel.CurrentUser">
            <summary>
                Gets the current logged-in user.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestDMChannel.Recipient">
            <summary>
                Gets the recipient of the channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestDMChannel.Users">
            <summary>
                Gets a collection that is the current logged-in user and the recipient.
            </summary>
        </member>
        <member name="M:Discord.Rest.RestDMChannel.UpdateAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.CloseAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.GetUser(System.UInt64)">
            <summary>
                Gets a user in this channel from the provided <paramref name="id"/>.
            </summary>
            <param name="id">The snowflake identifier of the user.</param>
            <returns>
                A <see cref="T:Discord.Rest.RestUser"/> object that is a recipient of this channel; otherwise <see langword="null" />.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestDMChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.GetPinnedMessagesAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc />
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
            <exception cref="T:System.ArgumentException">The only valid <see cref="T:Discord.MessageFlags"/> are <see cref="F:Discord.MessageFlags.SuppressEmbeds"/> and <see cref="F:Discord.MessageFlags.None"/>.</exception>
        </member>
        <member name="M:Discord.Rest.RestDMChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc />
            <exception cref="T:System.ArgumentException">
            <paramref name="filePath" /> is a zero-length string, contains only white space, or contains one or more
            invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filePath" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length. For example, on
            Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260
            characters.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid, (for example, it is on an unmapped drive).
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="filePath" /> specified a directory.-or- The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            The file specified in <paramref name="filePath" /> was not found.
            </exception>
            <exception cref="T:System.NotSupportedException"><paramref name="filePath" /> is in an invalid format.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
            <exception cref="T:System.ArgumentException">The only valid <see cref="T:Discord.MessageFlags"/> are <see cref="F:Discord.MessageFlags.SuppressEmbeds"/> and <see cref="F:Discord.MessageFlags.None"/>.</exception>
        </member>
        <member name="M:Discord.Rest.RestDMChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc />
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
        </member>
        <member name="M:Discord.Rest.RestDMChannel.SendFileAsync(Discord.FileAttachment,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc />
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
        </member>
        <member name="M:Discord.Rest.RestDMChannel.SendFilesAsync(System.Collections.Generic.IEnumerable{Discord.FileAttachment},System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc />
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
        </member>
        <member name="M:Discord.Rest.RestDMChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.ModifyMessageAsync(System.UInt64,System.Action{Discord.MessageProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.TriggerTypingAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.EnterTypingState(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.ToString">
            <summary>
                Gets a string that represents the Username#Discriminator of the recipient.
            </summary>
            <returns>
                A string that resolves to the Recipient of this channel.
            </returns>
        </member>
        <member name="P:Discord.Rest.RestDMChannel.Discord#IDMChannel#Recipient">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestDMChannel.Discord#Rest#IRestPrivateChannel#Recipients">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestDMChannel.Discord#IPrivateChannel#Recipients">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetPinnedMessagesAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.Discord#IMessageChannel#SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.Discord#IMessageChannel#SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.Discord#IMessageChannel#SendFileAsync(Discord.FileAttachment,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.Discord#IMessageChannel#SendFilesAsync(System.Collections.Generic.IEnumerable{Discord.FileAttachment},System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.Discord#IMessageChannel#SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestDMChannel.Discord#IChannel#Name">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.RestForumChannel">
            <summary>
                Represents a REST-based forum channel in a guild.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestForumChannel.IsNsfw">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestForumChannel.Topic">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestForumChannel.DefaultAutoArchiveDuration">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestForumChannel.Tags">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestForumChannel.ThreadCreationInterval">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestForumChannel.DefaultSlowModeInterval">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestForumChannel.CategoryId">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestForumChannel.DefaultReactionEmoji">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestForumChannel.DefaultSortOrder">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestForumChannel.DefaultLayout">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestForumChannel.Mention">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestForumChannel.ModifyAsync(System.Action{Discord.ForumChannelProperties},Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestForumChannel.CreatePostAsync(System.String,Discord.ThreadArchiveDuration,System.Nullable{System.Int32},System.String,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.ForumTag[])">
            <inheritdoc cref="M:Discord.IForumChannel.CreatePostAsync(System.String,Discord.ThreadArchiveDuration,System.Nullable{System.Int32},System.String,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.ForumTag[])"/>
        </member>
        <member name="M:Discord.Rest.RestForumChannel.CreatePostWithFileAsync(System.String,System.String,Discord.ThreadArchiveDuration,System.Nullable{System.Int32},System.String,Discord.Embed,Discord.RequestOptions,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.ForumTag[])">
            <inheritdoc cref="M:Discord.IForumChannel.CreatePostWithFileAsync(System.String,System.String,Discord.ThreadArchiveDuration,System.Nullable{System.Int32},System.String,Discord.Embed,Discord.RequestOptions,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.ForumTag[])"/>
        </member>
        <member name="M:Discord.Rest.RestForumChannel.CreatePostWithFileAsync(System.String,System.IO.Stream,System.String,Discord.ThreadArchiveDuration,System.Nullable{System.Int32},System.String,Discord.Embed,Discord.RequestOptions,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.ForumTag[])">
            <inheritdoc cref="M:Discord.IForumChannel.CreatePostWithFileAsync(System.String,System.IO.Stream,System.String,Discord.ThreadArchiveDuration,System.Nullable{System.Int32},System.String,Discord.Embed,Discord.RequestOptions,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.ForumTag[])"/>
        </member>
        <member name="M:Discord.Rest.RestForumChannel.CreatePostWithFileAsync(System.String,Discord.FileAttachment,Discord.ThreadArchiveDuration,System.Nullable{System.Int32},System.String,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.ForumTag[])">
            <inheritdoc cref="M:Discord.IForumChannel.CreatePostWithFileAsync(System.String,Discord.FileAttachment,Discord.ThreadArchiveDuration,System.Nullable{System.Int32},System.String,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.ForumTag[])"/>
        </member>
        <member name="M:Discord.Rest.RestForumChannel.CreatePostWithFilesAsync(System.String,System.Collections.Generic.IEnumerable{Discord.FileAttachment},Discord.ThreadArchiveDuration,System.Nullable{System.Int32},System.String,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.ForumTag[])">
            <inheritdoc cref="M:Discord.IForumChannel.CreatePostWithFilesAsync(System.String,System.Collections.Generic.IEnumerable{Discord.FileAttachment},Discord.ThreadArchiveDuration,System.Nullable{System.Int32},System.String,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.ForumTag[])"/>
        </member>
        <member name="M:Discord.Rest.RestForumChannel.GetActiveThreadsAsync(Discord.RequestOptions)">
            <inheritdoc cref="M:Discord.ITextChannel.GetActiveThreadsAsync(Discord.RequestOptions)"/>
        </member>
        <member name="M:Discord.Rest.RestForumChannel.GetJoinedPrivateArchivedThreadsAsync(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Discord.RequestOptions)">
            <inheritdoc cref="M:Discord.IForumChannel.GetJoinedPrivateArchivedThreadsAsync(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Discord.RequestOptions)"/>
        </member>
        <member name="M:Discord.Rest.RestForumChannel.GetPrivateArchivedThreadsAsync(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Discord.RequestOptions)">
            <inheritdoc cref="M:Discord.IForumChannel.GetPrivateArchivedThreadsAsync(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Discord.RequestOptions)"/>
        </member>
        <member name="M:Discord.Rest.RestForumChannel.GetPublicArchivedThreadsAsync(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Discord.RequestOptions)">
            <inheritdoc cref="M:Discord.IForumChannel.GetPublicArchivedThreadsAsync(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Discord.RequestOptions)"/>
        </member>
        <member name="M:Discord.Rest.RestForumChannel.CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)">
            <inheritdoc cref="M:Discord.IIntegrationChannel.CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)"/>
        </member>
        <member name="M:Discord.Rest.RestForumChannel.GetWebhookAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc cref="M:Discord.IIntegrationChannel.GetWebhookAsync(System.UInt64,Discord.RequestOptions)"/>
        </member>
        <member name="M:Discord.Rest.RestForumChannel.GetWebhooksAsync(Discord.RequestOptions)">
            <inheritdoc cref="M:Discord.IIntegrationChannel.GetWebhooksAsync(Discord.RequestOptions)"/>
        </member>
        <member name="M:Discord.Rest.RestForumChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestForumChannel.CreateInviteToApplicationAsync(Discord.DefaultApplications,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestForumChannel.GetInvitesAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestForumChannel.Discord#INestedChannel#GetCategoryAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestForumChannel.SyncPermissionsAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestForumChannel.Discord#IIntegrationChannel#CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestForumChannel.Discord#IIntegrationChannel#GetWebhookAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestForumChannel.Discord#IIntegrationChannel#GetWebhooksAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.RestGroupChannel">
            <summary>
                Represents a REST-based group-message channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestGroupChannel.Name">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGroupChannel.RTCRegion">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.UpdateAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.LeaveAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.GetPinnedMessagesAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.ModifyMessageAsync(System.UInt64,System.Action{Discord.MessageProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc />
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
            <exception cref="T:System.ArgumentException">The only valid <see cref="T:Discord.MessageFlags"/> are <see cref="F:Discord.MessageFlags.SuppressEmbeds"/> and <see cref="F:Discord.MessageFlags.None"/>.</exception>
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc />
            <exception cref="T:System.ArgumentException">
            <paramref name="filePath" /> is a zero-length string, contains only white space, or contains one or more
            invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filePath" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length. For example, on
            Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260
            characters.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid, (for example, it is on an unmapped drive).
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="filePath" /> specified a directory.-or- The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            The file specified in <paramref name="filePath" /> was not found.
            </exception>
            <exception cref="T:System.NotSupportedException"><paramref name="filePath" /> is in an invalid format.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
            <exception cref="T:System.ArgumentException">The only valid <see cref="T:Discord.MessageFlags"/> are <see cref="F:Discord.MessageFlags.SuppressEmbeds"/> and <see cref="F:Discord.MessageFlags.None"/>.</exception>
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc />
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
            <exception cref="T:System.ArgumentException">The only valid <see cref="T:Discord.MessageFlags"/> are <see cref="F:Discord.MessageFlags.SuppressEmbeds"/> and <see cref="F:Discord.MessageFlags.None"/>.</exception>
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.SendFileAsync(Discord.FileAttachment,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc />
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
            <exception cref="T:System.ArgumentException">The only valid <see cref="T:Discord.MessageFlags"/> are <see cref="F:Discord.MessageFlags.SuppressEmbeds"/> and <see cref="F:Discord.MessageFlags.None"/>.</exception>
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.SendFilesAsync(System.Collections.Generic.IEnumerable{Discord.FileAttachment},System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc />
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
            <exception cref="T:System.ArgumentException">The only valid <see cref="T:Discord.MessageFlags"/> are <see cref="F:Discord.MessageFlags.SuppressEmbeds"/> and <see cref="F:Discord.MessageFlags.None"/>.</exception>
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.TriggerTypingAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.EnterTypingState(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.Discord#IMessageChannel#SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.Discord#IMessageChannel#SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.Discord#IMessageChannel#SendFileAsync(Discord.FileAttachment,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.Discord#IMessageChannel#SendFilesAsync(System.Collections.Generic.IEnumerable{Discord.FileAttachment},System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.Discord#IMessageChannel#SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.Discord#IAudioChannel#ConnectAsync(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">Connecting to a group channel is not supported.</exception>
        </member>
        <member name="T:Discord.Rest.RestGuildChannel">
            <summary>
                Represents a private REST-based group channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestGuildChannel.PermissionOverwrites">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildChannel.Name">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildChannel.Position">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildChannel.GuildId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildChannel.Flags">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.UpdateAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.ModifyAsync(System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.DeleteAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IUser)">
            <summary>
                Gets the permission overwrite for a specific user.
            </summary>
            <param name="user">The user to get the overwrite from.</param>
            <returns>
                An overwrite object for the targeted user; <see langword="null" /> if none is set.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IRole)">
            <summary>
                Gets the permission overwrite for a specific role.
            </summary>
            <param name="role">The role to get the overwrite from.</param>
            <returns>
                An overwrite object for the targeted role; <see langword="null" /> if none is set.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)">
            <summary>
                Adds or updates the permission overwrite for the given user.
            </summary>
            <param name="user">The user to add the overwrite to.</param>
            <param name="permissions">The overwrite to add to the user.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task representing the asynchronous permission operation for adding the specified permissions to the channel.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)">
            <summary>
                Adds or updates the permission overwrite for the given role.
            </summary>
            <param name="role">The role to add the overwrite to.</param>
            <param name="permissions">The overwrite to add to the role.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task representing the asynchronous permission operation for adding the specified permissions to the channel.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)">
            <summary>
                Removes the permission overwrite for the given user, if one exists.
            </summary>
            <param name="user">The user to remove the overwrite from.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task representing the asynchronous operation for removing the specified permissions from the channel.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)">
            <summary>
                Removes the permission overwrite for the given role, if one exists.
            </summary>
            <param name="role">The role to remove the overwrite from.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task representing the asynchronous operation for removing the specified permissions from the channel.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.ToString">
            <summary>
                Gets the name of this channel.
            </summary>
            <returns>
                A string that is the name of this channel.
            </returns>
        </member>
        <member name="P:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#Guild">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IRole)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IUser)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.RestNewsChannel">
            <summary>
                Represents a REST-based news channel in a guild that has the same properties as a <see cref="T:Discord.Rest.RestTextChannel"/>.
            </summary>
        </member>
        <member name="M:Discord.Rest.RestNewsChannel.FollowAnnouncementChannelAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.RestStageChannel">
            <summary>
                Represents a REST-based stage channel in a guild.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestStageChannel.IsTextInVoice">
             <inheritdoc/>
             <remarks>
                 This field is always true for stage channels.
             </remarks>
            
        </member>
        <member name="P:Discord.Rest.RestStageChannel.PrivacyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestStageChannel.IsDiscoverableDisabled">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestStageChannel.IsLive">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestStageChannel.ModifyInstanceAsync(System.Action{Discord.StageInstanceProperties},Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestStageChannel.StartStageAsync(System.String,Discord.StagePrivacyLevel,Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestStageChannel.StopStageAsync(Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestStageChannel.UpdateAsync(Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestStageChannel.RequestToSpeakAsync(Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestStageChannel.BecomeSpeakerAsync(Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestStageChannel.StopSpeakingAsync(Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestStageChannel.MoveToSpeakerAsync(Discord.IGuildUser,Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestStageChannel.RemoveFromSpeakerAsync(Discord.IGuildUser,Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestStageChannel.SetStatusAsync(System.String,Discord.RequestOptions)">
            <inheritdoc />
            <remarks>
                Setting voice channel status is not supported in stage channels.
            </remarks>
            <exception cref="T:System.NotSupportedException">Setting voice channel status is not supported in stage channels.</exception>
        </member>
        <member name="T:Discord.Rest.RestTextChannel">
            <summary>
                Represents a REST-based channel in a guild that can send and receive messages.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestTextChannel.Topic">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestTextChannel.SlowModeInterval">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestTextChannel.CategoryId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestTextChannel.Mention">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestTextChannel.IsNsfw">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestTextChannel.DefaultArchiveDuration">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestTextChannel.DefaultSlowModeInterval">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Update(Discord.API.Channel)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.ModifyAsync(System.Action{Discord.TextChannelProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.GetUserAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Gets a user in this channel.
            </summary>
            <param name="id">The snowflake identifier of the user.</param>
            <param name="options">The options to be used when sending the request.</param>
            <exception cref="T:System.InvalidOperationException">
            Resolving permissions requires the parent guild to be downloaded.
            </exception>
            <returns>
                A task representing the asynchronous get operation. The task result contains a guild user object that
                represents the user; <see langword="null" /> if none is found.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestTextChannel.GetUsersAsync(Discord.RequestOptions)">
            <summary>
                Gets a collection of users that are able to view the channel.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <exception cref="T:System.InvalidOperationException">
            Resolving permissions requires the parent guild to be downloaded.
            </exception>
            <returns>
                A paged collection containing a collection of guild users that can access this channel. Flattening the
                paginated response into a collection of users with
                <see cref="M:Discord.AsyncEnumerableExtensions.FlattenAsync``1(System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IEnumerable{``0}})"/> is required if you wish to access the users.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestTextChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.GetPinnedMessagesAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc />
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
            <exception cref="T:System.ArgumentException">The only valid <see cref="T:Discord.MessageFlags"/> are <see cref="F:Discord.MessageFlags.SuppressEmbeds"/>, <see cref="F:Discord.MessageFlags.SuppressNotification"/> and <see cref="F:Discord.MessageFlags.None"/>.</exception>
        </member>
        <member name="M:Discord.Rest.RestTextChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc />
            <exception cref="T:System.ArgumentException">
            <paramref name="filePath" /> is a zero-length string, contains only white space, or contains one or more
            invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filePath" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length. For example, on
            Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260
            characters.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid, (for example, it is on an unmapped drive).
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="filePath" /> specified a directory.-or- The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            The file specified in <paramref name="filePath" /> was not found.
            </exception>
            <exception cref="T:System.NotSupportedException"><paramref name="filePath" /> is in an invalid format.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
            <exception cref="T:System.ArgumentException">The only valid <see cref="T:Discord.MessageFlags"/> are <see cref="F:Discord.MessageFlags.SuppressEmbeds"/>, <see cref="F:Discord.MessageFlags.SuppressNotification"/> and <see cref="F:Discord.MessageFlags.None"/>.</exception>
        </member>
        <member name="M:Discord.Rest.RestTextChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc />
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
            <exception cref="T:System.ArgumentException">The only valid <see cref="T:Discord.MessageFlags"/> are <see cref="F:Discord.MessageFlags.SuppressEmbeds"/>, <see cref="F:Discord.MessageFlags.SuppressNotification"/> and <see cref="F:Discord.MessageFlags.None"/>.</exception>
        </member>
        <member name="M:Discord.Rest.RestTextChannel.SendFileAsync(Discord.FileAttachment,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc />
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
            <exception cref="T:System.ArgumentException">The only valid <see cref="T:Discord.MessageFlags"/> are <see cref="F:Discord.MessageFlags.SuppressEmbeds"/>, <see cref="F:Discord.MessageFlags.SuppressNotification"/> and <see cref="F:Discord.MessageFlags.None"/>.</exception>
        </member>
        <member name="M:Discord.Rest.RestTextChannel.SendFilesAsync(System.Collections.Generic.IEnumerable{Discord.FileAttachment},System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc />
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
            <exception cref="T:System.ArgumentException">The only valid <see cref="T:Discord.MessageFlags"/> are <see cref="F:Discord.MessageFlags.SuppressEmbeds"/>, <see cref="F:Discord.MessageFlags.SuppressNotification"/> and <see cref="F:Discord.MessageFlags.None"/>.</exception>
        </member>
        <member name="M:Discord.Rest.RestTextChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{Discord.IMessage},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{System.UInt64},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.ModifyMessageAsync(System.UInt64,System.Action{Discord.MessageProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.TriggerTypingAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.EnterTypingState(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)">
            <summary>
                Creates a webhook in this text channel.
            </summary>
            <param name="name">The name of the webhook.</param>
            <param name="avatar">The avatar of the webhook.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous creation operation. The task result contains the newly created
                webhook.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestTextChannel.GetWebhookAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Gets a webhook available in this text channel.
            </summary>
            <param name="id">The identifier of the webhook.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a webhook associated
                with the identifier; <see langword="null" /> if the webhook is not found.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestTextChannel.GetWebhooksAsync(Discord.RequestOptions)">
            <summary>
                Gets the webhooks available in this text channel.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection
                of webhooks that is available in this channel.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestTextChannel.CreateThreadAsync(System.String,Discord.ThreadType,Discord.ThreadArchiveDuration,Discord.IMessage,System.Nullable{System.Boolean},System.Nullable{System.Int32},Discord.RequestOptions)">
            <summary>
                Creates a thread within this <see cref="T:Discord.ITextChannel"/>.
            </summary>
            <remarks>
                When <paramref name="message"/> is <see langword="null"/> the thread type will be based off of the
                channel its created in. When called on a <see cref="T:Discord.ITextChannel"/>, it creates a <see cref="F:Discord.ThreadType.PublicThread"/>.
                When called on a <see cref="T:Discord.INewsChannel"/>, it creates a <see cref="F:Discord.ThreadType.NewsThread"/>. The id of the created
                thread will be the same as the id of the message, and as such a message can only have a
                single thread created from it.
            </remarks>
            <param name="name">The name of the thread.</param>
            <param name="type">
                The type of the thread.
                <para>
                    <b>Note: </b>This parameter is not used if the <paramref name="message"/> parameter is not specified.
                </para>
            </param>
            <param name="autoArchiveDuration">
                The duration on which this thread archives after.
            </param>
            <param name="message">The message which to start the thread from.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous create operation. The task result contains a <see cref="T:Discord.IThreadChannel"/>
            </returns>
        </member>
        <member name="M:Discord.Rest.RestTextChannel.GetCategoryAsync(Discord.RequestOptions)">
            <summary>
                Gets the parent (category) channel of this channel.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the category channel
                representing the parent of this channel; <see langword="null" /> if none is set.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestTextChannel.SyncPermissionsAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.GetActiveThreadsAsync(Discord.RequestOptions)">
            <inheritdoc cref="M:Discord.ITextChannel.GetActiveThreadsAsync(Discord.RequestOptions)"/>
        </member>
        <member name="M:Discord.Rest.RestTextChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.CreateInviteToApplicationAsync(Discord.DefaultApplications,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.GetInvitesAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#IIntegrationChannel#CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#IIntegrationChannel#GetWebhookAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#IIntegrationChannel#GetWebhooksAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#ITextChannel#GetActiveThreadsAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetPinnedMessagesAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#IMessageChannel#SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#IMessageChannel#SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#IMessageChannel#SendFileAsync(Discord.FileAttachment,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#IMessageChannel#SendFilesAsync(System.Collections.Generic.IEnumerable{Discord.FileAttachment},System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#IMessageChannel#SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#IGuildChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#IGuildChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#INestedChannel#GetCategoryAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.RestThreadChannel">
            <summary>
                Represents a thread channel received over REST.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestThreadChannel.HasJoined">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestThreadChannel.IsArchived">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestThreadChannel.AutoArchiveDuration">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestThreadChannel.ArchiveTimestamp">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestThreadChannel.IsLocked">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestThreadChannel.MemberCount">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestThreadChannel.MessageCount">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestThreadChannel.IsInvitable">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestThreadChannel.AppliedTags">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestThreadChannel.OwnerId">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestThreadChannel.CreatedAt">
            <inheritdoc cref="P:Discord.IThreadChannel.CreatedAt"/>
        </member>
        <member name="P:Discord.Rest.RestThreadChannel.ParentChannelId">
            <summary>
                Gets the parent text channel id.
            </summary>
        </member>
        <member name="M:Discord.Rest.RestThreadChannel.GetUserAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Gets a user within this thread.
            </summary>
            <param name="userId">The id of the user to fetch.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task representing the asynchronous get operation. The task returns a
                <see cref="T:Discord.Rest.RestThreadUser"/> if found, otherwise <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestThreadChannel.GetThreadUsersAsync(System.Int32,Discord.RequestOptions)">
            <summary>
                Gets a collection of users within this thread.
            </summary>
            <param name="limit">Sets the limit of the user count for each request. 100 by default.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a collection of thread
                users found within this thread channel.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestThreadChannel.GetUsersAsync(Discord.RequestOptions)">
            <summary>
                Gets a collection of users within this thread.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task representing the asynchronous get operation. The task returns a
                <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> of <see cref="T:Discord.Rest.RestThreadUser"/>'s.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestThreadChannel.ModifyAsync(System.Action{Discord.TextChannelProperties},Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestThreadChannel.ModifyAsync(System.Action{Discord.ThreadChannelProperties},Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestThreadChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)">
            <inheritdoc/>
            <remarks>
                <b>This method is not supported in threads.</b>
            </remarks>
        </member>
        <member name="M:Discord.Rest.RestThreadChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)">
            <inheritdoc/>
            <remarks>
                <b>This method is not supported in threads.</b>
            </remarks>
        </member>
        <member name="M:Discord.Rest.RestThreadChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)">
            <inheritdoc/>
            <remarks>
                <b>This method is not supported in threads.</b>
            </remarks>
        </member>
        <member name="M:Discord.Rest.RestThreadChannel.CreateInviteToApplicationAsync(System.UInt64,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)">
            <inheritdoc/>
            <remarks>
                <b>This method is not supported in threads.</b>
            </remarks>
        </member>
        <member name="M:Discord.Rest.RestThreadChannel.CreateInviteToStreamAsync(Discord.IUser,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)">
            <inheritdoc/>
            <remarks>
                <b>This method is not supported in threads.</b>
            </remarks>
        </member>
        <member name="M:Discord.Rest.RestThreadChannel.CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)">
            <inheritdoc/>
            <remarks>
                <b>This method is not supported in threads.</b>
            </remarks>
        </member>
        <member name="M:Discord.Rest.RestThreadChannel.GetCategoryAsync(Discord.RequestOptions)">
            <inheritdoc/>
            <remarks>
                <b>This method is not supported in threads.</b>
            </remarks>
        </member>
        <member name="M:Discord.Rest.RestThreadChannel.GetInvitesAsync(Discord.RequestOptions)">
            <inheritdoc/>
            <remarks>
                <b>This method is not supported in threads.</b>
            </remarks>
        </member>
        <member name="M:Discord.Rest.RestThreadChannel.GetPermissionOverwrite(Discord.IRole)">
            <inheritdoc/>
            <remarks>
                <b>This method is not supported in threads.</b>
            </remarks>
        </member>
        <member name="M:Discord.Rest.RestThreadChannel.GetPermissionOverwrite(Discord.IUser)">
            <inheritdoc/>
            <remarks>
                <b>This method is not supported in threads.</b>
            </remarks>
        </member>
        <member name="M:Discord.Rest.RestThreadChannel.GetWebhookAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc/>
            <remarks>
                <b>This method is not supported in threads.</b>
            </remarks>
        </member>
        <member name="M:Discord.Rest.RestThreadChannel.GetWebhooksAsync(Discord.RequestOptions)">
            <inheritdoc/>
            <remarks>
                <b>This method is not supported in threads.</b>
            </remarks>
        </member>
        <member name="M:Discord.Rest.RestThreadChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)">
            <inheritdoc/>
            <remarks>
                <b>This method is not supported in threads.</b>
            </remarks>
        </member>
        <member name="M:Discord.Rest.RestThreadChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)">
            <inheritdoc/>
            <remarks>
                <b>This method is not supported in threads.</b>
            </remarks>
        </member>
        <member name="P:Discord.Rest.RestThreadChannel.PermissionOverwrites">
            <inheritdoc/>
            <remarks>
                <b>This method is not supported in threads.</b>
            </remarks>
        </member>
        <member name="M:Discord.Rest.RestThreadChannel.JoinAsync(Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestThreadChannel.LeaveAsync(Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestThreadChannel.AddUserAsync(Discord.IGuildUser,Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestThreadChannel.RemoveUserAsync(Discord.IGuildUser,Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestThreadChannel.GetActiveThreadsAsync(Discord.RequestOptions)">
            <inheritdoc/> <exception cref="T:System.NotSupportedException">This method is not supported in threads.</exception>
        </member>
        <member name="T:Discord.Rest.RestVoiceChannel">
            <summary>
                Represents a REST-based voice channel in a guild.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestVoiceChannel.IsTextInVoice">
            <summary>
                Gets whether or not the guild has Text-In-Voice enabled and the voice channel is a TiV channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestVoiceChannel.Bitrate">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestVoiceChannel.UserLimit">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestVoiceChannel.RTCRegion">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestVoiceChannel.VideoQualityMode">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestVoiceChannel.Update(Discord.API.Channel)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestVoiceChannel.ModifyAsync(System.Action{Discord.VoiceChannelProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestVoiceChannel.CreateThreadAsync(System.String,Discord.ThreadType,Discord.ThreadArchiveDuration,Discord.IMessage,System.Nullable{System.Boolean},System.Nullable{System.Int32},Discord.RequestOptions)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Cannot create a thread within a voice channel.</exception>
        </member>
        <member name="M:Discord.Rest.RestVoiceChannel.SetStatusAsync(System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestVoiceChannel.GetActiveThreadsAsync(Discord.RequestOptions)">
            <inheritdoc/> <exception cref="T:System.NotSupportedException">Threads are not supported in voice channels</exception>
        </member>
        <member name="M:Discord.Rest.RestVoiceChannel.Discord#IAudioChannel#ConnectAsync(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">Connecting to a REST-based channel is not supported.</exception>
        </member>
        <member name="M:Discord.Rest.RestVoiceChannel.Discord#IGuildChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestVoiceChannel.Discord#IGuildChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestVoiceChannel.Discord#INestedChannel#GetCategoryAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.GuildHelper.ModifyAsync(Discord.IGuild,Discord.Rest.BaseDiscordClient,System.Action{Discord.GuildProperties},Discord.RequestOptions)">
            <exception cref="T:System.ArgumentNullException"><paramref name="func"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:Discord.Rest.GuildHelper.ModifyWidgetAsync(Discord.IGuild,Discord.Rest.BaseDiscordClient,System.Action{Discord.GuildWidgetProperties},Discord.RequestOptions)">
            <exception cref="T:System.ArgumentNullException"><paramref name="func"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:Discord.Rest.GuildHelper.CreateTextChannelAsync(Discord.IGuild,Discord.Rest.BaseDiscordClient,System.String,Discord.RequestOptions,System.Action{Discord.TextChannelProperties})">
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:Discord.Rest.GuildHelper.CreateNewsChannelAsync(Discord.IGuild,Discord.Rest.BaseDiscordClient,System.String,Discord.RequestOptions,System.Action{Discord.TextChannelProperties})">
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:Discord.Rest.GuildHelper.CreateVoiceChannelAsync(Discord.IGuild,Discord.Rest.BaseDiscordClient,System.String,Discord.RequestOptions,System.Action{Discord.VoiceChannelProperties})">
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:Discord.Rest.GuildHelper.CreateCategoryChannelAsync(Discord.IGuild,Discord.Rest.BaseDiscordClient,System.String,Discord.RequestOptions,System.Action{Discord.GuildChannelProperties})">
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:Discord.Rest.GuildHelper.CreateForumChannelAsync(Discord.IGuild,Discord.Rest.BaseDiscordClient,System.String,Discord.RequestOptions,System.Action{Discord.ForumChannelProperties})">
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:Discord.Rest.GuildHelper.CreateMediaChannelAsync(Discord.IGuild,Discord.Rest.BaseDiscordClient,System.String,Discord.RequestOptions,System.Action{Discord.ForumChannelProperties})">
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:Discord.Rest.GuildHelper.CreateRoleAsync(Discord.IGuild,Discord.Rest.BaseDiscordClient,System.String,System.Nullable{Discord.GuildPermissions},System.Nullable{Discord.Color},System.Boolean,System.Boolean,Discord.RequestOptions,System.Nullable{Discord.Image},Discord.Emoji)">
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:Discord.Rest.GuildHelper.ModifyEmoteAsync(Discord.IGuild,Discord.Rest.BaseDiscordClient,System.UInt64,System.Action{Discord.EmoteProperties},Discord.RequestOptions)">
            <exception cref="T:System.ArgumentNullException"><paramref name="func"/> is <see langword="null" />.</exception>
        </member>
        <member name="T:Discord.Rest.RestGuildOnboarding">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildOnboarding.GuildId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildOnboarding.Guild">
            <inheritdoc cref="P:Discord.IGuildOnboarding.Guild" />
        </member>
        <member name="P:Discord.Rest.RestGuildOnboarding.DefaultChannelIds">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildOnboarding.IsEnabled">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildOnboarding.Mode">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildOnboarding.IsBelowRequirements">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildOnboarding.Prompts">
            <inheritdoc cref="P:Discord.IGuildOnboarding.Prompts"/>
        </member>
        <member name="M:Discord.Rest.RestGuildOnboarding.ModifyAsync(System.Action{Discord.GuildOnboardingProperties},Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestGuildOnboarding.Discord#IGuildOnboarding#Prompts">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildOnboarding.Discord#IGuildOnboarding#Guild">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.RestGuildOnboardingPrompt">
            <inheritdoc cref="T:Discord.IGuildOnboardingPrompt"/>
        </member>
        <member name="P:Discord.Rest.RestGuildOnboardingPrompt.CreatedAt">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildOnboardingPrompt.Options">
            <inheritdoc cref="P:Discord.IGuildOnboardingPrompt.Options"/>
        </member>
        <member name="P:Discord.Rest.RestGuildOnboardingPrompt.Title">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildOnboardingPrompt.IsSingleSelect">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildOnboardingPrompt.IsRequired">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildOnboardingPrompt.IsInOnboarding">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildOnboardingPrompt.Type">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildOnboardingPrompt.Discord#IGuildOnboardingPrompt#Options">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.RestGuildOnboardingPromptOption">
            <inheritdoc cref="T:Discord.IGuildOnboardingPromptOption"/>
        </member>
        <member name="P:Discord.Rest.RestGuildOnboardingPromptOption.CreatedAt">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildOnboardingPromptOption.ChannelIds">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildOnboardingPromptOption.RoleIds">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildOnboardingPromptOption.Emoji">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildOnboardingPromptOption.Title">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildOnboardingPromptOption.Description">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestAutoModRule.CreatedAt">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestAutoModRule.GuildId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestAutoModRule.Name">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestAutoModRule.CreatorId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestAutoModRule.EventType">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestAutoModRule.TriggerType">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestAutoModRule.KeywordFilter">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestAutoModRule.RegexPatterns">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestAutoModRule.AllowList">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestAutoModRule.Presets">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestAutoModRule.MentionTotalLimit">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestAutoModRule.Actions">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestAutoModRule.Enabled">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestAutoModRule.ExemptRoles">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestAutoModRule.ExemptChannels">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestAutoModRule.ModifyAsync(System.Action{Discord.AutoModRuleProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestAutoModRule.DeleteAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.RestBan">
            <summary>
                Represents a REST-based ban object.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestBan.User">
            <summary>
                Gets the banned user.
            </summary>
            <returns>
                A generic <see cref="T:Discord.Rest.RestUser"/> object that was banned.
            </returns>
        </member>
        <member name="P:Discord.Rest.RestBan.Reason">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestBan.ToString">
            <summary>
                Gets the name of the banned user.
            </summary>
            <returns>
                A string containing the name of the user that was banned.
            </returns>
        </member>
        <member name="P:Discord.Rest.RestBan.Discord#IBan#User">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.RestGuild">
            <summary>
                Represents a REST-based guild/server.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestGuild.Name">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.AFKTimeout">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.IsWidgetEnabled">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.VerificationLevel">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.MfaLevel">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.DefaultMessageNotifications">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.ExplicitContentFilter">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.AFKChannelId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.WidgetChannelId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.SafetyAlertsChannelId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.SystemChannelId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.RulesChannelId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.PublicUpdatesChannelId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.OwnerId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.VoiceRegionId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.IconId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.SplashId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.DiscoverySplashId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.ApplicationId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.PremiumTier">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.BannerId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.VanityURLCode">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.SystemChannelFlags">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.Description">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.PremiumSubscriptionCount">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.PreferredLocale">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.MaxPresences">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.MaxMembers">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.MaxVideoChannelUsers">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.MaxStageVideoChannelUsers">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.ApproximateMemberCount">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.ApproximatePresenceCount">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.MaxBitrate">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestGuild.MaxUploadLimit">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestGuild.NsfwLevel">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.IsBoostProgressBarEnabled">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.PreferredCulture">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.Features">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.IncidentsData">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestGuild.InventorySettings">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.CreatedAt">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.IconUrl">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.SplashUrl">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.DiscoverySplashUrl">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.BannerUrl">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.EveryoneRole">
            <summary>
                Gets the built-in role containing all users in this guild.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestGuild.Roles">
            <summary>
                Gets a collection of all roles in this guild.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestGuild.Emotes">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.UpdateAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.UpdateAsync(System.Boolean,Discord.RequestOptions)">
            <summary>
                Updates this object's properties with its current state.
            </summary>
            <param name="withCounts">
                If true, <see cref="P:Discord.Rest.RestGuild.ApproximateMemberCount"/> and <see cref="P:Discord.Rest.RestGuild.ApproximatePresenceCount"/>
                will be updated as well.
            </param>
            <param name="options">The options to be used when sending the request.</param>
            <remarks>
                If <paramref name="withCounts"/> is true, <see cref="P:Discord.Rest.RestGuild.ApproximateMemberCount"/> and
                <see cref="P:Discord.Rest.RestGuild.ApproximatePresenceCount"/> will be updated as well.
            </remarks>
        </member>
        <member name="M:Discord.Rest.RestGuild.DeleteAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.ModifyAsync(System.Action{Discord.GuildProperties},Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException"><paramref name="func"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Discord.Rest.RestGuild.ModifyWidgetAsync(System.Action{Discord.GuildWidgetProperties},Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException"><paramref name="func"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Discord.Rest.RestGuild.ReorderChannelsAsync(System.Collections.Generic.IEnumerable{Discord.ReorderChannelProperties},Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException"><paramref name="args" /> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Discord.Rest.RestGuild.ReorderRolesAsync(System.Collections.Generic.IEnumerable{Discord.ReorderRoleProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.LeaveAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.ModifyIncidentActionsAsync(System.Action{Discord.GuildIncidentsDataProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.DeleteSlashCommandsAsync(Discord.RequestOptions)">
            <summary>
                Deletes all slash commands in the current guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous delete operation.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetSlashCommandsAsync(System.Boolean,System.String,Discord.RequestOptions)">
            <summary>
                Gets a collection of slash commands created by the current user in this guild.
            </summary>
            <param name="withLocalizations">Whether to include full localization dictionaries in the returned objects, instead of the name localized and description localized fields.</param>
            <param name="locale">The target locale of the localized name and description fields. Sets <c>X-Discord-Locale</c> header, which takes precedence over <c>Accept-Language</c>.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection of
                slash commands created by the current user.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetSlashCommandAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Gets a slash command in the current guild.
            </summary>
            <param name="id">The unique identifier of the slash command.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a
                slash command created by the current user.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetBansAsync(System.Int32,Discord.RequestOptions)">
            <inheritdoc cref="M:Discord.IGuild.GetBansAsync(System.Int32,Discord.RequestOptions)" />
        </member>
        <member name="M:Discord.Rest.RestGuild.GetBansAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)">
            <inheritdoc cref="M:Discord.IGuild.GetBansAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)" />
        </member>
        <member name="M:Discord.Rest.RestGuild.GetBansAsync(Discord.IUser,Discord.Direction,System.Int32,Discord.RequestOptions)">
            <inheritdoc cref="M:Discord.IGuild.GetBansAsync(Discord.IUser,Discord.Direction,System.Int32,Discord.RequestOptions)" />
        </member>
        <member name="M:Discord.Rest.RestGuild.GetBanAsync(Discord.IUser,Discord.RequestOptions)">
            <summary>
                Gets a ban object for a banned user.
            </summary>
            <param name="user">The banned user.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a ban object, which
                contains the user information and the reason for the ban; <see langword="null"/> if the ban entry cannot be found.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetBanAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Gets a ban object for a banned user.
            </summary>
            <param name="userId">The snowflake identifier for the banned user.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a ban object, which
                contains the user information and the reason for the ban; <see langword="null"/> if the ban entry cannot be found.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.AddBanAsync(Discord.IUser,System.Int32,System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.AddBanAsync(System.UInt64,System.Int32,System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.BanUserAsync(Discord.IUser,System.UInt32,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.BanUserAsync(System.UInt64,System.UInt32,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.RemoveBanAsync(Discord.IUser,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.RemoveBanAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.BulkBanAsync(System.Collections.Generic.IEnumerable{System.UInt64},System.Nullable{System.Int32},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.GetChannelsAsync(Discord.RequestOptions)">
            <summary>
                Gets a collection of all channels in this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection of
                generic channels found within this guild.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetChannelAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Gets a channel in this guild.
            </summary>
            <param name="id">The snowflake identifier for the channel.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the generic channel
                associated with the specified <paramref name="id"/>; <see langword="null"/> if none is found.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetTextChannelAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Gets a text channel in this guild.
            </summary>
            <param name="id">The snowflake identifier for the text channel.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the text channel
                associated with the specified <paramref name="id"/>; <see langword="null"/> if none is found.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetTextChannelsAsync(Discord.RequestOptions)">
            <summary>
                Gets a collection of all text channels in this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection of
                message channels found within this guild.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetForumChannelAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Gets a forum channel in this guild.
            </summary>
            <param name="id">The snowflake identifier for the forum channel.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the text channel
                associated with the specified <paramref name="id"/>; <see langword="null"/> if none is found.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetForumChannelsAsync(Discord.RequestOptions)">
            <summary>
                Gets a collection of all forum channels in this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection of
                forum channels found within this guild.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetMediaChannelAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Gets a media channel in this guild.
            </summary>
            <param name="id">The snowflake identifier for the text channel.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the media channel
                associated with the specified <paramref name="id"/>; <see langword="null"/> if none is found.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetMediaChannelsAsync(Discord.RequestOptions)">
            <summary>
                Gets a collection of all media channels in this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection of
                media channels found within this guild.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetThreadChannelAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Gets a thread channel in this guild.
            </summary>
            <param name="id">The snowflake identifier for the thread channel.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the thread channel associated
                with the specified <paramref name="id"/>; <see langword="null"/> if none is found.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetThreadChannelsAsync(Discord.RequestOptions)">
            <summary>
                Gets a collection of all thread in this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection of
                threads found within this guild.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetVoiceChannelAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Gets a voice channel in this guild.
            </summary>
            <param name="id">The snowflake identifier for the voice channel.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the voice channel associated
                with the specified <paramref name="id"/>; <see langword="null"/> if none is found.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetVoiceChannelsAsync(Discord.RequestOptions)">
            <summary>
                Gets a collection of all voice channels in this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection of
                voice channels found within this guild.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetStageChannelAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Gets a stage channel in this guild
            </summary>
            <param name="id">The snowflake identifier for the stage channel.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the stage channel associated
                with the specified <paramref name="id"/>; <see langword="null" /> if none is found.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetStageChannelsAsync(Discord.RequestOptions)">
            <summary>
                Gets a collection of all stage channels in this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection of
                stage channels found within this guild.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetCategoryChannelsAsync(Discord.RequestOptions)">
            <summary>
                Gets a collection of all category channels in this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection of
                category channels found within this guild.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetAFKChannelAsync(Discord.RequestOptions)">
            <summary>
                Gets the AFK voice channel in this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the voice channel that the
                AFK users will be moved to after they have idled for too long; <see langword="null"/> if none is set.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetDefaultChannelAsync(Discord.RequestOptions)">
            <summary>
                Gets the first viewable text channel in this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the first viewable text
                channel in this guild; <see langword="null"/> if none is found.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetWidgetChannelAsync(Discord.RequestOptions)">
            <summary>
                Gets the widget channel (i.e. the channel set in the guild's widget settings) in this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the widget channel set
                within the server's widget settings; <see langword="null"/> if none is set.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetSystemChannelAsync(Discord.RequestOptions)">
            <summary>
                Gets the text channel where guild notices such as welcome messages and boost events are posted.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the text channel
                where guild notices such as welcome messages and boost events are post; <see langword="null"/> if none is found.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetRulesChannelAsync(Discord.RequestOptions)">
            <summary>
                Gets the text channel where Community guilds can display rules and/or guidelines.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the text channel
                where Community guilds can display rules and/or guidelines; <see langword="null"/> if none is set.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetPublicUpdatesChannelAsync(Discord.RequestOptions)">
            <summary>
                Gets the text channel where admins and moderators of Community guilds receive notices from Discord.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the text channel where
                admins and moderators of Community guilds receive notices from Discord; <see langword="null"/> if none is set.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.CreateTextChannelAsync(System.String,System.Action{Discord.TextChannelProperties},Discord.RequestOptions)">
            <summary>
                Creates a new text channel in this guild.
            </summary>
            <example>
                The following example creates a new text channel under an existing category named <c>Wumpus</c> with a set topic.
                <code language="cs">
                var categories = await guild.GetCategoriesAsync();
                var targetCategory = categories.FirstOrDefault(x => x.Name == "wumpus");
                if (targetCategory == null) return;
                await Context.Guild.CreateTextChannelAsync(name, x =>
                {
                    x.CategoryId = targetCategory.Id;
                    x.Topic = $"This channel was created at {DateTimeOffset.UtcNow} by {user}.";
                });
                </code>
            </example>
            <param name="name">The new name for the text channel.</param>
            <param name="func">The delegate containing the properties to be applied to the channel upon its creation.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous creation operation. The task result contains the newly created
                text channel.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.CreateNewsChannelAsync(System.String,System.Action{Discord.TextChannelProperties},Discord.RequestOptions)">
            <inheritdoc cref="M:Discord.IGuild.CreateNewsChannelAsync(System.String,System.Action{Discord.TextChannelProperties},Discord.RequestOptions)"/>
        </member>
        <member name="M:Discord.Rest.RestGuild.CreateVoiceChannelAsync(System.String,System.Action{Discord.VoiceChannelProperties},Discord.RequestOptions)">
            <summary>
                Creates a voice channel with the provided name.
            </summary>
            <param name="name">The name of the new channel.</param>
            <param name="func">The delegate containing the properties to be applied to the channel upon its creation.</param>
            <param name="options">The options to be used when sending the request.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> is <see langword="null"/>.</exception>
            <returns>
                The created voice channel.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.CreateStageChannelAsync(System.String,System.Action{Discord.VoiceChannelProperties},Discord.RequestOptions)">
            <summary>
                Creates a new stage channel in this guild.
            </summary>
            <param name="name">The new name for the stage channel.</param>
            <param name="func">The delegate containing the properties to be applied to the channel upon its creation.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous creation operation. The task result contains the newly created
                stage channel.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.CreateCategoryChannelAsync(System.String,System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)">
            <summary>
                Creates a category channel with the provided name.
            </summary>
            <param name="name">The name of the new channel.</param>
            <param name="func">The delegate containing the properties to be applied to the channel upon its creation.</param>
            <param name="options">The options to be used when sending the request.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> is <see langword="null"/>.</exception>
            <returns>
                The created category channel.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.CreateForumChannelAsync(System.String,System.Action{Discord.ForumChannelProperties},Discord.RequestOptions)">
            <summary>
                Creates a new forum channel with the provided name.
            </summary>
            <param name="name">The name of the new channel.</param>
            <param name="func">The delegate containing the properties to be applied to the channel upon its creation.</param>
            <param name="options">The options to be used when sending the request.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> is <see langword="null"/>.</exception>
            <returns>
                The created forum channel.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.CreateMediaChannelAsync(System.String,System.Action{Discord.ForumChannelProperties},Discord.RequestOptions)">
            <summary>
                Creates a new media channel in this guild.
            </summary>
            <param name="name">The new name for the media channel.</param>
            <param name="func">The delegate containing the properties to be applied to the channel upon its creation.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous creation operation. The task result contains the newly created
                media channel.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetVoiceRegionsAsync(Discord.RequestOptions)">
            <summary>
                Gets a collection of all the voice regions this guild can access.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection of
                voice regions the guild can access.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetInvitesAsync(Discord.RequestOptions)">
            <summary>
                Gets a collection of all invites in this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection of
                invite metadata, each representing information for an invite found within this guild.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetVanityInviteAsync(Discord.RequestOptions)">
            <summary>
                Gets the vanity invite URL of this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A partial metadata of the vanity invite found within this guild.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetRole(System.UInt64)">
            <summary>
                Gets a role in this guild.
            </summary>
            <param name="id">The snowflake identifier for the role.</param>
            <returns>
                A role that is associated with the specified <paramref name="id"/>; <see langword="null"/> if none is found.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.CreateRoleAsync(System.String,System.Nullable{Discord.GuildPermissions},System.Nullable{Discord.Color},System.Boolean,System.Boolean,Discord.RequestOptions,System.Nullable{Discord.Image},Discord.Emoji)">
            <summary>
                Creates a new role with the provided name.
            </summary>
            <param name="name">The new name for the role.</param>
            <param name="permissions">The guild permission that the role should possess.</param>
            <param name="color">The color of the role.</param>
            <param name="isHoisted">Whether the role is separated from others on the sidebar.</param>
            <param name="options">The options to be used when sending the request.</param>
            <param name="isMentionable">Whether the role can be mentioned.</param>
            <param name="icon">The icon for the role.</param>
            <param name="emoji">The unicode emoji to be used as an icon for the role.</param>
            <returns>
                A task that represents the asynchronous creation operation. The task result contains the newly created
                role.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetUsersAsync(Discord.RequestOptions)">
            <summary>
                Gets a collection of all users in this guild.
            </summary>
            <remarks>
                This method retrieves all users found within this guild.
            </remarks>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a collection of guild
                users found within this guild.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.AddGuildUserAsync(System.UInt64,System.String,System.Action{Discord.AddGuildUserProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.GetUserAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Gets a user from this guild.
            </summary>
            <remarks>
                This method retrieves a user found within this guild.
            </remarks>
            <param name="id">The snowflake identifier of the user.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the guild user
                associated with the specified <paramref name="id"/>; <see langword="null"/> if none is found.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetCurrentUserAsync(Discord.RequestOptions)">
            <summary>
                Gets the current user for this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the currently logged-in
                user within this guild.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetOwnerAsync(Discord.RequestOptions)">
            <summary>
                Gets the owner of this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the owner of this guild.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.PruneUsersAsync(System.Int32,System.Boolean,Discord.RequestOptions,System.Collections.Generic.IEnumerable{System.UInt64})">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.SearchUsersAsync(System.String,System.Int32,Discord.RequestOptions)">
            <summary>
                Gets a collection of users in this guild that the name or nickname starts with the
                provided <see cref="T:System.String"/> at <paramref name="query"/>.
            </summary>
            <remarks>
                The <paramref name="limit"/> can not be higher than <see cref="F:Discord.DiscordConfig.MaxUsersPerBatch"/>.
            </remarks>
            <param name="query">The partial name or nickname to search.</param>
            <param name="limit">The maximum number of users to be gotten.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a collection of guild
                users that the name or nickname starts with the provided <see cref="T:System.String"/> at <paramref name="query"/>.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.SearchUsersAsyncV2(System.Int32,Discord.MemberSearchPropertiesV2,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.GetAuditLogsAsync(System.Int32,Discord.RequestOptions,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{Discord.ActionType},System.Nullable{System.UInt64})">
            <summary>
                Gets the specified number of audit log entries for this guild.
            </summary>
            <param name="limit">The number of audit log entries to fetch.</param>
            <param name="options">The options to be used when sending the request.</param>
            <param name="beforeId">The audit log entry ID to get entries before.</param>
            <param name="actionType">The type of actions to filter.</param>
            <param name="userId">The user ID to filter entries for.</param>
            <param name="afterId">The audit log entry ID to get entries after.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection
                of the requested audit log entries.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetWebhookAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Gets a webhook found within this guild.
            </summary>
            <param name="id">The identifier for the webhook.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the webhook with the
                specified <paramref name="id"/>; <see langword="null"/> if none is found.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetWebhooksAsync(Discord.RequestOptions)">
            <summary>
                Gets a collection of all webhook from this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection
                of webhooks found within the guild.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetApplicationCommandsAsync(System.Boolean,System.String,Discord.RequestOptions)">
            <summary>
                Gets this guilds slash commands
            </summary>
            <param name="withLocalizations">Whether to include full localization dictionaries in the returned objects, instead of the name localized and description localized fields.</param>
            <param name="locale">The target locale of the localized name and description fields. Sets <c>X-Discord-Locale</c> header, which takes precedence over <c>Accept-Language</c>.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection
                of application commands found within the guild.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetApplicationCommandAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Gets an application command within this guild with the specified id.
            </summary>
            <param name="id">The id of the application command to get.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A ValueTask that represents the asynchronous get operation. The task result contains a <see cref="T:Discord.IApplicationCommand"/>
                if found, otherwise <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.CreateApplicationCommandAsync(Discord.ApplicationCommandProperties,Discord.RequestOptions)">
            <summary>
                Creates an application command within this guild.
            </summary>
            <param name="properties">The properties to use when creating the command.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous creation operation. The task result contains the command that was created.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.BulkOverwriteApplicationCommandsAsync(Discord.ApplicationCommandProperties[],Discord.RequestOptions)">
            <summary>
                Overwrites the application commands within this guild.
            </summary>
            <param name="properties">A collection of properties to use when creating the commands.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous creation operation. The task result contains a collection of commands that was created.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.ToString">
            <summary>
                Returns the name of the guild.
            </summary>
            <returns>
                The name of the guild.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetEmotesAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.GetEmoteAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.CreateEmoteAsync(System.String,Discord.Image,Discord.Optional{System.Collections.Generic.IEnumerable{Discord.IRole}},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.ModifyEmoteAsync(Discord.GuildEmote,System.Action{Discord.EmoteProperties},Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException"><paramref name="func"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Discord.Rest.RestGuild.MoveAsync(Discord.IGuildUser,Discord.IVoiceChannel)">
            <summary>
            Moves the user to the voice channel.
            </summary>
            <param name="user">The user to move.</param>
            <param name="targetChannel">the channel where the user gets moved to.</param>
            <returns>A task that represents the asynchronous operation for moving a user.</returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.DeleteEmoteAsync(Discord.GuildEmote,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.CreateStickerAsync(System.String,Discord.Image,System.Collections.Generic.IEnumerable{System.String},System.String,Discord.RequestOptions)">
            <summary>
                Creates a new sticker in this guild.
            </summary>
            <param name="name">The name of the sticker.</param>
            <param name="description">The description of the sticker.</param>
            <param name="tags">The tags of the sticker.</param>
            <param name="image">The image of the new emote.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous creation operation. The task result contains the created sticker.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.CreateStickerAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,Discord.RequestOptions)">
            <summary>
                Creates a new sticker in this guild
            </summary>
            <param name="name">The name of the sticker.</param>
            <param name="description">The description of the sticker.</param>
            <param name="tags">The tags of the sticker.</param>
            <param name="path">The path of the file to upload.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous creation operation. The task result contains the created sticker.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.CreateStickerAsync(System.String,System.IO.Stream,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,Discord.RequestOptions)">
            <summary>
                Creates a new sticker in this guild
            </summary>
            <param name="name">The name of the sticker.</param>
            <param name="description">The description of the sticker.</param>
            <param name="tags">The tags of the sticker.</param>
            <param name="stream">The stream containing the file data.</param>
            <param name="filename">The name of the file <b>with</b> the extension, ex: image.png.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous creation operation. The task result contains the created sticker.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetStickerAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Gets a specific sticker within this guild.
            </summary>
            <param name="id">The id of the sticker to get.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the sticker found with the
                specified <paramref name="id"/>; <see langword="null" /> if none is found.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetStickersAsync(Discord.RequestOptions)">
            <summary>
                Gets a collection of all stickers within this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection
                of stickers found within the guild.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.DeleteStickerAsync(Discord.Rest.CustomSticker,Discord.RequestOptions)">
            <summary>
                Deletes a sticker within this guild.
            </summary>
            <param name="sticker">The sticker to delete.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous removal operation.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetEventAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Gets an event within this guild.
            </summary>
            <param name="id">The snowflake identifier for the event.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetEventsAsync(Discord.RequestOptions)">
            <summary>
                Gets all active events within this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.CreateEventAsync(System.String,System.DateTimeOffset,Discord.GuildScheduledEventType,Discord.GuildScheduledEventPrivacyLevel,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.UInt64},System.String,System.Nullable{Discord.Image},Discord.RequestOptions)">
            <summary>
                Creates an event within this guild.
            </summary>
            <param name="name">The name of the event.</param>
            <param name="privacyLevel">The privacy level of the event.</param>
            <param name="startTime">The start time of the event.</param>
            <param name="type">The type of the event.</param>
            <param name="description">The description of the event.</param>
            <param name="endTime">The end time of the event.</param>
            <param name="channelId">
                The channel id of the event.
                <remarks>
                The event must have a type of <see cref="F:Discord.GuildScheduledEventType.Stage"/> or <see cref="F:Discord.GuildScheduledEventType.Voice"/>
                in order to use this property.
                </remarks>
            </param>
            <param name="location">The location of the event; links are supported</param>
            <param name="coverImage">The optional banner image for the event.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous create operation.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetAutoModRuleAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc cref="M:Discord.IGuild.GetAutoModRuleAsync(System.UInt64,Discord.RequestOptions)"/>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetAutoModRulesAsync(Discord.RequestOptions)">
            <inheritdoc cref="M:Discord.IGuild.GetAutoModRulesAsync(Discord.RequestOptions)"/>
        </member>
        <member name="M:Discord.Rest.RestGuild.CreateAutoModRuleAsync(System.Action{Discord.AutoModRuleProperties},Discord.RequestOptions)">
            <inheritdoc cref="M:Discord.IGuild.CreateAutoModRuleAsync(System.Action{Discord.AutoModRuleProperties},Discord.RequestOptions)"/>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetOnboardingAsync(Discord.RequestOptions)">
            <inheritdoc cref="M:Discord.IGuild.GetOnboardingAsync(Discord.RequestOptions)"/>
        </member>
        <member name="M:Discord.Rest.RestGuild.ModifyOnboardingAsync(System.Action{Discord.GuildOnboardingProperties},Discord.RequestOptions)">
            <inheritdoc cref="M:Discord.IGuild.ModifyOnboardingAsync(System.Action{Discord.GuildOnboardingProperties},Discord.RequestOptions)"/>
        </member>
        <member name="P:Discord.Rest.RestGuild.Discord#IGuild#Available">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.Discord#IGuild#AudioClient">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.Discord#IGuild#EveryoneRole">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.Discord#IGuild#Roles">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#CreateEventAsync(System.String,System.DateTimeOffset,Discord.GuildScheduledEventType,Discord.GuildScheduledEventPrivacyLevel,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.UInt64},System.String,System.Nullable{Discord.Image},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetEventAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetEventsAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetBansAsync(System.Int32,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetBansAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetBansAsync(Discord.IUser,Discord.Direction,System.Int32,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetBanAsync(Discord.IUser,Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetBanAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetChannelsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetTextChannelsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetTextChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetForumChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetForumChannelsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetMediaChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetMediaChannelsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetThreadChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetThreadChannelsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetVoiceChannelsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetCategoriesAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetStageChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetStageChannelsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetVoiceChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetAFKChannelAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetDefaultChannelAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetWidgetChannelAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetSystemChannelAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetRulesChannelAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetPublicUpdatesChannelAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#CreateTextChannelAsync(System.String,System.Action{Discord.TextChannelProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#CreateNewsChannelAsync(System.String,System.Action{Discord.TextChannelProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#CreateVoiceChannelAsync(System.String,System.Action{Discord.VoiceChannelProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#CreateStageChannelAsync(System.String,System.Action{Discord.VoiceChannelProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#CreateCategoryAsync(System.String,System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#CreateForumChannelAsync(System.String,System.Action{Discord.ForumChannelProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#CreateMediaChannelAsync(System.String,System.Action{Discord.ForumChannelProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetVoiceRegionsAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetIntegrationsAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#DeleteIntegrationAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetInvitesAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetVanityInviteAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetRole(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#CreateRoleAsync(System.String,System.Nullable{Discord.GuildPermissions},System.Nullable{Discord.Color},System.Boolean,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#CreateRoleAsync(System.String,System.Nullable{Discord.GuildPermissions},System.Nullable{Discord.Color},System.Boolean,System.Boolean,Discord.RequestOptions,System.Nullable{Discord.Image},Discord.Emoji)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#AddGuildUserAsync(System.UInt64,System.String,System.Action{Discord.AddGuildUserProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#DisconnectAsync(Discord.IGuildUser)">
            <summary>
            Disconnects the user from its current voice channel
            </summary>
            <param name="user">The user to disconnect.</param>
            <returns>A task that represents the asynchronous operation for disconnecting a user.</returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetCurrentUserAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetOwnerAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#DownloadUsersAsync">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">Downloading users is not supported for a REST-based guild.</exception>
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#SearchUsersAsync(System.String,System.Int32,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetWebhookAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetWebhooksAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetApplicationCommandsAsync(System.Boolean,System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#CreateStickerAsync(System.String,Discord.Image,System.Collections.Generic.IEnumerable{System.String},System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#CreateStickerAsync(System.String,System.IO.Stream,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#CreateStickerAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetStickerAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetStickersAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#DeleteStickerAsync(Discord.ICustomSticker,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#CreateApplicationCommandAsync(Discord.ApplicationCommandProperties,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#BulkOverwriteApplicationCommandsAsync(Discord.ApplicationCommandProperties[],Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetApplicationCommandAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.GetWelcomeScreenAsync(Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestGuild.ModifyWelcomeScreenAsync(System.Boolean,Discord.WelcomeScreenChannelProperties[],System.String,Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetAutoModRuleAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetAutoModRulesAsync(Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#CreateAutoModRuleAsync(System.Action{Discord.AutoModRuleProperties},Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetOnboardingAsync(Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#ModifyOnboardingAsync(System.Action{Discord.GuildOnboardingProperties},Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestGuildEvent.Guild">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestGuildEvent.GuildId">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestGuildEvent.ChannelId">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestGuildEvent.Creator">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestGuildEvent.CreatorId">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestGuildEvent.Name">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestGuildEvent.Description">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestGuildEvent.CoverImageId">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestGuildEvent.StartTime">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestGuildEvent.EndTime">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestGuildEvent.PrivacyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestGuildEvent.Status">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestGuildEvent.Type">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestGuildEvent.EntityId">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestGuildEvent.Location">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestGuildEvent.UserCount">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestGuildEvent.GetCoverImageUrl(Discord.ImageFormat,System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestGuildEvent.StartAsync(Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestGuildEvent.EndAsync(Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestGuildEvent.DeleteAsync(Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestGuildEvent.ModifyAsync(System.Action{Discord.GuildScheduledEventsProperties},Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestGuildEvent.GetUsersAsync(Discord.RequestOptions)">
            <summary>
                Gets a collection of N users interested in the event.
            </summary>
            <remarks>
                <note type="important">
                    The returned collection is an asynchronous enumerable object; one must call 
                    <see cref="M:Discord.AsyncEnumerableExtensions.FlattenAsync``1(System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IEnumerable{``0}})"/> to access the individual messages as a
                    collection.
                </note>
                This method will attempt to fetch all users that are interested in the event.
                The library will attempt to split up the requests according to and <see cref="F:Discord.DiscordConfig.MaxGuildEventUsersPerBatch"/>.
                In other words, if there are 300 users, and the <see cref="F:Discord.DiscordConfig.MaxGuildEventUsersPerBatch"/> constant
                is <c>100</c>, the request will be split into 3 individual requests; thus returning 3 individual asynchronous
                responses, hence the need of flattening.
            </remarks>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                Paged collection of users.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuildEvent.GetUsersAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)">
            <summary>
                Gets a collection of N users interested in the event.
            </summary>
            <remarks>
                <note type="important">
                    The returned collection is an asynchronous enumerable object; one must call 
                    <see cref="M:Discord.AsyncEnumerableExtensions.FlattenAsync``1(System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IEnumerable{``0}})"/> to access the individual users as a
                    collection.
                </note>
                <note type="warning">
                    Do not fetch too many users at once! This may cause unwanted preemptive rate limit or even actual
                    rate limit, causing your bot to freeze!
                </note>
                This method will attempt to fetch the number of users specified under <paramref name="limit"/> around
                the user <paramref name="fromUserId"/> depending on the <paramref name="dir"/>. The library will
                attempt to split up the requests according to your <paramref name="limit"/> and 
                <see cref="F:Discord.DiscordConfig.MaxGuildEventUsersPerBatch"/>. In other words, should the user request 500 users,
                and the <see cref="F:Discord.DiscordConfig.MaxGuildEventUsersPerBatch"/> constant is <c>100</c>, the request will
                be split into 5 individual requests; thus returning 5 individual asynchronous responses, hence the need
                of flattening.
            </remarks>
            <param name="fromUserId">The ID of the starting user to get the users from.</param>
            <param name="dir">The direction of the users to be gotten from.</param>
            <param name="limit">The numbers of users to be gotten from.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                Paged collection of users.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuildEvent.Discord#IGuildScheduledEvent#GetUsersAsync(Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestGuildEvent.Discord#IGuildScheduledEvent#GetUsersAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestUserGuild.Name">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserGuild.IsOwner">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserGuild.Permissions">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserGuild.CreatedAt">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserGuild.IconUrl">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserGuild.Features">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserGuild.ApproximateMemberCount">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserGuild.ApproximatePresenceCount">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestUserGuild.DeleteAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.RestVoiceRegion">
            <summary>
                Represents a REST-based voice region.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestVoiceRegion.Name">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestVoiceRegion.IsVip">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestVoiceRegion.IsOptimal">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestVoiceRegion.IsDeprecated">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestVoiceRegion.IsCustom">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.RestIntegration">
            <summary>
                Represents a Rest-based implementation of <see cref="T:Discord.IIntegration"/>.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestIntegration.Name">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestIntegration.Type">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestIntegration.IsEnabled">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestIntegration.IsSyncing">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestIntegration.RoleId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestIntegration.HasEnabledEmoticons">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestIntegration.ExpireBehavior">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestIntegration.ExpireGracePeriod">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestIntegration.Discord#IIntegration#User">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestIntegration.Account">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestIntegration.SyncedAt">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestIntegration.SubscriberCount">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestIntegration.IsRevoked">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestIntegration.Application">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestIntegration.GuildId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestIntegration.Discord#IIntegration#Guild">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.RestIntegrationAccount">
            <summary>
                Represents a Rest-based implementation of <see cref="T:Discord.IIntegrationAccount"/>.
            </summary>
        </member>
        <member name="T:Discord.Rest.RestIntegrationApplication">
            <summary>
                Represents a Rest-based implementation of <see cref="T:Discord.IIntegrationApplication"/>.
            </summary>
        </member>
        <member name="T:Discord.Rest.RestCommandBase">
            <summary>
                Represents a REST-based base command interaction.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestCommandBase.CommandName">
            <summary>
                Gets the name of the invoked command.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestCommandBase.CommandId">
            <summary>
                Gets the id of the invoked command.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestCommandBase.Data">
            <summary>
                Gets the data associated with this interaction.
            </summary>
        </member>
        <member name="M:Discord.Rest.RestCommandBase.Respond(System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <summary>
                Responds to an Interaction with type <see cref="F:Discord.InteractionResponseType.ChannelMessageWithSource"/>.
            </summary>
            <param name="text">The text of the message to be sent.</param>
            <param name="embeds">A array of embeds to send with this response. Max 10.</param>
            <param name="isTTS"><see langword="true"/> if the message should be read out by a text-to-speech reader, otherwise <see langword="false"/>.</param>
            <param name="ephemeral"><see langword="true"/> if the response should be hidden to everyone besides the invoker of the command, otherwise <see langword="false"/>.</param>
            <param name="allowedMentions">The allowed mentions for this response.</param>
            <param name="options">The request options for this response.</param>
            <param name="components">A <see cref="T:Discord.MessageComponent"/> to be sent with this response.</param>
            <param name="embed">A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored.</param>
            <param name="poll">A poll to send with the message.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The parameters provided were invalid or the token was invalid.</exception>
            <returns>
                A string that contains json to write back to the incoming http request.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestCommandBase.FollowupAsync(System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestCommandBase.FollowupWithFileAsync(System.IO.Stream,System.String,System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestCommandBase.FollowupWithFileAsync(System.String,System.String,System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestCommandBase.FollowupWithFileAsync(Discord.FileAttachment,System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestCommandBase.FollowupWithFilesAsync(System.Collections.Generic.IEnumerable{Discord.FileAttachment},System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestCommandBase.Defer(System.Boolean,Discord.RequestOptions)">
            <summary>
                Acknowledges this interaction with the <see cref="F:Discord.InteractionResponseType.DeferredChannelMessageWithSource"/>.
            </summary>
            <returns>
                A string that contains json to write back to the incoming http request.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestCommandBase.RespondWithModal(Discord.Modal,Discord.RequestOptions)">
            <summary>
                Responds to the interaction with a modal.
            </summary>
            <param name="modal">The modal to respond with.</param>
            <param name="options">The request options for this <see langword="async"/> request.</param>
            <returns>A string that contains json to write back to the incoming http request.</returns>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Discord.Rest.RestCommandBaseData`1">
            <summary>
                Represents the base data tied with the <see cref="T:Discord.Rest.RestCommandBase"/> interaction.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestCommandBaseData`1.Name">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestCommandBaseData`1.Options">
            <summary>
                Gets a collection of <typeparamref name="TOption"/> received with this interaction.
            </summary>
        </member>
        <member name="T:Discord.Rest.RestCommandBaseData">
            <summary>
                Represents the base data tied with the <see cref="T:Discord.Rest.RestCommandBase"/> interaction.
            </summary>
        </member>
        <member name="T:Discord.Rest.RestMessageCommand">
            <summary>
                Represents a REST-based message command interaction.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestMessageCommand.Data">
            <summary>
                Gets the data associated with this interaction.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestMessageCommand.Discord#IMessageCommandInteraction#Data">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestMessageCommand.Discord#IApplicationCommandInteraction#Data">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Rest.RestMessageCommandData">
            <summary>
                Represents the data for a <see cref="T:Discord.Rest.RestMessageCommand"/>.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestMessageCommandData.Message">
            <summary>
                Gets the message associated with this message command.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestMessageCommandData.Options">
            <inheritdoc/>
            <remarks>
                <b>Note</b> Not implemented for <see cref="T:Discord.Rest.RestMessageCommandData"/>
            </remarks>
        </member>
        <member name="P:Discord.Rest.RestMessageCommandData.Discord#IMessageCommandInteractionData#Message">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Rest.RestUserCommand">
            <summary>
                Represents a REST-based user command.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestUserCommand.Data">
            <summary>
                Gets the data associated with this interaction.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestUserCommand.Discord#IUserCommandInteraction#Data">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestUserCommand.Discord#IApplicationCommandInteraction#Data">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Rest.RestUserCommandData">
            <summary>
                Represents the data for a <see cref="T:Discord.Rest.RestUserCommand"/>.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestUserCommandData.Member">
            <summary>
                Gets the user who this command targets.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestUserCommandData.Options">
            <inheritdoc/>
            <remarks>
                <b>Note</b> Not implemented for <see cref="T:Discord.Rest.RestUserCommandData"/>
            </remarks>
        </member>
        <member name="P:Discord.Rest.RestUserCommandData.Discord#IUserCommandInteractionData#User">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Rest.InteractionProperties">
            <summary>
                Represents a class that contains data present in all interactions to evaluate against at rest-interaction creation.
            </summary>
        </member>
        <member name="P:Discord.Rest.InteractionProperties.Type">
            <summary>
                The type of this interaction.
            </summary>
        </member>
        <member name="P:Discord.Rest.InteractionProperties.CommandType">
            <summary>
                Gets the type of application command this interaction represents.
            </summary>
            <remarks>
                This will be <see langword="null"/> if the <see cref="P:Discord.Rest.InteractionProperties.Type"/> is not <see cref="F:Discord.InteractionType.ApplicationCommand"/>.
            </remarks>
        </member>
        <member name="P:Discord.Rest.InteractionProperties.Name">
            <summary>
                Gets the name of the interaction.
            </summary>
            <remarks>
                This will be <see cref="F:System.String.Empty"/> if the <see cref="P:Discord.Rest.InteractionProperties.Type"/> is not <see cref="F:Discord.InteractionType.ApplicationCommand"/>.
            </remarks>
        </member>
        <member name="P:Discord.Rest.InteractionProperties.CustomId">
            <summary>
                Gets the custom ID of the interaction.
            </summary>
            <remarks>
                This will be <see cref="F:System.String.Empty"/> if the <see cref="P:Discord.Rest.InteractionProperties.Type"/> is not <see cref="F:Discord.InteractionType.MessageComponent"/> or <see cref="F:Discord.InteractionType.ModalSubmit"/>.
            </remarks>
        </member>
        <member name="P:Discord.Rest.InteractionProperties.GuildId">
            <summary>
                Gets the guild ID of the interaction.
            </summary>
            <remarks>
                This will be <see langword="null"/> if this interaction was not executed in a guild.
            </remarks>
        </member>
        <member name="P:Discord.Rest.InteractionProperties.ChannelId">
            <summary>
                Gets the channel ID of the interaction.
            </summary>
            <remarks>
                This will be <see langword="null"/> if this interaction is <see cref="F:Discord.InteractionType.Ping"/>.
            </remarks>
        </member>
        <member name="T:Discord.Rest.RestMessageComponent">
            <summary>
                Represents a REST-based message component.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestMessageComponent.Data">
            <summary>
                Gets the data received with this interaction, contains the button that was clicked.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestMessageComponent.Message">
            <inheritdoc cref="P:Discord.IComponentInteraction.Message"/>
        </member>
        <member name="M:Discord.Rest.RestMessageComponent.Respond(System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <summary>
                Responds to an Interaction with type <see cref="F:Discord.InteractionResponseType.ChannelMessageWithSource"/>.
            </summary>
            <param name="text">The text of the message to be sent.</param>
            <param name="embeds">A array of embeds to send with this response. Max 10.</param>
            <param name="isTTS"><see langword="true"/> if the message should be read out by a text-to-speech reader, otherwise <see langword="false"/>.</param>
            <param name="ephemeral"><see langword="true"/> if the response should be hidden to everyone besides the invoker of the command, otherwise <see langword="false"/>.</param>
            <param name="allowedMentions">The allowed mentions for this response.</param>
            <param name="components">A <see cref="T:Discord.MessageComponent"/> to be sent with this response.</param>
            <param name="embed">A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored.</param>
            <param name="options">The request options for this response.</param>
            <returns>
                A string that contains json to write back to the incoming http request.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestMessageComponent.UpdateAsync(System.Action{Discord.MessageProperties},Discord.RequestOptions)">
            <summary>
                Updates the message which this component resides in with the type <see cref="F:Discord.InteractionResponseType.UpdateMessage"/>
            </summary>
            <param name="func">A delegate containing the properties to modify the message with.</param>
            <param name="options">The request options for this <see langword="async"/> request.</param>
        </member>
        <member name="M:Discord.Rest.RestMessageComponent.FollowupAsync(System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestMessageComponent.FollowupWithFileAsync(System.IO.Stream,System.String,System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestMessageComponent.FollowupWithFileAsync(System.String,System.String,System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestMessageComponent.FollowupWithFileAsync(Discord.FileAttachment,System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestMessageComponent.FollowupWithFilesAsync(System.Collections.Generic.IEnumerable{Discord.FileAttachment},System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestMessageComponent.DeferLoading(System.Boolean,Discord.RequestOptions)">
            <summary>
                Defers an interaction and responds with type 5 (<see cref="F:Discord.InteractionResponseType.DeferredChannelMessageWithSource"/>)
            </summary>
            <param name="ephemeral"><see langword="true"/> to send this message ephemerally, otherwise <see langword="false"/>.</param>
            <param name="options">The request options for this <see langword="async"/> request.</param>
            <returns>
                A string that contains json to write back to the incoming http request.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestMessageComponent.Defer(System.Boolean,Discord.RequestOptions)">
            <summary>
            
            </summary>
            <param name="ephemeral"></param>
            <param name="options"></param>
            <returns>
                A string that contains json to write back to the incoming http request.
            </returns>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Discord.Rest.RestMessageComponent.RespondWithModal(Discord.Modal,Discord.RequestOptions)">
            <summary>
                Responds to the interaction with a modal.
            </summary>
            <param name="modal">The modal to respond with.</param>
            <param name="options">The request options for this <see langword="async"/> request.</param>
            <returns>A string that contains json to write back to the incoming http request.</returns>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:Discord.Rest.RestMessageComponent.Discord#IComponentInteraction#Data">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestMessageComponent.Discord#IComponentInteraction#Message">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestMessageComponent.Discord#IComponentInteraction#UpdateAsync(System.Action{Discord.MessageProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestMessageComponent.Discord#IComponentInteraction#DeferLoadingAsync(System.Boolean,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.RestMessageComponentData">
            <summary>
                Represents data for a <see cref="T:Discord.Rest.RestMessageComponent"/>.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestMessageComponentData.CustomId">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestMessageComponentData.Type">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestMessageComponentData.Values">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestMessageComponentData.Channels">
            <inheritdoc cref="P:Discord.IComponentInteractionData.Channels"/>
        </member>
        <member name="P:Discord.Rest.RestMessageComponentData.Users">
            <inheritdoc cref="P:Discord.IComponentInteractionData.Users"/>
        </member>
        <member name="P:Discord.Rest.RestMessageComponentData.Roles">
            <inheritdoc cref="P:Discord.IComponentInteractionData.Roles"/>
        </member>
        <member name="P:Discord.Rest.RestMessageComponentData.Members">
            <inheritdoc cref="P:Discord.IComponentInteractionData.Members"/>
        </member>
        <member name="P:Discord.Rest.RestMessageComponentData.Discord#IComponentInteractionData#Channels">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestMessageComponentData.Discord#IComponentInteractionData#Users">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestMessageComponentData.Discord#IComponentInteractionData#Roles">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestMessageComponentData.Discord#IComponentInteractionData#Members">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestMessageComponentData.Value">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Rest.RestModal">
            <summary>
                Represents a user submitted <see cref="T:Discord.Modal"/>.
            </summary>
        </member>
        <member name="M:Discord.Rest.RestModal.Defer(System.Boolean,Discord.RequestOptions)">
            <summary>
                Acknowledges this interaction with the <see cref="F:Discord.InteractionResponseType.DeferredUpdateMessage"/> if the modal was created
                in a response to a message component interaction, <see cref="F:Discord.InteractionResponseType.DeferredChannelMessageWithSource"/> otherwise.
            </summary>
            <returns>
                A string that contains json to write back to the incoming http request.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestModal.DeferLoading(System.Boolean,Discord.RequestOptions)">
            <summary>
                Defers an interaction and responds with type 5 (<see cref="F:Discord.InteractionResponseType.DeferredChannelMessageWithSource"/>)
            </summary>
            <param name="ephemeral"><see langword="true"/> to send this message ephemerally, otherwise <see langword="false"/>.</param>
            <param name="options">The request options for this <see langword="async"/> request.</param>
            <returns>
                A string that contains json to write back to the incoming http request.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestModal.FollowupAsync(System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <summary>
                Sends a followup message for this interaction.
            </summary>
            <param name="text">The text of the message to be sent.</param>
            <param name="embeds">A array of embeds to send with this response. Max 10.</param>
            <param name="isTTS"><see langword="true"/> if the message should be read out by a text-to-speech reader, otherwise <see langword="false"/>.</param>
            <param name="ephemeral"><see langword="true"/> if the response should be hidden to everyone besides the invoker of the command, otherwise <see langword="false"/>.</param>
            <param name="allowedMentions">The allowed mentions for this response.</param>
            <param name="options">The request options for this response.</param>
            <param name="component">A <see cref="T:Discord.MessageComponent"/> to be sent with this response.</param>
            <param name="embed">A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored.</param>
            <returns>
                The sent message.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestModal.FollowupWithFileAsync(System.IO.Stream,System.String,System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <summary>
                Sends a followup message for this interaction.
            </summary>
            <param name="text">The text of the message to be sent.</param>
            <param name="fileStream">The file to upload.</param>
            <param name="fileName">The file name of the attachment.</param>
            <param name="embeds">A array of embeds to send with this response. Max 10.</param>
            <param name="isTTS"><see langword="true"/> if the message should be read out by a text-to-speech reader, otherwise <see langword="false"/>.</param>
            <param name="ephemeral"><see langword="true"/> if the response should be hidden to everyone besides the invoker of the command, otherwise <see langword="false"/>.</param>
            <param name="allowedMentions">The allowed mentions for this response.</param>
            <param name="options">The request options for this response.</param>
            <param name="component">A <see cref="T:Discord.MessageComponent"/> to be sent with this response.</param>
            <param name="embed">A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored.</param>
            <returns>
                The sent message.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestModal.FollowupWithFileAsync(System.String,System.String,System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <summary>
                Sends a followup message for this interaction.
            </summary>
            <param name="text">The text of the message to be sent.</param>
            <param name="filePath">The file to upload.</param>
            <param name="fileName">The file name of the attachment.</param>
            <param name="embeds">A array of embeds to send with this response. Max 10.</param>
            <param name="isTTS"><see langword="true"/> if the message should be read out by a text-to-speech reader, otherwise <see langword="false"/>.</param>
            <param name="ephemeral"><see langword="true"/> if the response should be hidden to everyone besides the invoker of the command, otherwise <see langword="false"/>.</param>
            <param name="allowedMentions">The allowed mentions for this response.</param>
            <param name="options">The request options for this response.</param>
            <param name="component">A <see cref="T:Discord.MessageComponent"/> to be sent with this response.</param>
            <param name="embed">A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored.</param>
            <returns>
                The sent message.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestModal.Respond(System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <summary>
                Responds to an Interaction with type <see cref="F:Discord.InteractionResponseType.ChannelMessageWithSource"/>.
            </summary>
            <param name="text">The text of the message to be sent.</param>
            <param name="embeds">A array of embeds to send with this response. Max 10.</param>
            <param name="isTTS"><see langword="true"/> if the message should be read out by a text-to-speech reader, otherwise <see langword="false"/>.</param>
            <param name="ephemeral"><see langword="true"/> if the response should be hidden to everyone besides the invoker of the command, otherwise <see langword="false"/>.</param>
            <param name="allowedMentions">The allowed mentions for this response.</param>
            <param name="options">The request options for this response.</param>
            <param name="component">A <see cref="T:Discord.MessageComponent"/> to be sent with this response.</param>
            <param name="embed">A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The parameters provided were invalid or the token was invalid.</exception>
            <returns>
                A string that contains json to write back to the incoming http request.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestModal.FollowupWithFilesAsync(System.Collections.Generic.IEnumerable{Discord.FileAttachment},System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestModal.FollowupWithFileAsync(Discord.FileAttachment,System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestModal.RespondWithModal(Discord.Modal,Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestModal.Data">
            <inheritdoc cref="P:Discord.IModalInteraction.Data"/>
        </member>
        <member name="P:Discord.Rest.RestModal.Message">
            <inheritdoc cref="P:Discord.IModalInteraction.Message"/>
        </member>
        <member name="M:Discord.Rest.RestModal.Discord#IModalInteraction#DeferLoadingAsync(System.Boolean,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestModal.UpdateAsync(System.Action{Discord.MessageProperties},Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Rest.RestModalData">
            <summary>
                Represents data sent from a <see cref="F:Discord.InteractionType.ModalSubmit"/> Interaction.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestModalData.CustomId">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestModalData.Components">
            <summary>
                Represents the <see cref="T:Discord.Modal"/>s components submitted by the user.
            </summary>
        </member>
        <member name="T:Discord.Rest.RestApplicationCommand">
            <summary>
                Represents a Rest-based implementation of the <see cref="T:Discord.IApplicationCommand"/>.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommand.ApplicationId">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommand.Type">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommand.Name">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommand.Description">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommand.IsDefaultPermission">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommand.IsEnabledInDm">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommand.IsNsfw">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommand.DefaultMemberPermissions">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommand.Options">
            <summary>
                Gets a collection of options for this command.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommand.NameLocalizations">
            <summary>
                Gets the localization dictionary for the name field of this command.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommand.DescriptionLocalizations">
            <summary>
                Gets the localization dictionary for the description field of this command.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommand.NameLocalized">
            <summary>
                Gets the localized name of this command.
            </summary>
            <remarks>
                Only returned when the `withLocalizations` query parameter is set to <see langword="false"/> when requesting the command.
            </remarks>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommand.DescriptionLocalized">
            <summary>
                Gets the localized description of this command.
            </summary>
            <remarks>
                Only returned when the `withLocalizations` query parameter is set to <see langword="false"/> when requesting the command.
            </remarks>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommand.IntegrationTypes">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplicationCommand.ContextTypes">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplicationCommand.CreatedAt">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestApplicationCommand.DeleteAsync(Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestApplicationCommand.ModifyAsync(System.Action{Discord.ApplicationCommandProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestApplicationCommand.ModifyAsync``1(System.Action{``0},Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Rest.RestApplicationCommandChoice">
            <summary>
                Represents a Rest-based implementation of <see cref="T:Discord.IApplicationCommandOptionChoice"/>.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommandChoice.Name">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommandChoice.Value">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommandChoice.NameLocalizations">
            <summary>
                Gets the localization dictionary for the name field of this command option choice.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommandChoice.NameLocalized">
            <summary>
                Gets the localized name of this command option choice.
            </summary>
            <remarks>
                Only returned when the `withLocalizations` query parameter is set to <see langword="false"/> when requesting the command.
            </remarks>
        </member>
        <member name="T:Discord.Rest.RestApplicationCommandOption">
            <summary>
                Represents a Rest-based implementation of <see cref="T:Discord.IApplicationCommandOption"/>.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommandOption.Type">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommandOption.Name">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommandOption.Description">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommandOption.IsDefault">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommandOption.IsRequired">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommandOption.IsAutocomplete">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommandOption.MinValue">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommandOption.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommandOption.MinLength">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommandOption.MaxLength">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommandOption.Choices">
            <summary>
                Gets a collection of <see cref="T:Discord.Rest.RestApplicationCommandChoice"/>s for this command.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommandOption.Options">
            <summary>
                Gets a collection of <see cref="T:Discord.Rest.RestApplicationCommandOption"/>s for this command.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommandOption.ChannelTypes">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommandOption.NameLocalizations">
            <summary>
                Gets the localization dictionary for the name field of this command option.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommandOption.DescriptionLocalizations">
            <summary>
                Gets the localization dictionary for the description field of this command option.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommandOption.NameLocalized">
            <summary>
                Gets the localized name of this command option.
            </summary>
            <remarks>
                Only returned when the `withLocalizations` query parameter is set to <see langword="false"/> when requesting the command.
            </remarks>
        </member>
        <member name="P:Discord.Rest.RestApplicationCommandOption.DescriptionLocalized">
            <summary>
                Gets the localized description of this command option.
            </summary>
            <remarks>
                Only returned when the `withLocalizations` query parameter is set to <see langword="false"/> when requesting the command.
            </remarks>
        </member>
        <member name="T:Discord.Rest.RestGlobalCommand">
            <summary>
                Represents a Rest-based global application command.
            </summary>
        </member>
        <member name="M:Discord.Rest.RestGlobalCommand.DeleteAsync(Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestGlobalCommand.ModifyAsync``1(System.Action{``0},Discord.RequestOptions)">
            <summary>
                Modifies this <see cref="T:Discord.Rest.RestApplicationCommand"/>.
            </summary>
            <param name="func">The delegate containing the properties to modify the command with.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                The modified command.
            </returns>
        </member>
        <member name="T:Discord.Rest.RestGuildCommand">
            <summary>
                Represents a Rest-based guild application command.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestGuildCommand.GuildId">
            <summary>
                Gets the guild Id where this command originates.
            </summary>
        </member>
        <member name="M:Discord.Rest.RestGuildCommand.DeleteAsync(Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestGuildCommand.ModifyAsync``1(System.Action{``0},Discord.RequestOptions)">
            <summary>
                Modifies this <see cref="T:Discord.Rest.RestApplicationCommand"/>.
            </summary>
            <param name="func">The delegate containing the properties to modify the command with.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                The modified command
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuildCommand.GetCommandPermission(Discord.RequestOptions)">
            <summary>
                Gets this commands permissions inside of the current guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a
                <see cref="T:Discord.GuildApplicationCommandPermission"/> object defining the permissions of the current slash command.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuildCommand.ModifyCommandPermissions(Discord.ApplicationCommandPermission[],Discord.RequestOptions)">
            <summary>
                Modifies the current command permissions for this guild command.
            </summary>
            <param name="permissions">The permissions to overwrite.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                 A task that represents the asynchronous modification operation. The task result contains a
                <see cref="T:Discord.GuildApplicationCommandPermission"/> object containing the modified permissions.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuildCommand.GetGuild(System.Boolean,Discord.RequestOptions)">
            <summary>
                Gets the guild that this slash command resides in.
            </summary>
            <param name="withCounts"><see langword="true"/> if you want the approximate member and presence counts for the guild, otherwise <see langword="false"/>.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a
                <see cref="T:Discord.Rest.RestGuild"/>.
            </returns>
        </member>
        <member name="T:Discord.Rest.RestInteraction">
            <summary>
                Represents a REST-based interaction.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestInteraction.Type">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestInteraction.Data">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestInteraction.Token">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestInteraction.Version">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestInteraction.User">
            <summary>
                Gets the user who invoked the interaction.
            </summary>
            <remarks>
                If this user is an <see cref="T:Discord.Rest.RestGuildUser"/> and <see cref="P:Discord.Rest.DiscordRestConfig.APIOnRestInteractionCreation"/> is set to false,
                <see cref="P:Discord.Rest.RestGuildUser.Guild"/> will return <see langword="null"/>
            </remarks>
        </member>
        <member name="P:Discord.Rest.RestInteraction.UserLocale">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestInteraction.GuildLocale">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestInteraction.CreatedAt">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestInteraction.IsValidToken">
            <summary>
                Gets whether or not the token used to respond to this interaction is valid.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestInteraction.Channel">
            <summary>
                Gets the channel that this interaction was executed in.
            </summary>
            <remarks>
                This property will be <see langword="null"/> if <see cref="P:Discord.Rest.DiscordRestConfig.APIOnRestInteractionCreation"/> is set to false.
                Call <see cref="M:Discord.Rest.RestInteraction.GetChannelAsync(Discord.RequestOptions)"/> to set this property and get the interaction channel.
            </remarks>
        </member>
        <member name="P:Discord.Rest.RestInteraction.ChannelId">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestInteraction.Guild">
            <summary>
                Gets the guild this interaction was executed in if applicable.
            </summary>
            <remarks>
                This property will be <see langword="null"/> if <see cref="P:Discord.Rest.DiscordRestConfig.APIOnRestInteractionCreation"/> is set to false
                or if the interaction was not executed in a guild.
            </remarks>
        </member>
        <member name="P:Discord.Rest.RestInteraction.GuildId">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestInteraction.HasResponded">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestInteraction.IsDMInteraction">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestInteraction.ApplicationId">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestInteraction.ContextType">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestInteraction.Permissions">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestInteraction.Entitlements">
            <inheritdoc cref="P:Discord.IDiscordInteraction.Entitlements" />
        </member>
        <member name="P:Discord.Rest.RestInteraction.IntegrationOwners">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestInteraction.GetChannelAsync(Discord.RequestOptions)">
            <summary>
                Gets the channel this interaction was executed in. Will be a DM channel if the interaction was executed in DM.
            </summary>
            <remarks>
                Calling this method successfully will populate the <see cref="P:Discord.Rest.RestInteraction.Channel"/> property.
                After this, further calls to this method will no longer call the API, and depend on the value set in <see cref="P:Discord.Rest.RestInteraction.Channel"/>.
            </remarks>
            <param name="options">The request options for this <see langword="async"/> request.</param>
            <returns>A Rest channel to send messages to.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if no channel can be received.</exception>
        </member>
        <member name="M:Discord.Rest.RestInteraction.GetGuildAsync(Discord.RequestOptions)">
            <summary>
                Gets the guild this interaction was executed in if applicable.
            </summary>
            <remarks>
                Calling this method successfully will populate the <see cref="P:Discord.Rest.RestInteraction.Guild"/> property.
                After this, further calls to this method will no longer call the API, and depend on the value set in <see cref="P:Discord.Rest.RestInteraction.Guild"/>.
            </remarks>
            <param name="options">The request options for this <see langword="async"/> request.</param>
            <returns>The guild this interaction was executed in. <see langword="null"/> if the interaction was executed inside DM.</returns>
        </member>
        <member name="M:Discord.Rest.RestInteraction.Defer(System.Boolean,Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestInteraction.GetOriginalResponseAsync(Discord.RequestOptions)">
            <summary>
                Gets the original response for this interaction.
            </summary>
            <param name="options">The request options for this <see langword="async"/> request.</param>
            <returns>A <see cref="T:Discord.Rest.RestInteractionMessage"/> that represents the initial response.</returns>
        </member>
        <member name="M:Discord.Rest.RestInteraction.ModifyOriginalResponseAsync(System.Action{Discord.MessageProperties},Discord.RequestOptions)">
            <summary>
                Edits original response for this interaction.
            </summary>
            <param name="func">A delegate containing the properties to modify the message with.</param>
            <param name="options">The request options for this <see langword="async"/> request.</param>
            <returns>
                A task that represents an asynchronous send operation for delivering the message. The task result
                contains the sent message.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestInteraction.RespondWithModal(Discord.Modal,Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestInteraction.Respond(System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestInteraction.FollowupAsync(System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <summary>
                Sends a followup message for this interaction.
            </summary>
            <param name="text">The text of the message to be sent.</param>
            <param name="embeds">A array of embeds to send with this response. Max 10.</param>
            <param name="isTTS"><see langword="true"/> if the message should be read out by a text-to-speech reader, otherwise <see langword="false"/>.</param>
            <param name="ephemeral"><see langword="true"/> if the response should be hidden to everyone besides the invoker of the command, otherwise <see langword="false"/>.</param>
            <param name="allowedMentions">The allowed mentions for this response.</param>
            <param name="components">A <see cref="T:Discord.MessageComponent"/> to be sent with this response.</param>
            <param name="embed">A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored.</param>
            <param name="options">The request options for this response.</param>
            <param name="poll">A poll to send with the message.</param>
            <returns>
                A task that represents an asynchronous send operation for delivering the message. The task result
                contains the sent message.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestInteraction.FollowupWithFileAsync(System.IO.Stream,System.String,System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <summary>
                Sends a followup message for this interaction.
            </summary>
            <param name="text">The text of the message to be sent.</param>
            <param name="fileStream">The file to upload.</param>
            <param name="fileName">The file name of the attachment.</param>
            <param name="embeds">A array of embeds to send with this response. Max 10.</param>
            <param name="isTTS"><see langword="true"/> if the message should be read out by a text-to-speech reader, otherwise <see langword="false"/>.</param>
            <param name="ephemeral"><see langword="true"/> if the response should be hidden to everyone besides the invoker of the command, otherwise <see langword="false"/>.</param>
            <param name="allowedMentions">The allowed mentions for this response.</param>
            <param name="components">A <see cref="T:Discord.MessageComponent"/> to be sent with this response.</param>
            <param name="embed">A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored.</param>
            <param name="options">The request options for this response.</param>
            <param name="poll">A poll to send with the message.</param>
            <returns>
                 A task that represents an asynchronous send operation for delivering the message. The task result
                contains the sent message.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestInteraction.FollowupWithFileAsync(System.String,System.String,System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <summary>
                Sends a followup message for this interaction.
            </summary>
            <param name="text">The text of the message to be sent.</param>
            <param name="filePath">The file to upload.</param>
            <param name="fileName">The file name of the attachment.</param>
            <param name="embeds">A array of embeds to send with this response. Max 10.</param>
            <param name="isTTS"><see langword="true"/> if the message should be read out by a text-to-speech reader, otherwise <see langword="false"/>.</param>
            <param name="ephemeral"><see langword="true"/> if the response should be hidden to everyone besides the invoker of the command, otherwise <see langword="false"/>.</param>
            <param name="allowedMentions">The allowed mentions for this response.</param>
            <param name="components">A <see cref="T:Discord.MessageComponent"/> to be sent with this response.</param>
            <param name="embed">A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored.</param>
            <param name="options">The request options for this response.</param>
            <param name="poll">A poll to send with the message.</param>
            <returns>
                 A task that represents an asynchronous send operation for delivering the message. The task result
                contains the sent message.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestInteraction.FollowupWithFileAsync(Discord.FileAttachment,System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <summary>
                Sends a followup message for this interaction.
            </summary>
            <param name="attachment">The attachment containing the file and description.</param>
            <param name="text">The text of the message to be sent.</param>
            <param name="embeds">A array of embeds to send with this response. Max 10.</param>
            <param name="isTTS"><see langword="true"/> if the message should be read out by a text-to-speech reader, otherwise <see langword="false"/>.</param>
            <param name="ephemeral"><see langword="true"/> if the response should be hidden to everyone besides the invoker of the command, otherwise <see langword="false"/>.</param>
            <param name="allowedMentions">The allowed mentions for this response.</param>
            <param name="options">The request options for this response.</param>
            <param name="components">A <see cref="T:Discord.MessageComponent"/> to be sent with this response.</param>
            <param name="embed">A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored.</param>
            <param name="poll">A poll to send with the message.</param>
            <returns>
                A task that represents an asynchronous send operation for delivering the message. The task result
                contains the sent message.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestInteraction.FollowupWithFilesAsync(System.Collections.Generic.IEnumerable{Discord.FileAttachment},System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <summary>
                Sends a followup message for this interaction.
            </summary>
            <param name="attachments">A collection of attachments to upload.</param>
            <param name="text">The text of the message to be sent.</param>
            <param name="embeds">A array of embeds to send with this response. Max 10.</param>
            <param name="isTTS"><see langword="true"/> if the message should be read out by a text-to-speech reader, otherwise <see langword="false"/>.</param>
            <param name="ephemeral"><see langword="true"/> if the response should be hidden to everyone besides the invoker of the command, otherwise <see langword="false"/>.</param>
            <param name="allowedMentions">The allowed mentions for this response.</param>
            <param name="options">The request options for this response.</param>
            <param name="components">A <see cref="T:Discord.MessageComponent"/> to be sent with this response.</param>
            <param name="embed">A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored.</param>
            <param name="poll">A poll to send with the message.</param>
            <returns>
                A task that represents an asynchronous send operation for delivering the message. The task result
                contains the sent message.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestInteraction.DeleteOriginalResponseAsync(Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestInteraction.RespondWithPremiumRequiredAsync(Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestInteraction.Discord#IDiscordInteraction#Entitlements">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestInteraction.Discord#IDiscordInteraction#User">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestInteraction.Discord#IDiscordInteraction#RespondAsync(System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestInteraction.Discord#IDiscordInteraction#DeferAsync(System.Boolean,Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestInteraction.Discord#IDiscordInteraction#RespondWithModalAsync(Discord.Modal,Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestInteraction.Discord#IDiscordInteraction#FollowupAsync(System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestInteraction.Discord#IDiscordInteraction#GetOriginalResponseAsync(Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestInteraction.Discord#IDiscordInteraction#ModifyOriginalResponseAsync(System.Action{Discord.MessageProperties},Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestInteraction.Discord#IDiscordInteraction#FollowupWithFileAsync(System.IO.Stream,System.String,System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestInteraction.Discord#IDiscordInteraction#FollowupWithFileAsync(System.String,System.String,System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestInteraction.Discord#IDiscordInteraction#FollowupWithFileAsync(Discord.FileAttachment,System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestInteraction.Discord#IDiscordInteraction#FollowupWithFilesAsync(System.Collections.Generic.IEnumerable{Discord.FileAttachment},System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestInteraction.Discord#IDiscordInteraction#RespondWithFilesAsync(System.Collections.Generic.IEnumerable{Discord.FileAttachment},System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestInteraction.Discord#IDiscordInteraction#RespondWithFileAsync(System.IO.Stream,System.String,System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestInteraction.Discord#IDiscordInteraction#RespondWithFileAsync(System.String,System.String,System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestInteraction.Discord#IDiscordInteraction#RespondWithFileAsync(Discord.FileAttachment,System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Rest.RestPingInteraction">
            <summary>
                Represents a REST-based ping interaction.
            </summary>
        </member>
        <member name="T:Discord.Rest.RestAutocompleteInteraction">
            <summary>
                Represents a REST-based autocomplete interaction.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestAutocompleteInteraction.Data">
            <summary>
                Gets the autocomplete data of this interaction.
            </summary>
        </member>
        <member name="M:Discord.Rest.RestAutocompleteInteraction.Respond(System.Collections.Generic.IEnumerable{Discord.AutocompleteResult},Discord.RequestOptions)">
            <summary>
                Responds to this interaction with a set of choices.
            </summary>
            <param name="result">
                The set of choices for the user to pick from.
                <remarks>
                    A max of 25 choices are allowed. Passing <see langword="null"/> for this argument will show the executing user that
                    there is no choices for their autocompleted input.
                </remarks>
            </param>
            <param name="options">The request options for this response.</param>
            <returns>
                A string that contains json to write back to the incoming http request.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestAutocompleteInteraction.Respond(Discord.RequestOptions,Discord.AutocompleteResult[])">
            <summary>
                Responds to this interaction with a set of choices.
            </summary>
            <param name="options">The request options for this response.</param>
            <param name="result">
             The set of choices for the user to pick from.
                <remarks>
                    A max of 25 choices are allowed. Passing <see langword="null"/> for this argument will show the executing user that
                    there is no choices for their autocompleted input.
                </remarks>
            </param>
            <returns>
                A string that contains json to write back to the incoming http request.
            </returns>
        </member>
        <member name="P:Discord.Rest.RestAutocompleteInteraction.Discord#IAutocompleteInteraction#Data">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestAutocompleteInteraction.Discord#IAutocompleteInteraction#RespondAsync(System.Collections.Generic.IEnumerable{Discord.AutocompleteResult},Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Rest.RestAutocompleteInteractionData">
            <summary>
                Represents the data for a <see cref="T:Discord.Rest.RestAutocompleteInteraction"/>.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestAutocompleteInteractionData.CommandName">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestAutocompleteInteractionData.CommandId">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestAutocompleteInteractionData.Type">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestAutocompleteInteractionData.Version">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestAutocompleteInteractionData.Current">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestAutocompleteInteractionData.Options">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Rest.RestSlashCommand">
            <summary>
                Represents a REST-based slash command.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestSlashCommand.Data">
            <summary>
                Gets the data associated with this interaction.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestSlashCommand.Discord#ISlashCommandInteraction#Data">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestSlashCommand.Discord#IApplicationCommandInteraction#Data">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Rest.RestSlashCommandDataOption">
            <summary>
                Represents a REST-based option for a slash command.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestSlashCommandDataOption.Name">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestSlashCommandDataOption.Value">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestSlashCommandDataOption.Type">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestSlashCommandDataOption.Options">
            <summary>
                 Gets a collection of sub command options received for this sub command group.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestInvite.ChannelName">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestInvite.GuildName">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestInvite.PresenceCount">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestInvite.MemberCount">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestInvite.ChannelId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestInvite.GuildId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestInvite.Inviter">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestInvite.TargetUser">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestInvite.TargetUserType">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestInvite.PartialGuild">
            <summary>
                Gets the guild this invite is linked to.
            </summary>
            <returns>
                A partial guild object representing the guild that the invite points to.
            </returns>
        </member>
        <member name="P:Discord.Rest.RestInvite.Application">
            <inheritdoc cref="P:Discord.IInvite.Application" />
        </member>
        <member name="P:Discord.Rest.RestInvite.ExpiresAt">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestInvite.ScheduledEvent">
            <summary>
                Gets guild scheduled event data. <see langword="null" /> if event id was invalid.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestInvite.Code">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestInvite.Url">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestInvite.UpdateAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestInvite.DeleteAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestInvite.ToString">
            <summary>
                Gets the URL of the invite.
            </summary>
            <returns>
                A string that resolves to the Url of the invite.
            </returns>
        </member>
        <member name="P:Discord.Rest.RestInvite.Discord#IInvite#Guild">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestInvite.Discord#IInvite#Channel">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestInvite.Discord#IInvite#Application">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.RestInviteMetadata">
            <summary> Represents additional information regarding the REST-based invite object. </summary>
        </member>
        <member name="P:Discord.Rest.RestInviteMetadata.IsTemporary">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestInviteMetadata.MaxAge">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestInviteMetadata.MaxUses">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestInviteMetadata.Uses">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestInviteMetadata.CreatedAt">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.CustomSticker">
            <summary>
                Represents a Rest-based custom sticker within a guild.
            </summary>
        </member>
        <member name="P:Discord.Rest.CustomSticker.AuthorId">
            <summary>
                Gets the users id who uploaded the sticker.
            </summary>
            <remarks>
                In order to get the author id, the bot needs the MANAGE_EMOJIS_AND_STICKERS permission.
            </remarks>
        </member>
        <member name="P:Discord.Rest.CustomSticker.Guild">
            <summary>
                Gets the guild that this custom sticker is in.
            </summary>
            <remarks>
                <b>Note</b>: This property can be <see langword="null"/> if the sticker wasn't fetched from a guild.
            </remarks>
        </member>
        <member name="M:Discord.Rest.CustomSticker.DeleteAsync(Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.CustomSticker.ModifyAsync(System.Action{Discord.StickerProperties},Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="F:Discord.Rest.MessageHelper.InlineCodeRegex">
            <summary>
            Regex used to check if some text is formatted as inline code.
            </summary>
        </member>
        <member name="F:Discord.Rest.MessageHelper.BlockCodeRegex">
            <summary>
            Regex used to check if some text is formatted as a code block.
            </summary>
        </member>
        <member name="M:Discord.Rest.MessageHelper.ModifyAsync(Discord.IMessage,Discord.Rest.BaseDiscordClient,System.Action{Discord.MessageProperties},Discord.RequestOptions)">
            <exception cref="T:System.InvalidOperationException">Only the author of a message may modify the message.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
        </member>
        <member name="T:Discord.Rest.RestFollowupMessage">
            <summary>
                Represents a REST-based follow up message sent by a bot responding to an interaction.
            </summary>
        </member>
        <member name="M:Discord.Rest.RestFollowupMessage.DeleteAsync">
            <summary>
                Deletes this object and all of it's children.
            </summary>
            <returns>A task that represents the asynchronous delete operation.</returns>
        </member>
        <member name="M:Discord.Rest.RestFollowupMessage.ModifyAsync(System.Action{Discord.MessageProperties},Discord.RequestOptions)">
            <summary>
                Modifies this interaction followup message.
            </summary>
            <remarks>
                This method modifies this message with the specified properties. To see an example of this
                method and what properties are available, please refer to <see cref="T:Discord.MessageProperties"/>.
            </remarks>
            <example>
                <para>The following example replaces the content of the message with <c>Hello World!</c>.</para>
                <code language="cs">
                await msg.ModifyAsync(x =&gt; x.Content = "Hello World!");
                </code>
            </example>
            <param name="func">A delegate containing the properties to modify the message with.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous modification operation.
            </returns>
            <exception cref="T:System.InvalidOperationException">The token used to modify/delete this message expired.</exception>
            /// <exception cref="T:Discord.Net.HttpException">Something went wrong during the request.</exception>
        </member>
        <member name="T:Discord.Rest.RestInteractionMessage">
            <summary>
                Represents the initial REST-based response to an interaction.
            </summary>
        </member>
        <member name="M:Discord.Rest.RestInteractionMessage.DeleteAsync">
            <summary>
                Deletes this object and all of its children.
            </summary>
            <returns>A task that represents the asynchronous delete operation.</returns>
        </member>
        <member name="M:Discord.Rest.RestInteractionMessage.ModifyAsync(System.Action{Discord.MessageProperties},Discord.RequestOptions)">
            <summary>
                Modifies this interaction response
            </summary>
            <remarks>
                This method modifies this message with the specified properties. To see an example of this
                method and what properties are available, please refer to <see cref="T:Discord.MessageProperties"/>.
            </remarks>
            <example>
                <para>The following example replaces the content of the message with <c>Hello World!</c>.</para>
                <code language="cs">
                await msg.ModifyAsync(x =&gt; x.Content = "Hello World!");
                </code>
            </example>
            <param name="func">A delegate containing the properties to modify the message with.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous modification operation.
            </returns>
            <exception cref="T:System.InvalidOperationException">The token used to modify/delete this message expired.</exception>
            /// <exception cref="T:Discord.Net.HttpException">Something went wrong during the request.</exception>
        </member>
        <member name="T:Discord.Rest.RestMessage">
            <summary>
                Represents a REST-based message.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestMessage.Channel">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.Author">
            <summary>
                Gets the Author of the message.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestMessage.Source">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.Content">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.CleanContent">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.CreatedAt">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.IsTTS">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.IsPinned">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.IsSuppressed">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.EditedTimestamp">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.MentionedEveryone">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.Thread">
            <inheritdoc cref="P:Discord.IMessage.Thread"/>
        </member>
        <member name="P:Discord.Rest.RestMessage.Discord#IMessage#Thread">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.Attachments">
            <summary>
                Gets a collection of the <see cref="T:Discord.Attachment"/>'s on the message.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestMessage.Embeds">
            <summary>
                Gets a collection of the <see cref="T:Discord.Embed"/>'s on the message.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestMessage.MentionedChannelIds">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.MentionedRoleIds">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.Tags">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.Stickers">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.Timestamp">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.Activity">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.Application">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.Reference">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.Interaction">
            <summary>
                Gets the interaction this message is a response to.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestMessage.Flags">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.Type">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestMessage.RoleSubscriptionData">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.PurchaseNotification">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.CallData">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.Components">
            <inheritdoc cref="P:Discord.IMessage.Components"/>
        </member>
        <member name="P:Discord.Rest.RestMessage.MentionedUsers">
            <summary>
                Gets a collection of the mentioned users in the message.
            </summary>
        </member>
        <member name="M:Discord.Rest.RestMessage.UpdateAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestMessage.DeleteAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestMessage.ToString">
            <summary>
                Gets the <see cref="P:Discord.Rest.RestMessage.Content"/> of the message.
            </summary>
            <returns>
                A string that is the <see cref="P:Discord.Rest.RestMessage.Content"/> of the message.
            </returns>
        </member>
        <member name="P:Discord.Rest.RestMessage.Discord#IMessage#Author">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.Discord#IMessage#Attachments">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.Discord#IMessage#Embeds">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.Discord#IMessage#MentionedUserIds">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.Discord#IMessage#Components">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestMessage.Discord#IMessage#Interaction">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestMessage.Discord#IMessage#Stickers">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.Reactions">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestMessage.AddReactionAsync(Discord.IEmote,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestMessage.RemoveReactionAsync(Discord.IEmote,Discord.IUser,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestMessage.RemoveReactionAsync(Discord.IEmote,System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestMessage.RemoveAllReactionsAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestMessage.RemoveAllReactionsForEmoteAsync(Discord.IEmote,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestMessage.GetReactionUsersAsync(Discord.IEmote,System.Int32,Discord.RequestOptions,Discord.ReactionType)">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.RestReaction">
            <summary>
                Represents a REST reaction object.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestReaction.Emote">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestReaction.Count">
            <summary>
                Gets the number of reactions added.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestReaction.Me">
            <summary>
                Gets whether the reaction is added by the user.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestReaction.MeBurst">
            <summary>
                Gets whether the super-reaction is added by the user.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestReaction.BurstCount">
            <summary>
                Gets the number of burst reactions added.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestReaction.NormalCount">
            <summary>
                Gets the number of normal reactions added.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestReaction.BurstColors">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.RestSystemMessage">
            <summary>
                Represents a REST-based system message.
            </summary>
        </member>
        <member name="T:Discord.Rest.RestUserMessage">
            <summary>
                Represents a REST-based message sent by a user.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestUserMessage.IsTTS">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserMessage.IsPinned">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserMessage.IsSuppressed">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserMessage.EditedTimestamp">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserMessage.MentionedEveryone">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserMessage.Attachments">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserMessage.Embeds">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserMessage.MentionedChannelIds">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserMessage.MentionedRoleIds">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserMessage.Tags">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserMessage.Stickers">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserMessage.ReferencedMessage">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserMessage.InteractionMetadata">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserMessage.Poll">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserMessage.ResolvedData">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestUserMessage.ModifyAsync(System.Action{Discord.MessageProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestUserMessage.PinAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestUserMessage.UnpinAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestUserMessage.Resolve(Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestUserMessage.CrosspostAsync(Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">This operation may only be called on a <see cref="T:Discord.INewsChannel"/> channel.</exception>
        </member>
        <member name="M:Discord.Rest.RestUserMessage.EndPollAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestUserMessage.GetPollAnswerVotersAsync(System.UInt32,System.Nullable{System.Int32},System.Nullable{System.UInt64},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.Sticker">
            <inheritdoc cref="T:Discord.ISticker"/>
        </member>
        <member name="P:Discord.Rest.Sticker.PackId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.Sticker.Name">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.Sticker.Description">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.Sticker.Tags">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.Sticker.Type">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.Sticker.IsAvailable">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.Sticker.SortOrder">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.Sticker.Format">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.Sticker.GetStickerUrl">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Rest.StickerItem">
            <summary>
                Represents a partial sticker received in a message.
            </summary>
        </member>
        <member name="P:Discord.Rest.StickerItem.Name">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.StickerItem.Format">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.StickerItem.ResolveStickerAsync">
            <summary>
                Resolves this sticker item by fetching the <see cref="T:Discord.Rest.Sticker"/> from the API.
            </summary>
            <returns>
                A task representing the download operation, the result of the task is a sticker object.
            </returns>
        </member>
        <member name="T:Discord.Rest.RestApplication">
            <summary>
                Represents a REST-based entity that contains information about a Discord application created via the developer portal.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestApplication.Name">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.Description">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.RPCOrigins">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.Flags">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.IsBotPublic">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.BotRequiresCodeGrant">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.Team">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.Owner">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.TermsOfService">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.PrivacyPolicy">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.VerifyKey">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.CustomInstallUrl">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.RoleConnectionsVerificationUrl">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.CreatedAt">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.IconUrl">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.Guild">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.ApproximateGuildCount">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.RedirectUris">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.InteractionsEndpointUrl">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.InstallParams">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.DiscoverabilityState">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.DiscoveryEligibilityFlags">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.ExplicitContentFilterLevel">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.IsHook">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.InteractionEventTypes">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.InteractionsVersion">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.IsMonetized">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.MonetizationEligibilityFlags">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.MonetizationState">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.RpcState">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.StoreState">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.VerificationState">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.Tags">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.IntegrationTypesConfig">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestApplication.UpdateAsync">
            <exception cref="T:System.InvalidOperationException">Unable to update this object from a different application token.</exception>
        </member>
        <member name="M:Discord.Rest.RestApplication.ToString">
            <summary>
                Gets the name of the application.
            </summary>
            <returns>
                The name of the application.
            </returns>
        </member>
        <member name="T:Discord.Rest.RestRole">
            <summary>
                Represents a REST-based role.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestRole.Color">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestRole.IsHoisted">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestRole.IsManaged">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestRole.IsMentionable">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestRole.Name">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestRole.Icon">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestRole.Emoji">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestRole.Permissions">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestRole.Position">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestRole.Tags">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestRole.Flags">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestRole.CreatedAt">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestRole.IsEveryone">
            <summary>
                Gets if this role is the @everyone role of the guild or not.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestRole.Mention">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestRole.ModifyAsync(System.Action{Discord.RoleProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestRole.DeleteAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestRole.GetIconUrl">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestRole.CompareTo(Discord.IRole)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestRole.ToString">
            <summary>
                Gets the name of the role.
            </summary>
            <returns>
                A string that is the name of the role.
            </returns>
        </member>
        <member name="P:Discord.Rest.RestRole.Discord#IRole#Guild">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestTeam.IconUrl">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestTeam.TeamMembers">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestTeam.Name">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestTeam.OwnerUserId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestTeamMember.MembershipState">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestTeamMember.Permissions">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestTeamMember.TeamId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestTeamMember.User">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestTeamMember.Role">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestConnection.Id">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestConnection.Name">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestConnection.Type">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestConnection.IsRevoked">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestConnection.Integrations">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestConnection.Verified">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestConnection.FriendSync">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestConnection.ShowActivity">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestConnection.Visibility">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestConnection.ToString">
            <summary>
                Gets the name of the connection.
            </summary>
            <returns>
                Name of the connection.
            </returns>
        </member>
        <member name="T:Discord.Rest.RestGroupUser">
            <summary>
                Represents a REST-based group user.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestGroupUser.Discord#IVoiceState#IsDeafened">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGroupUser.Discord#IVoiceState#IsMuted">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGroupUser.Discord#IVoiceState#IsSelfDeafened">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGroupUser.Discord#IVoiceState#IsSelfMuted">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGroupUser.Discord#IVoiceState#IsSuppressed">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGroupUser.Discord#IVoiceState#VoiceChannel">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGroupUser.Discord#IVoiceState#VoiceSessionId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGroupUser.Discord#IVoiceState#IsStreaming">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGroupUser.Discord#IVoiceState#IsVideoing">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGroupUser.Discord#IVoiceState#RequestToSpeakTimestamp">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.RestGuildUser">
            <summary>
                Represents a REST-based guild user.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestGuildUser.DisplayName">
            <inheritdoc cref="P:Discord.IGuildUser.DisplayName"/>
        </member>
        <member name="P:Discord.Rest.RestGuildUser.Nickname">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildUser.DisplayAvatarId">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestGuildUser.GuildAvatarId">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestGuildUser.IsDeafened">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildUser.IsMuted">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildUser.PremiumSince">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildUser.GuildId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildUser.IsPending">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildUser.Flags">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildUser.Hierarchy">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildUser.TimedOutUntil">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildUser.GuildPermissions">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException" accessor="get">Resolving permissions requires the parent guild to be downloaded.</exception>
        </member>
        <member name="P:Discord.Rest.RestGuildUser.RoleIds">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildUser.JoinedAt">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildUser.UpdateAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildUser.ModifyAsync(System.Action{Discord.GuildUserProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildUser.KickAsync(System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildUser.AddRoleAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildUser.AddRoleAsync(Discord.IRole,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildUser.AddRolesAsync(System.Collections.Generic.IEnumerable{System.UInt64},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildUser.AddRolesAsync(System.Collections.Generic.IEnumerable{Discord.IRole},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildUser.RemoveRoleAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildUser.RemoveRoleAsync(Discord.IRole,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildUser.RemoveRolesAsync(System.Collections.Generic.IEnumerable{System.UInt64},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildUser.RemoveRolesAsync(System.Collections.Generic.IEnumerable{Discord.IRole},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildUser.SetTimeOutAsync(System.TimeSpan,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildUser.RemoveTimeOutAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildUser.GetPermissions(Discord.IGuildChannel)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Resolving permissions requires the parent guild to be downloaded.</exception>
        </member>
        <member name="M:Discord.Rest.RestGuildUser.GetGuildAvatarUrl(Discord.ImageFormat,System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildUser.GetDisplayAvatarUrl(Discord.ImageFormat,System.UInt16)">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildUser.Discord#IGuildUser#Guild">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildUser.Discord#IVoiceState#IsSelfDeafened">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildUser.Discord#IVoiceState#IsSelfMuted">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildUser.Discord#IVoiceState#IsSuppressed">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildUser.Discord#IVoiceState#VoiceChannel">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildUser.Discord#IVoiceState#VoiceSessionId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildUser.Discord#IVoiceState#IsStreaming">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildUser.Discord#IVoiceState#IsVideoing">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildUser.Discord#IVoiceState#RequestToSpeakTimestamp">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.RestSelfUser">
            <summary>
                Represents the logged-in REST-based user.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestSelfUser.Email">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestSelfUser.IsVerified">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestSelfUser.IsMfaEnabled">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestSelfUser.Flags">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestSelfUser.PremiumType">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestSelfUser.Locale">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestSelfUser.Update(Discord.API.User)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestSelfUser.UpdateAsync(Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Unable to update this object using a different token.</exception>
        </member>
        <member name="M:Discord.Rest.RestSelfUser.ModifyAsync(System.Action{Discord.SelfUserProperties},Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Unable to modify this object using a different token.</exception>
        </member>
        <member name="T:Discord.Rest.RestThreadUser">
            <summary>
                Represents a thread user received over the REST api.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestThreadUser.Thread">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestThreadUser.ThreadJoinedAt">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestThreadUser.Guild">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestThreadUser.GuildUser">
            <inheritdoc cref="P:Discord.IThreadUser.GuildUser"/>
        </member>
        <member name="P:Discord.Rest.RestThreadUser.Mention">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestThreadUser.Discord#IThreadUser#GuildUser">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestThreadUser.GetGuildUser">
            <summary>
                Gets the guild user for this thread user.
            </summary>
            <returns>
                A task representing the asynchronous get operation. The task returns a
                <see cref="T:Discord.IGuildUser"/> that represents the current thread user.
            </returns>
        </member>
        <member name="T:Discord.Rest.RestUser">
            <summary>
                Represents a REST-based user.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestUser.IsBot">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUser.Username">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUser.DiscriminatorValue">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUser.AvatarId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUser.BannerId">
            <summary>
                Gets the hash of the banner.
            </summary>
            <remarks>
                <see langword="null"/> if the user has no banner set.
            </remarks>
        </member>
        <member name="P:Discord.Rest.RestUser.BannerColor">
            <summary>
                Gets the color of the banner.
            </summary>
            <remarks>
                <see langword="null"/> if the user has no banner set.
            </remarks>
        </member>
        <member name="P:Discord.Rest.RestUser.AccentColor">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUser.PublicFlags">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUser.GlobalName">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUser.CreatedAt">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUser.Discriminator">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUser.Mention">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUser.Activity">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUser.Status">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUser.ActiveClients">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUser.Activities">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUser.IsWebhook">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUser.AvatarDecorationHash">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUser.AvatarDecorationSkuId">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestUser.UpdateAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestUser.CreateDMChannelAsync(Discord.RequestOptions)">
            <summary>
                Creates a direct message channel to this user.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a rest DM channel where the user is the recipient.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestUser.GetAvatarUrl(Discord.ImageFormat,System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestUser.GetBannerUrl(Discord.ImageFormat,System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestUser.GetDefaultAvatarUrl">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestUser.GetAvatarDecorationUrl">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestUser.ToString">
            <summary>
                Gets the Username#Discriminator of the user.
            </summary>
            <returns>
                A string that resolves to Username#Discriminator of the user.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestUser.Discord#IUser#CreateDMChannelAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.WebhookId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.PremiumSince">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.IsWebhook">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.GuildId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.Discord#IGuildUser#Guild">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.Discord#IGuildUser#RoleIds">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.Discord#IGuildUser#JoinedAt">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.Discord#IGuildUser#DisplayName">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.Discord#IGuildUser#Nickname">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.Discord#IGuildUser#DisplayAvatarId">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.Discord#IGuildUser#GuildAvatarId">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestWebhookUser.Discord#IGuildUser#GetGuildAvatarUrl(Discord.ImageFormat,System.UInt16)">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.Discord#IGuildUser#IsPending">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.Discord#IGuildUser#Hierarchy">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.Discord#IGuildUser#TimedOutUntil">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.Discord#IGuildUser#GuildPermissions">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.Discord#IGuildUser#Flags">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestWebhookUser.Discord#IGuildUser#GetPermissions(Discord.IGuildChannel)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestWebhookUser.Discord#IGuildUser#KickAsync(System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestWebhookUser.Discord#IGuildUser#ModifyAsync(System.Action{Discord.GuildUserProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestWebhookUser.Discord#IGuildUser#AddRoleAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestWebhookUser.Discord#IGuildUser#AddRoleAsync(Discord.IRole,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestWebhookUser.Discord#IGuildUser#AddRolesAsync(System.Collections.Generic.IEnumerable{System.UInt64},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestWebhookUser.Discord#IGuildUser#AddRolesAsync(System.Collections.Generic.IEnumerable{Discord.IRole},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestWebhookUser.Discord#IGuildUser#RemoveRoleAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestWebhookUser.Discord#IGuildUser#RemoveRoleAsync(Discord.IRole,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestWebhookUser.Discord#IGuildUser#RemoveRolesAsync(System.Collections.Generic.IEnumerable{System.UInt64},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestWebhookUser.Discord#IGuildUser#RemoveRolesAsync(System.Collections.Generic.IEnumerable{Discord.IRole},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestWebhookUser.Discord#IGuildUser#SetTimeOutAsync(System.TimeSpan,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestWebhookUser.Discord#IGuildUser#RemoveTimeOutAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsDeafened">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsMuted">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsSelfDeafened">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsSelfMuted">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsSuppressed">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.Discord#IVoiceState#VoiceChannel">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.Discord#IVoiceState#VoiceSessionId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsStreaming">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsVideoing">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.Discord#IVoiceState#RequestToSpeakTimestamp">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhook.Token">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhook.ChannelId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhook.Name">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhook.AvatarId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhook.GuildId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhook.Creator">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhook.ApplicationId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhook.Type">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhook.PartialGuild">
            <summary>
                Gets the partial guild of the followed channel. <see langword="null"/> if <see cref="P:Discord.Rest.RestWebhook.Type"/> is not <see cref="F:Discord.WebhookType.ChannelFollower"/>.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestWebhook.FollowedChannelId">
            <summary>
                Gets the id of the followed channel. <see langword="null"/> if <see cref="P:Discord.Rest.RestWebhook.Type"/> is not <see cref="F:Discord.WebhookType.ChannelFollower"/>.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestWebhook.FollowedChannelName">
            <summary>
                Gets the name of the followed channel. <see langword="null"/> if <see cref="P:Discord.Rest.RestWebhook.Type"/> is not <see cref="F:Discord.WebhookType.ChannelFollower"/>.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestWebhook.CreatedAt">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestWebhook.UpdateAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestWebhook.GetAvatarUrl(Discord.ImageFormat,System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestWebhook.DeleteAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhook.Discord#IWebhook#Guild">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhook.Discord#IWebhook#Channel">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestWebhook.Discord#IWebhook#ModifyAsync(System.Action{Discord.WebhookProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.ClientExtensions.AddGuildUserAsync(Discord.Rest.BaseDiscordClient,System.UInt64,System.UInt64,System.String,System.Action{Discord.AddGuildUserProperties},Discord.RequestOptions)">
            <summary>
                Adds a user to the specified guild.
            </summary>
            <remarks>
                This method requires you have an OAuth2 access token for the user, requested with the guilds.join scope, and that the bot have the MANAGE_INVITES permission in the guild.
            </remarks>
            <param name="client">The Discord client object.</param>
            <param name="guildId">The snowflake identifier of the guild.</param>
            <param name="userId">The snowflake identifier of the user.</param>
            <param name="accessToken">The OAuth2 access token for the user, requested with the guilds.join scope.</param>
            <param name="func">The delegate containing the properties to be applied to the user upon being added to the guild.</param>
            <param name="options">The options to be used when sending the request.</param>
        </member>
        <member name="T:Discord.Rest.StringExtensions">
            <summary>
                Responsible for formatting certain entities as Json <see langword="string"/>, to reuse later on.
            </summary>
        </member>
        <member name="M:Discord.Rest.StringExtensions.ToJsonString(Discord.EmbedBuilder,Newtonsoft.Json.Formatting)">
            <summary>
                Gets a Json formatted <see langword="string"/> from an <see cref="T:Discord.EmbedBuilder"/>.
            </summary>
            <remarks>
                See <see cref="M:Discord.Rest.EmbedBuilderUtils.TryParse(System.String,Discord.EmbedBuilder@)"/> to parse Json back into embed.
            </remarks>
            <param name="builder">The builder to format as Json <see langword="string"/>.</param>
            <param name="formatting">The formatting in which the Json will be returned.</param>
            <returns>A Json <see langword="string"/> containing the data from the <paramref name="builder"/>.</returns>
        </member>
        <member name="M:Discord.Rest.StringExtensions.ToJsonString(Discord.Embed,Newtonsoft.Json.Formatting)">
            <summary>
                Gets a Json formatted <see langword="string"/> from an <see cref="T:Discord.Embed"/>.
            </summary>
            <remarks>
                See <see cref="M:Discord.Rest.EmbedBuilderUtils.TryParse(System.String,Discord.EmbedBuilder@)"/> to parse Json back into embed.
            </remarks>
            <param name="embed">The embed to format as Json <see langword="string"/>.</param>
            <param name="formatting">The formatting in which the Json will be returned.</param>
            <returns>A Json <see langword="string"/> containing the data from the <paramref name="embed"/>.</returns>
        </member>
        <member name="T:Discord.Rest.RestInteractionContext`1">
            <summary>
                Represents a Rest based context of an <see cref="T:Discord.IDiscordInteraction"/>.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestInteractionContext`1.Client">
            <summary>
                Gets the <see cref="T:Discord.Rest.DiscordRestClient"/> that the command will be executed with.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestInteractionContext`1.Guild">
            <summary>
                Gets the <see cref="T:Discord.Rest.RestGuild"/> the command originated from.
            </summary>
            <remarks>
                Will be null if the command is from a DM Channel.
            </remarks>
        </member>
        <member name="P:Discord.Rest.RestInteractionContext`1.Channel">
            <summary>
                Gets the <see cref="T:Discord.Rest.IRestMessageChannel"/> the command originated from.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestInteractionContext`1.User">
            <summary>
                Gets the <see cref="T:Discord.Rest.RestUser"/> who executed the command.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestInteractionContext`1.Interaction">
            <summary>
                Gets the <see cref="T:Discord.Rest.RestInteraction"/> the command was received with.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestInteractionContext`1.InteractionResponseCallback">
            <summary>
                Gets or sets the callback to use when the service has outgoing json for the rest webhook.
            </summary>
            <remarks>
                If this property is <see langword="null"/> the default callback will be used.
            </remarks>
        </member>
        <member name="P:Discord.Rest.RestInteractionContext`1.SegmentMatches">
            <inheritdoc cref="P:Discord.IRouteMatchContainer.SegmentMatches"/>
        </member>
        <member name="M:Discord.Rest.RestInteractionContext`1.#ctor(Discord.Rest.DiscordRestClient,`0)">
            <summary>
                Initializes a new <see cref="T:Discord.Rest.RestInteractionContext`1"/>.
            </summary>
            <param name="client">The underlying client.</param>
            <param name="interaction">The underlying interaction.</param>
        </member>
        <member name="M:Discord.Rest.RestInteractionContext`1.#ctor(Discord.Rest.DiscordRestClient,`0,System.Func{System.String,System.Threading.Tasks.Task})">
            <summary>
                Initializes a new <see cref="T:Discord.Rest.RestInteractionContext`1"/>.
            </summary>
            <param name="client">The underlying client.</param>
            <param name="interaction">The underlying interaction.</param>
            <param name="interactionResponseCallback">The callback for outgoing json.</param>
        </member>
        <member name="M:Discord.Rest.RestInteractionContext`1.SetSegmentMatches(System.Collections.Generic.IEnumerable{Discord.IRouteSegmentMatch})">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestInteractionContext`1.Discord#IRouteMatchContainer#SegmentMatches">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestInteractionContext`1.Discord#IInteractionContext#Client">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestInteractionContext`1.Discord#IInteractionContext#Guild">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestInteractionContext`1.Discord#IInteractionContext#Channel">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestInteractionContext`1.Discord#IInteractionContext#User">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestInteractionContext`1.Discord#IInteractionContext#Interaction">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Rest.RestInteractionContext">
            <summary>
                Represents a Rest based context of an <see cref="T:Discord.IDiscordInteraction"/>.
            </summary>
        </member>
        <member name="M:Discord.Rest.RestInteractionContext.#ctor(Discord.Rest.DiscordRestClient,Discord.Rest.RestInteraction)">
            <summary>
                Initializes a new <see cref="T:Discord.Rest.RestInteractionContext"/>.
            </summary>
            <param name="client">The underlying client.</param>
            <param name="interaction">The underlying interaction.</param>
        </member>
        <member name="M:Discord.Rest.RestInteractionContext.#ctor(Discord.Rest.DiscordRestClient,Discord.Rest.RestInteraction,System.Func{System.String,System.Threading.Tasks.Task})">
            <summary>
                Initializes a new <see cref="T:Discord.Rest.RestInteractionContext"/>.
            </summary>
            <param name="client">The underlying client.</param>
            <param name="interaction">The underlying interaction.</param>
            <param name="interactionResponseCallback">The callback for outgoing json.</param>
        </member>
        <member name="T:Discord.Rest.IRestClientProvider">
            <summary>
                An interface that represents a client provider for Rest-based clients.
            </summary>
        </member>
        <member name="P:Discord.Rest.IRestClientProvider.RestClient">
            <summary>
                Gets the Rest client of this provider.
            </summary>
        </member>
        <member name="M:Discord.Rest.EmbedBuilderUtils.Parse(System.String)">
            <summary>
                Parses a string into an <see cref="T:Discord.EmbedBuilder"/>.
            </summary>
            <param name="json">The json string to parse.</param>
            <returns>An <see cref="T:Discord.EmbedBuilder"/> with populated values from the passed <paramref name="json"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the string passed is not valid json.</exception>
        </member>
        <member name="M:Discord.Rest.EmbedBuilderUtils.TryParse(System.String,Discord.EmbedBuilder@)">
            <summary>
                Tries to parse a string into an <see cref="T:Discord.EmbedBuilder"/>.
            </summary>
            <param name="json">The json string to parse.</param>
            <param name="builder">The <see cref="T:Discord.EmbedBuilder"/> with populated values. An empty instance if method returns <see langword="false"/>.</param>
            <returns><see langword="true"/> if <paramref name="json"/> was successfully parsed. <see langword="false"/> if not.</returns>
        </member>
        <member name="T:Discord.Attachment">
            <inheritdoc cref="T:Discord.IAttachment"/>
        </member>
        <member name="P:Discord.Attachment.Id">
            <inheritdoc />
        </member>
        <member name="P:Discord.Attachment.Filename">
            <inheritdoc />
        </member>
        <member name="P:Discord.Attachment.Url">
            <inheritdoc />
        </member>
        <member name="P:Discord.Attachment.ProxyUrl">
            <inheritdoc />
        </member>
        <member name="P:Discord.Attachment.Size">
            <inheritdoc />
        </member>
        <member name="P:Discord.Attachment.Height">
            <inheritdoc />
        </member>
        <member name="P:Discord.Attachment.Width">
            <inheritdoc />
        </member>
        <member name="P:Discord.Attachment.Ephemeral">
            <inheritdoc />
        </member>
        <member name="P:Discord.Attachment.Description">
            <inheritdoc />
        </member>
        <member name="P:Discord.Attachment.ContentType">
            <inheritdoc />
        </member>
        <member name="P:Discord.Attachment.Waveform">
            <inheritdoc />
        </member>
        <member name="P:Discord.Attachment.Duration">
            <inheritdoc />
        </member>
        <member name="P:Discord.Attachment.ClipParticipants">
            <inheritdoc cref="P:Discord.IAttachment.ClipParticipants" />
        </member>
        <member name="P:Discord.Attachment.Title">
            <inheritdoc />
        </member>
        <member name="P:Discord.Attachment.ClipCreatedAt">
            <inheritdoc />
        </member>
        <member name="P:Discord.Attachment.Flags">
            <inheritdoc />
        </member>
        <member name="P:Discord.Attachment.CreatedAt">
            <inheritdoc />
        </member>
        <member name="M:Discord.Attachment.ToString">
            <summary>
                Returns the filename of this attachment.
            </summary>
            <returns>
                A string containing the filename of this attachment.
            </returns>
        </member>
        <member name="P:Discord.Attachment.Discord#IAttachment#ClipParticipants">
            <inheritdoc />
        </member>
    </members>
</doc>
