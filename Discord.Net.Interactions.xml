<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Discord.Net.Interactions</name>
    </assembly>
    <members>
        <member name="T:Discord.Interactions.AutocompleteAttribute">
            <summary>
                Set the <see cref="P:Discord.ApplicationCommandOptionProperties.IsAutocomplete"/> to <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.AutocompleteAttribute.AutocompleteHandlerType">
            <summary>
                Type of the <see cref="T:Discord.Interactions.AutocompleteHandler"/>.
            </summary>
        </member>
        <member name="M:Discord.Interactions.AutocompleteAttribute.#ctor(System.Type)">
            <summary>
                Set the <see cref="P:Discord.ApplicationCommandOptionProperties.IsAutocomplete"/> to <see langword="true"/> and define a <see cref="T:Discord.Interactions.AutocompleteHandler"/> to handle
                Autocomplete interactions targeting the parameter this <see cref="T:System.Attribute"/> is applied to.
            </summary>
            <remarks>
                <see cref="P:Discord.Interactions.InteractionServiceConfig.EnableAutocompleteHandlers"/> must be set to <see langword="true"/> to use this constructor.
            </remarks>
        </member>
        <member name="M:Discord.Interactions.AutocompleteAttribute.#ctor">
            <summary>
                Set the <see cref="P:Discord.ApplicationCommandOptionProperties.IsAutocomplete"/> to <see langword="true"/> without specifying a <see cref="T:Discord.Interactions.AutocompleteHandler"/>.
            </summary>
        </member>
        <member name="T:Discord.Interactions.AutocompleteAttribute`1">
            <summary>
                Set the <see cref="P:Discord.ApplicationCommandOptionProperties.IsAutocomplete"/> to <see langword="true"/>.
            </summary>
            <typeparam name="T">Type of the <see cref="T:Discord.Interactions.AutocompleteHandler"/> that will be used to handle Autocomplete interactions targeting the parameter.</typeparam>
        </member>
        <member name="M:Discord.Interactions.AutocompleteAttribute`1.#ctor">
            <summary>
                Set the <see cref="P:Discord.ApplicationCommandOptionProperties.IsAutocomplete"/> to <see langword="true"/>.
            </summary>
            <typeparam name="T">Type of the <see cref="T:Discord.Interactions.AutocompleteHandler"/> that will be used to handle Autocomplete interactions targeting the parameter.</typeparam>
        </member>
        <member name="T:Discord.Interactions.ChannelTypesAttribute">
            <summary>
                Specify the target channel types for a <see cref="F:Discord.ApplicationCommandOptionType.Channel"/> option.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ChannelTypesAttribute.ChannelTypes">
            <summary>
                Gets the allowed channel types for this option.
            </summary>
        </member>
        <member name="M:Discord.Interactions.ChannelTypesAttribute.#ctor(Discord.ChannelType[])">
            <summary>
                Specify the target channel types for a <see cref="F:Discord.ApplicationCommandOptionType.Channel"/> option.
            </summary>
            <param name="channelTypes">The allowed channel types for this option.</param>
        </member>
        <member name="T:Discord.Interactions.ChoiceAttribute">
            <summary>
                Add a pre-determined argument value to a command parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ChoiceAttribute.Name">
            <summary>
                Gets the name of the choice.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ChoiceAttribute.Type">
            <summary>
                Gets the type of this choice.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ChoiceAttribute.Value">
            <summary>
                Gets the value that will be used whenever this choice is selected.
            </summary>
        </member>
        <member name="M:Discord.Interactions.ChoiceAttribute.#ctor(System.String,System.String)">
            <summary>
                Create a parameter choice with type <see cref="F:Discord.Interactions.SlashCommandChoiceType.String"/>.
            </summary>
            <param name="name">Name of the choice.</param>
            <param name="value">Predefined value of the choice.</param>
        </member>
        <member name="M:Discord.Interactions.ChoiceAttribute.#ctor(System.String,System.Int32)">
            <summary>
                Create a parameter choice with type <see cref="F:Discord.Interactions.SlashCommandChoiceType.Integer"/>.
            </summary>
            <param name="name">Name of the choice.</param>
            <param name="value">Predefined value of the choice.</param>
        </member>
        <member name="M:Discord.Interactions.ChoiceAttribute.#ctor(System.String,System.Double)">
            <summary>
                Create a parameter choice with type <see cref="F:Discord.Interactions.SlashCommandChoiceType.Number"/>.
            </summary>
            <param name="name">Name of the choice.</param>
            <param name="value">Predefined value of the choice.</param>
        </member>
        <member name="T:Discord.Interactions.CommandContextTypeAttribute">
            <summary>
                Specifies context types this command can be executed in.
            </summary>
        </member>
        <member name="P:Discord.Interactions.CommandContextTypeAttribute.ContextTypes">
            <summary>
                Gets context types this command can be executed in.
            </summary>
        </member>
        <member name="M:Discord.Interactions.CommandContextTypeAttribute.#ctor(Discord.InteractionContextType[])">
            <summary>
                Sets the <see cref="P:Discord.Interactions.IApplicationCommandInfo.ContextTypes"/> property of an application command or module.
            </summary>
            <param name="contextTypes">Context types set for the command.</param>
        </member>
        <member name="T:Discord.Interactions.AutocompleteCommandAttribute">
            <summary>
                Create an Autocomplete Command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.AutocompleteCommandAttribute.ParameterName">
            <summary>
                Gets the name of the target parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.AutocompleteCommandAttribute.CommandName">
            <summary>
                Gets the name of the target command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.AutocompleteCommandAttribute.RunMode">
            <summary>
                Get the run mode this command gets executed with.
            </summary>
        </member>
        <member name="M:Discord.Interactions.AutocompleteCommandAttribute.#ctor(System.String,System.String,Discord.Interactions.RunMode)">
            <summary>
                Create a command for Autocomplete interaction handling.
            </summary>
            <param name="parameterName">Name of the target parameter.</param>
            <param name="commandName">Name of the target command.</param>
            <param name="runMode">Set the run mode of the command.</param>
        </member>
        <member name="T:Discord.Interactions.ComponentInteractionAttribute">
            <summary>
                Create a Message Component interaction handler, CustomId represents
                the CustomId of the Message Component that will be handled.
            </summary>
            <remarks>
                <see cref="T:Discord.Interactions.GroupAttribute"/>s will add prefixes to this command if <see cref="P:Discord.Interactions.ComponentInteractionAttribute.IgnoreGroupNames"/> is set to <see langword="false"/>
                CustomID supports a Wild Card pattern where you can use the <see cref="P:Discord.Interactions.InteractionServiceConfig.WildCardExpression"/> to match a set of CustomIDs.
            </remarks>
        </member>
        <member name="P:Discord.Interactions.ComponentInteractionAttribute.CustomId">
            <summary>
                Gets the string to compare the Message Component CustomIDs with.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ComponentInteractionAttribute.IgnoreGroupNames">
            <summary>
                Gets <see langword="true"/> if <see cref="T:Discord.Interactions.GroupAttribute"/>s will be ignored while creating this command and this method will be treated as a top level command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ComponentInteractionAttribute.RunMode">
            <summary>
                Gets the run mode this command gets executed with.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ComponentInteractionAttribute.TreatAsRegex">
            <summary>
                Gets or sets whether the <see cref="P:Discord.Interactions.ComponentInteractionAttribute.CustomId"/> should be treated as a raw Regex pattern.
            </summary>
            <remarks>
                <see langword="false"/> defaults to the pattern used before 3.9.0.
            </remarks>
        </member>
        <member name="M:Discord.Interactions.ComponentInteractionAttribute.#ctor(System.String,System.Boolean,Discord.Interactions.RunMode)">
            <summary>
                Create a command for component interaction handling.
            </summary>
            <param name="customId">String to compare the Message Component CustomIDs with.</param>
            <param name="ignoreGroupNames">If <see langword="true"/> <see cref="T:Discord.Interactions.GroupAttribute"/>s will be ignored while creating this command and this method will be treated as a top level command.</param>
            <param name="runMode">Set the run mode of the command.</param>
        </member>
        <member name="T:Discord.Interactions.ContextCommandAttribute">
            <summary>
                Base attribute for creating a Context Commands.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ContextCommandAttribute.Name">
            <summary>
                Gets the name of this Context Command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ContextCommandAttribute.CommandType">
            <summary>
                Gets the type of this Context Command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ContextCommandAttribute.RunMode">
            <summary>
                Gets the run mode this command gets executed with.
            </summary>
        </member>
        <member name="T:Discord.Interactions.MessageCommandAttribute">
            <summary>
                Create a Message Context Command.
            </summary>
            <remarks>
                <see cref="T:Discord.Interactions.GroupAttribute"/>s won't add prefixes to this command.
            </remarks>
        </member>
        <member name="M:Discord.Interactions.MessageCommandAttribute.#ctor(System.String)">
            <summary>
                Register a method as a Message Context Command.
            </summary>
            <param name="name">Name of the context command.</param>
        </member>
        <member name="T:Discord.Interactions.ModalInteractionAttribute">
            <summary>
                Create a Modal interaction handler. CustomId represents
                the CustomId of the Modal that will be handled.
            </summary>
            <remarks>
                <see cref="T:Discord.Interactions.GroupAttribute"/>s will add prefixes to this command if <see cref="P:Discord.Interactions.ModalInteractionAttribute.IgnoreGroupNames"/> is set to <see langword="false"/>
                CustomID supports a Wild Card pattern where you can use the <see cref="P:Discord.Interactions.InteractionServiceConfig.WildCardExpression"/> to match a set of CustomIDs.
            </remarks>
        </member>
        <member name="P:Discord.Interactions.ModalInteractionAttribute.CustomId">
            <summary>
                Gets the string to compare the Modal CustomIDs with.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModalInteractionAttribute.IgnoreGroupNames">
            <summary>
                Gets <see langword="true"/> if <see cref="T:Discord.Interactions.GroupAttribute"/>s will be ignored while creating this command and this method will be treated as a top level command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModalInteractionAttribute.RunMode">
            <summary>
                Gets the run mode this command gets executed with.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModalInteractionAttribute.TreatAsRegex">
            <summary>
                Gets or sets whether the <see cref="P:Discord.Interactions.ModalInteractionAttribute.CustomId"/> should be treated as a raw Regex pattern.
            </summary>
            <remarks>
                <see langword="false"/> defaults to the pattern used before 3.9.0.
            </remarks>
        </member>
        <member name="M:Discord.Interactions.ModalInteractionAttribute.#ctor(System.String,System.Boolean,Discord.Interactions.RunMode)">
            <summary>
                Create a command for modal interaction handling.
            </summary>
            <param name="customId">String to compare the modal CustomIDs with.</param>
            <param name="ignoreGroupNames">If <see langword="true"/> <see cref="T:Discord.Interactions.GroupAttribute"/>s will be ignored while creating this command and this method will be treated as a top level command.</param>
            <param name="runMode">Set the run mode of the command.</param>
        </member>
        <member name="T:Discord.Interactions.SlashCommandAttribute">
            <summary>
                Create an Slash Application Command.
            </summary>
            <remarks>
                <see cref="T:Discord.Interactions.GroupAttribute"/> prefix will be used to created nested Slash Application Commands.
            </remarks>
        </member>
        <member name="P:Discord.Interactions.SlashCommandAttribute.Name">
            <summary>
                Gets the name of the Slash Command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.SlashCommandAttribute.Description">
            <summary>
                Gets the description of the Slash Command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.SlashCommandAttribute.IgnoreGroupNames">
            <summary>
                Gets <see langword="true"/> if <see cref="T:Discord.Interactions.GroupAttribute"/>s will be ignored while creating this command and this method will be treated as a top level command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.SlashCommandAttribute.RunMode">
            <summary>
                Gets the run mode this command gets executed with.
            </summary>
        </member>
        <member name="M:Discord.Interactions.SlashCommandAttribute.#ctor(System.String,System.String,System.Boolean,Discord.Interactions.RunMode)">
            <summary>
                Register a method as a Slash Command.
            </summary>
            <param name="name">Name of the command.</param>
            <param name="description">Description of the command.</param>
            <param name="ignoreGroupNames"> If <see langword="true"/>, <see cref="T:Discord.Interactions.GroupAttribute"/>s will be ignored while creating this command and this method will be treated as a top level command.</param>
            <param name="runMode">Set the run mode of the command.</param>
        </member>
        <member name="T:Discord.Interactions.UserCommandAttribute">
            <summary>
                Create an User Context Command.
            </summary>
            <remarks>
                <see cref="T:Discord.Interactions.GroupAttribute"/>s won't add prefixes to this command.
            </remarks>
        </member>
        <member name="M:Discord.Interactions.UserCommandAttribute.#ctor(System.String)">
            <summary>
                Register a command as a User Context Command.
            </summary>
            <param name="name">Name of this User Context Command.</param>
        </member>
        <member name="T:Discord.Interactions.ComplexParameterAttribute">
            <summary>
                Registers a parameter as a complex parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ComplexParameterAttribute.PrioritizedCtorSignature">
            <summary>
                Gets the parameter array of the constructor method that should be prioritized.
            </summary>
        </member>
        <member name="M:Discord.Interactions.ComplexParameterAttribute.#ctor">
            <summary>
                Registers a slash command parameter as a complex parameter.
            </summary>
        </member>
        <member name="M:Discord.Interactions.ComplexParameterAttribute.#ctor(System.Type[])">
            <summary>
                Registers a slash command parameter as a complex parameter with a specified constructor signature.
            </summary>
            <param name="types">Type array of the preferred constructor parameters.</param>
        </member>
        <member name="T:Discord.Interactions.ComplexParameterCtorAttribute">
            <summary>
                Tag a type constructor as the preferred Complex command constructor.
            </summary>
        </member>
        <member name="T:Discord.Interactions.DefaultMemberPermissionsAttribute">
            <summary>
                Sets the <see cref="P:Discord.Interactions.IApplicationCommandInfo.DefaultMemberPermissions"/> of an application command or module.
            </summary>
        </member>
        <member name="P:Discord.Interactions.DefaultMemberPermissionsAttribute.Permissions">
            <summary>
                Gets the default permission required to use this command.
            </summary>
        </member>
        <member name="M:Discord.Interactions.DefaultMemberPermissionsAttribute.#ctor(Discord.GuildPermission)">
            <summary>
                Sets the <see cref="P:Discord.Interactions.IApplicationCommandInfo.DefaultMemberPermissions"/> of an application command or module.
            </summary>
            <param name="permissions">The default permission required to use this command.</param>
        </member>
        <member name="T:Discord.Interactions.DefaultPermissionAttribute">
            <summary>
                Set the "Default Permission" property of an Application Command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.DefaultPermissionAttribute.IsDefaultPermission">
            <summary>
                Gets whether the users are allowed to use a Slash Command by default or not.
            </summary>
        </member>
        <member name="M:Discord.Interactions.DefaultPermissionAttribute.#ctor(System.Boolean)">
            <summary>
                Set the default permission of a Slash Command.
            </summary>
            <param name="isDefaultPermission"><see langword="true"/> if the users are allowed to use this command.</param>
        </member>
        <member name="T:Discord.Interactions.DontAutoRegisterAttribute">
            <summary>
                <see cref="T:Discord.Interactions.InteractionModuleBase`1"/>s with this attribute will not be registered by the <see cref="M:Discord.Interactions.InteractionService.RegisterCommandsGloballyAsync(System.Boolean)"/> or
                <see cref="M:Discord.Interactions.InteractionService.RegisterCommandsToGuildAsync(System.UInt64,System.Boolean)"/> methods.
            </summary>
        </member>
        <member name="T:Discord.Interactions.EnabledInDmAttribute">
            <summary>
                Sets the <see cref="P:Discord.Interactions.IApplicationCommandInfo.IsEnabledInDm"/> property of an application command or module.
            </summary>
        </member>
        <member name="P:Discord.Interactions.EnabledInDmAttribute.IsEnabled">
            <summary>
                Gets whether or not this command can be used in DMs.
            </summary>
        </member>
        <member name="M:Discord.Interactions.EnabledInDmAttribute.#ctor(System.Boolean)">
            <summary>
                Sets the <see cref="P:Discord.Interactions.IApplicationCommandInfo.IsEnabledInDm"/> property of an application command or module.
            </summary>
            <param name="isEnabled">Whether or not this command can be used in DMs.</param>
        </member>
        <member name="T:Discord.Interactions.ChoiceDisplayAttribute">
            <summary>
                Customize the displayed value of a slash command choice enum. Only works with the default enum type converter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ChoiceDisplayAttribute.Name">
            <summary>
                Gets the name of the parameter.
            </summary>
        </member>
        <member name="M:Discord.Interactions.ChoiceDisplayAttribute.#ctor(System.String)">
            <summary>
                Modify the default name and description values of a Slash Command parameter.
            </summary>
            <param name="name">Name of the parameter.</param>
        </member>
        <member name="T:Discord.Interactions.GroupAttribute">
            <summary>
                Create nested Slash Commands by marking a module as a command group.
            </summary>
            <remarks>
                <see cref="T:Discord.Interactions.ContextCommandAttribute"/> commands wil not be affected by this.
            </remarks>
        </member>
        <member name="P:Discord.Interactions.GroupAttribute.Name">
            <summary>
                Gets the name of the group.
            </summary>
        </member>
        <member name="P:Discord.Interactions.GroupAttribute.Description">
            <summary>
                Gets the description of the group.
            </summary>
        </member>
        <member name="M:Discord.Interactions.GroupAttribute.#ctor(System.String,System.String)">
            <summary>
                Create a command group.
            </summary>
            <param name="name">Name of the group.</param>
            <param name="description">Description of the group.</param>
        </member>
        <member name="T:Discord.Interactions.IntegrationTypeAttribute">
            <summary>
                Specifies install method for the command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.IntegrationTypeAttribute.IntegrationTypes">
            <summary>
                Gets integration install types for this command.
            </summary>
        </member>
        <member name="M:Discord.Interactions.IntegrationTypeAttribute.#ctor(Discord.ApplicationIntegrationType[])">
            <summary>
                Sets the <see cref="P:Discord.Interactions.IApplicationCommandInfo.IntegrationTypes"/> property of an application command or module.
            </summary>
            <param name="integrationTypes">Integration install types set for the command.</param>
        </member>
        <member name="T:Discord.Interactions.MaxLengthAttribute">
            <summary>
                Sets the maximum length allowed for a string type parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.MaxLengthAttribute.Length">
            <summary>
                Gets the maximum length allowed for a string type parameter.
            </summary>
        </member>
        <member name="M:Discord.Interactions.MaxLengthAttribute.#ctor(System.Int32)">
            <summary>
                Sets the maximum length allowed for a string type parameter.
            </summary>
            <param name="length">Maximum string length allowed.</param>
        </member>
        <member name="T:Discord.Interactions.MaxValueAttribute">
            <summary>
                Set the maximum value permitted for a number type parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.MaxValueAttribute.Value">
            <summary>
                Gets the maximum value permitted.
            </summary>
        </member>
        <member name="M:Discord.Interactions.MaxValueAttribute.#ctor(System.Double)">
            <summary>
                Set the maximum value permitted for a number type parameter.
            </summary>
            <param name="value">The maximum value permitted.</param>
        </member>
        <member name="T:Discord.Interactions.MinLengthAttribute">
            <summary>
                Sets the minimum length allowed for a string type parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.MinLengthAttribute.Length">
            <summary>
                Gets the minimum length allowed for a string type parameter.
            </summary>
        </member>
        <member name="M:Discord.Interactions.MinLengthAttribute.#ctor(System.Int32)">
            <summary>
                Sets the minimum length allowed for a string type parameter.
            </summary>
            <param name="length">Minimum string length allowed.</param>
        </member>
        <member name="T:Discord.Interactions.MinValueAttribute">
            <summary>
                Set the minimum value permitted for a number type parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.MinValueAttribute.Value">
            <summary>
                Gets the minimum value permitted.
            </summary>
        </member>
        <member name="M:Discord.Interactions.MinValueAttribute.#ctor(System.Double)">
            <summary>
                Set the minimum value permitted for a number type parameter.
            </summary>
            <param name="value">The minimum value permitted.</param>
        </member>
        <member name="T:Discord.Interactions.InputLabelAttribute">
            <summary>
                Creates a custom label for an modal input.
            </summary>
        </member>
        <member name="P:Discord.Interactions.InputLabelAttribute.Label">
            <summary>
                Gets the label of the input.
            </summary>
        </member>
        <member name="M:Discord.Interactions.InputLabelAttribute.#ctor(System.String)">
            <summary>
                Creates a custom label for an modal input.
            </summary>
            <param name="label">The label of the input.</param>
        </member>
        <member name="T:Discord.Interactions.ModalInputAttribute">
            <summary>
                Mark an <see cref="T:Discord.Interactions.IModal"/> property as a modal input field.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModalInputAttribute.CustomId">
            <summary>
                Gets the custom id of the text input.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModalInputAttribute.ComponentType">
            <summary>
                Gets the type of the component.
            </summary>
        </member>
        <member name="M:Discord.Interactions.ModalInputAttribute.#ctor(System.String)">
            <summary>
                Create a new <see cref="T:Discord.Interactions.ModalInputAttribute"/>.
            </summary>
            <param name="customId">The custom id of the input.</param>
        </member>
        <member name="T:Discord.Interactions.ModalTextInputAttribute">
            <summary>
                Marks a <see cref="T:Discord.Interactions.IModal"/> property as a text input.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModalTextInputAttribute.ComponentType">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.ModalTextInputAttribute.Style">
            <summary>
                Gets the style of the text input.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModalTextInputAttribute.Placeholder">
            <summary>
                Gets the placeholder of the text input.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModalTextInputAttribute.MinLength">
            <summary>
                Gets the minimum length of the text input.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModalTextInputAttribute.MaxLength">
            <summary>
                Gets the maximum length of the text input.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModalTextInputAttribute.InitialValue">
            <summary>
                Gets the initial value to be displayed by this input.
            </summary>
        </member>
        <member name="M:Discord.Interactions.ModalTextInputAttribute.#ctor(System.String,Discord.TextInputStyle,System.String,System.Int32,System.Int32,System.String)">
            <summary>
                Create a new <see cref="T:Discord.Interactions.ModalTextInputAttribute"/>.
            </summary>
            <param name="customId">The custom id of the text input.></param>
            <param name="style">The style of the text input.</param>
            <param name="placeholder">The placeholder of the text input.</param>
            <param name="minLength">The minimum length of the text input's content.</param>
            <param name="maxLength">The maximum length of the text input's content.</param>
            <param name="initValue">The initial value to be displayed by this input.</param>
        </member>
        <member name="T:Discord.Interactions.RequiredInputAttribute">
            <summary>
                Sets the input as required or optional.
            </summary>
        </member>
        <member name="P:Discord.Interactions.RequiredInputAttribute.IsRequired">
            <summary>
                Gets whether or not user input is required for this input.
            </summary>
        </member>
        <member name="M:Discord.Interactions.RequiredInputAttribute.#ctor(System.Boolean)">
            <summary>
                Sets the input as required or optional.
            </summary>
            <param name="isRequired">Whether or not user input is required for this input.</param>
        </member>
        <member name="T:Discord.Interactions.NsfwCommandAttribute">
            <summary>
                Sets the <see cref="P:Discord.Interactions.IApplicationCommandInfo.IsNsfw"/> property of an application command or module.
            </summary>
        </member>
        <member name="P:Discord.Interactions.NsfwCommandAttribute.IsNsfw">
            <summary>
                Gets whether or not this command is age restricted.
            </summary>
        </member>
        <member name="M:Discord.Interactions.NsfwCommandAttribute.#ctor(System.Boolean)">
            <summary>
                Sets the <see cref="P:Discord.Interactions.IApplicationCommandInfo.IsNsfw"/> property of an application command or module.
            </summary>
            <param name="isNsfw">Whether or not this command is age restricted.</param>
        </member>
        <member name="T:Discord.Interactions.ParameterPreconditionAttribute">
            <summary>
                Requires the parameter to pass the specified precondition before execution can begin.
            </summary>
            <seealso cref="T:Discord.Interactions.PreconditionAttribute"/>
        </member>
        <member name="P:Discord.Interactions.ParameterPreconditionAttribute.ErrorMessage">
            <summary>
                Gets the error message to be returned if execution context doesn't pass the precondition check.
            </summary>
            <remarks>
                When overridden in a derived class, uses the supplied string
                as the error message if the precondition doesn't pass.
                Setting this for a class that doesn't override
                this property is a no-op.
            </remarks>
        </member>
        <member name="M:Discord.Interactions.ParameterPreconditionAttribute.CheckRequirementsAsync(Discord.IInteractionContext,Discord.Interactions.IParameterInfo,System.Object,System.IServiceProvider)">
            <summary>
                Checks whether the condition is met before execution of the command.
            </summary>
            <param name="context">The context of the command.</param>
            <param name="parameterInfo">The parameter of the command being checked against.</param>
            <param name="value">The raw value of the parameter.</param>
            <param name="services">The service collection used for dependency injection.</param>
        </member>
        <member name="T:Discord.Interactions.PreconditionAttribute">
            <summary>
                Requires the module or class to pass the specified precondition before execution can begin.
            </summary>
            <seealso cref="T:Discord.Interactions.ParameterPreconditionAttribute"/>
        </member>
        <member name="P:Discord.Interactions.PreconditionAttribute.Group">
            <summary>
                Gets the group that this precondition belongs to.
            </summary>
            <remarks>
                <see cref="T:Discord.Preconditions" /> of the same group require only one of the preconditions to pass in order to
                be successful (A || B). Specifying <see cref="P:Discord.Interactions.PreconditionAttribute.Group" /> = <see langword="null" /> or not at all will
                require *all* preconditions to pass, just like normal (A &amp;&amp; B).
            </remarks>
        </member>
        <member name="P:Discord.Interactions.PreconditionAttribute.ErrorMessage">
            <summary>
                Gets the error message to be returned if execution context doesn't pass the precondition check.
            </summary>
            <remarks>
                When overridden in a derived class, uses the supplied string
                as the error message if the precondition doesn't pass.
                Setting this for a class that doesn't override
                this property is a no-op.
            </remarks>
        </member>
        <member name="M:Discord.Interactions.PreconditionAttribute.CheckRequirementsAsync(Discord.IInteractionContext,Discord.Interactions.ICommandInfo,System.IServiceProvider)">
            <summary>
                Checks if the <paramref name="commandInfo"/> command to be executed meets the precondition requirements.
            </summary>
            <param name="context">The context of the command.</param>
            <param name="commandInfo">The command being executed.</param>
            <param name="services">The service collection used for dependency injection.</param>
        </member>
        <member name="T:Discord.Interactions.DoHierarchyCheckAttribute">
            <summary>
                Ensures that command parameters are passed within a correct hierarchical context.
            </summary>
            <remarks>
                Useful for performing hierarchical operations within a guild, such as managing roles or users.
                <note type="warning">
                    This supports <see cref="T:Discord.IRole"/>, <see cref="T:Discord.IGuildUser"/>, and <see cref="T:Discord.IUser"/> parameter types.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when the parameter type is not supported by this precondition attribute.
            </exception>
            <seealso cref="T:Discord.Interactions.RequireRoleAttribute"/>
            <seealso cref="T:Discord.Interactions.RequireBotPermissionAttribute"/>
            <seealso cref="T:Discord.Interactions.RequireUserPermissionAttribute"/>
        </member>
        <member name="P:Discord.Interactions.DoHierarchyCheckAttribute.NotAGuildErrorMessage">
            <summary>
                Gets or sets the error message displayed when the command is used outside of a guild.
            </summary>
        </member>
        <member name="P:Discord.Interactions.DoHierarchyCheckAttribute.ErrorMessage">
            <inheritdoc />
        </member>
        <member name="M:Discord.Interactions.DoHierarchyCheckAttribute.CheckRequirementsAsync(Discord.IInteractionContext,Discord.Interactions.IParameterInfo,System.Object,System.IServiceProvider)">
            <inheritdoc />
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when the parameter type is not supported by this precondition attribute.
            </exception>
        </member>
        <member name="T:Discord.Interactions.RequireBotPermissionAttribute">
            <summary>
                Requires the bot to have a specific permission in the channel a command is invoked in.
            </summary>
        </member>
        <member name="P:Discord.Interactions.RequireBotPermissionAttribute.GuildPermission">
            <summary>
                Gets the specified <see cref="T:Discord.GuildPermission" /> of the precondition.
            </summary>
        </member>
        <member name="P:Discord.Interactions.RequireBotPermissionAttribute.ChannelPermission">
            <summary>
                Gets the specified <see cref="T:Discord.ChannelPermission" /> of the precondition.
            </summary>
        </member>
        <member name="P:Discord.Interactions.RequireBotPermissionAttribute.NotAGuildErrorMessage">
            <summary>
                Gets or sets the error message if the precondition
                fails due to being run outside of a Guild channel.
            </summary>
        </member>
        <member name="M:Discord.Interactions.RequireBotPermissionAttribute.#ctor(Discord.GuildPermission)">
            <summary>
                Requires the bot account to have a specific <see cref="T:Discord.GuildPermission"/>.
            </summary>
            <remarks>
                This precondition will always fail if the command is being invoked in a <see cref="T:Discord.IPrivateChannel"/>.
            </remarks>
            <param name="permission">
                The <see cref="T:Discord.GuildPermission"/> that the bot must have. Multiple permissions can be specified
                by ORing the permissions together.
            </param>
        </member>
        <member name="M:Discord.Interactions.RequireBotPermissionAttribute.#ctor(Discord.ChannelPermission)">
            <summary>
                Requires that the bot account to have a specific <see cref="T:Discord.ChannelPermission"/>.
            </summary>
            <param name="permission">
                The <see cref="T:Discord.ChannelPermission"/> that the bot must have. Multiple permissions can be
                specified by ORing the permissions together.
            </param>
        </member>
        <member name="M:Discord.Interactions.RequireBotPermissionAttribute.CheckRequirementsAsync(Discord.IInteractionContext,Discord.Interactions.ICommandInfo,System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="T:Discord.Interactions.ContextType">
            <summary>
                Defines the type of command context (i.e. where the command is being executed).
            </summary>
        </member>
        <member name="F:Discord.Interactions.ContextType.Guild">
            <summary>
                Specifies the command to be executed within a guild.
            </summary>
        </member>
        <member name="F:Discord.Interactions.ContextType.DM">
            <summary>
                Specifies the command to be executed within a DM.
            </summary>
        </member>
        <member name="F:Discord.Interactions.ContextType.Group">
            <summary>
                Specifies the command to be executed within a group.
            </summary>
        </member>
        <member name="T:Discord.Interactions.RequireContextAttribute">
            <summary>
                Requires the command to be invoked in a specified context (e.g. in guild, DM).
            </summary>
        </member>
        <member name="P:Discord.Interactions.RequireContextAttribute.Contexts">
            <summary>
                Gets the context required to execute the command.
            </summary>
        </member>
        <member name="M:Discord.Interactions.RequireContextAttribute.#ctor(Discord.Interactions.ContextType)">
            <summary> Requires the command to be invoked in the specified context. </summary>
            <param name="contexts">The type of context the command can be invoked in. Multiple contexts can be specified by ORing the contexts together.</param>
            <example>
            <code language="cs">
                [Command("secret")]
                [RequireContext(ContextType.DM | ContextType.Group)]
                public Task PrivateOnlyAsync()
                {
                    return ReplyAsync("shh, this command is a secret");
                }
            </code>
            </example>
        </member>
        <member name="M:Discord.Interactions.RequireContextAttribute.CheckRequirementsAsync(Discord.IInteractionContext,Discord.Interactions.ICommandInfo,System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="T:Discord.Interactions.RequireNsfwAttribute">
             <summary>
                 Requires the command to be invoked in a channel marked NSFW.
             </summary>
             <remarks>
                 The precondition will restrict the access of the command or module to be accessed within a guild channel
                 that has been marked as mature or NSFW. If the channel is not of type <see cref="T:Discord.ITextChannel"/> or the
                 channel is not marked as NSFW, the precondition will fail with an erroneous <see cref="T:Discord.Interactions.PreconditionResult"/>.
             </remarks>
             <example>
                 The following example restricts the command <c>too-cool</c> to an NSFW-enabled channel only.
                 <code language="cs">
                 public class DankModule : ModuleBase
                 {
                     [Command("cool")]
                     public Task CoolAsync()
                         => ReplyAsync("I'm cool for everyone.");
            
                     [RequireNsfw]
                     [Command("too-cool")]
                     public Task TooCoolAsync()
                         => ReplyAsync("You can only see this if you're cool enough.");
                 }
                 </code>
             </example>
        </member>
        <member name="M:Discord.Interactions.RequireNsfwAttribute.CheckRequirementsAsync(Discord.IInteractionContext,Discord.Interactions.ICommandInfo,System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="T:Discord.Interactions.RequireOwnerAttribute">
            <summary>
                Requires the command to be invoked by the owner of the bot.
            </summary>
            <remarks>
                This precondition will restrict the access of the command or module to the owner of the Discord application.
                If the precondition fails to be met, an erroneous <see cref="T:Discord.Interactions.PreconditionResult"/> will be returned with the
                message "Command can only be run by the owner of the bot."
                <note>
                This precondition will only work if the account has a <see cref="T:Discord.TokenType"/> of <see cref="F:Discord.TokenType.Bot"/>
                ;otherwise, this precondition will always fail.
                </note>
            </remarks>
        </member>
        <member name="M:Discord.Interactions.RequireOwnerAttribute.CheckRequirementsAsync(Discord.IInteractionContext,Discord.Interactions.ICommandInfo,System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="T:Discord.Interactions.RequireRoleAttribute">
            <summary>
                Requires the user invoking the command to have a specified role.
            </summary>
        </member>
        <member name="P:Discord.Interactions.RequireRoleAttribute.RoleName">
            <summary>
                Gets the specified Role name of the precondition.
            </summary>
        </member>
        <member name="P:Discord.Interactions.RequireRoleAttribute.RoleId">
            <summary>
                Gets the specified Role ID of the precondition.
            </summary>
        </member>
        <member name="P:Discord.Interactions.RequireRoleAttribute.NotAGuildErrorMessage">
            <summary>
                Gets or sets the error message if the precondition
                fails due to being run outside of a Guild channel.
            </summary>
        </member>
        <member name="M:Discord.Interactions.RequireRoleAttribute.#ctor(System.UInt64)">
            <summary>
                Requires that the user invoking the command to have a specific Role.
            </summary>
            <param name="roleId">Id of the role that the user must have.</param>
        </member>
        <member name="M:Discord.Interactions.RequireRoleAttribute.#ctor(System.String)">
            <summary>
                Requires that the user invoking the command to have a specific Role.
            </summary>
            <param name="roleName">Name of the role that the user must have.</param>
        </member>
        <member name="M:Discord.Interactions.RequireRoleAttribute.CheckRequirementsAsync(Discord.IInteractionContext,Discord.Interactions.ICommandInfo,System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="T:Discord.Interactions.RequireTeamAttribute">
            <summary>
                Requires the command to be invoked by a member of the team that owns the bot.
            </summary>
            <remarks>
                This precondition will restrict the access of the command or module to the a member of the team of the Discord application, narrowed to specific team roles if specified.
                If the precondition fails to be met, an erroneous <see cref="T:Discord.Interactions.PreconditionResult"/> will be returned with the
                message "Command can only be run by a member of the bot's team."
                <note>
                This precondition will only work if the account has a <see cref="T:Discord.TokenType"/> of <see cref="F:Discord.TokenType.Bot"/>
                ;otherwise, this precondition will always fail.
                </note>
            </remarks>
        </member>
        <member name="P:Discord.Interactions.RequireTeamAttribute.TeamRoles">
            <summary>
                 The team roles to require. Valid values: "*", "admin", "developer", or "read_only"
            </summary>
        </member>
        <member name="M:Discord.Interactions.RequireTeamAttribute.#ctor(System.String[])">
            <summary>
                Requires that the user invoking the command to have a specific team role.
            </summary>
            <param name="teamRoles">The team roles to require. Valid values: "*", "admin", "developer", or "read_only"</param>
        </member>
        <member name="M:Discord.Interactions.RequireTeamAttribute.CheckRequirementsAsync(Discord.IInteractionContext,Discord.Interactions.ICommandInfo,System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="T:Discord.Interactions.RequireUserPermissionAttribute">
            <summary>
                Requires the user invoking the command to have a specified permission.
            </summary>
        </member>
        <member name="P:Discord.Interactions.RequireUserPermissionAttribute.GuildPermission">
            <summary>
                Gets the specified <see cref="T:Discord.GuildPermission" /> of the precondition.
            </summary>
        </member>
        <member name="P:Discord.Interactions.RequireUserPermissionAttribute.ChannelPermission">
            <summary>
                Gets the specified <see cref="T:Discord.ChannelPermission" /> of the precondition.
            </summary>
        </member>
        <member name="P:Discord.Interactions.RequireUserPermissionAttribute.NotAGuildErrorMessage">
            <summary>
                Gets or sets the error message if the precondition
                fails due to being run outside of a Guild channel.
            </summary>
        </member>
        <member name="M:Discord.Interactions.RequireUserPermissionAttribute.#ctor(Discord.GuildPermission)">
            <summary>
                Requires that the user invoking the command to have a specific <see cref="T:Discord.GuildPermission"/>.
            </summary>
            <remarks>
                This precondition will always fail if the command is being invoked in a <see cref="T:Discord.IPrivateChannel"/>.
            </remarks>
            <param name="guildPermission">
                The <see cref="T:Discord.GuildPermission" /> that the user must have. Multiple permissions can be
                specified by ORing the permissions together.
            </param>
        </member>
        <member name="M:Discord.Interactions.RequireUserPermissionAttribute.#ctor(Discord.ChannelPermission)">
            <summary>
                Requires that the user invoking the command to have a specific <see cref="T:Discord.ChannelPermission"/>.
            </summary>
            <param name="channelPermission">
                The <see cref="T:Discord.ChannelPermission"/> that the user must have. Multiple permissions can be
                specified by ORing the permissions together.
            </param>
        </member>
        <member name="M:Discord.Interactions.RequireUserPermissionAttribute.CheckRequirementsAsync(Discord.IInteractionContext,Discord.Interactions.ICommandInfo,System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="T:Discord.Interactions.SummaryAttribute">
            <summary>
                Customize the name and description of an Slash Application Command parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.SummaryAttribute.Name">
            <summary>
                Gets the name of the parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.SummaryAttribute.Description">
            <summary>
                Gets the description of the parameter.
            </summary>
        </member>
        <member name="M:Discord.Interactions.SummaryAttribute.#ctor(System.String,System.String)">
            <summary>
                Modify the default name and description values of a Slash Command parameter.
            </summary>
            <param name="name">Name of the parameter.</param>
            <param name="description">Description of the parameter.</param>
        </member>
        <member name="T:Discord.Interactions.AutocompleteHandler">
            <summary>
                Base class for creating Autocompleters. <see cref="P:Discord.Interactions.AutocompleteHandler.InteractionService"/> uses Autocompleters to generate parameter suggestions.
            </summary>
        </member>
        <member name="P:Discord.Interactions.AutocompleteHandler.InteractionService">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.AutocompleteHandler.GenerateSuggestionsAsync(Discord.IInteractionContext,Discord.IAutocompleteInteraction,Discord.Interactions.IParameterInfo,System.IServiceProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.AutocompleteHandler.ExecuteAsync(Discord.IInteractionContext,Discord.IAutocompleteInteraction,Discord.Interactions.IParameterInfo,System.IServiceProvider)">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Interactions.IAutocompleteHandler">
            <summary>
                Represent a Autocomplete handler object that can be executed to generate parameter suggestions.
            </summary>
        </member>
        <member name="P:Discord.Interactions.IAutocompleteHandler.InteractionService">
            <summary>
                Gets the the underlying command service.
            </summary>
        </member>
        <member name="M:Discord.Interactions.IAutocompleteHandler.GenerateSuggestionsAsync(Discord.IInteractionContext,Discord.IAutocompleteInteraction,Discord.Interactions.IParameterInfo,System.IServiceProvider)">
            <summary>
                Will be used to generate parameter suggestions.
            </summary>
            <param name="context">Command execution context.</param>
            <param name="autocompleteInteraction">Autocomplete Interaction payload.</param>
            <param name="parameter">Parameter information of the target parameter.</param>
            <param name="services">Dependencies that will be used to create the module instance.</param>
            <returns>
                A task representing the execution process. The task result contains the Autocompletion result.
            </returns>
        </member>
        <member name="M:Discord.Interactions.IAutocompleteHandler.ExecuteAsync(Discord.IInteractionContext,Discord.IAutocompleteInteraction,Discord.Interactions.IParameterInfo,System.IServiceProvider)">
            <summary>
                Executes the <see cref="T:Discord.Interactions.IAutocompleteHandler"/> with the provided context.
            </summary>
            <param name="context">The execution context.</param>
            <param name="autocompleteInteraction">AutocompleteInteraction payload.</param>
            <param name="parameter">Parameter information of the target parameter.</param>
            <param name="services">Dependencies that will be used to create the module instance.</param>
            <returns>
                A task representing the execution process. The task result contains the execution result.
            </returns>
        </member>
        <member name="T:Discord.Interactions.Builders.AutocompleteCommandBuilder">
            <summary>
                Represents a builder for creating <see cref="T:Discord.Interactions.AutocompleteCommandInfo"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.AutocompleteCommandBuilder.ParameterName">
            <summary>
                Gets the name of the target parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.AutocompleteCommandBuilder.CommandName">
            <summary>
                Gets the name of the target command.
            </summary>
        </member>
        <member name="M:Discord.Interactions.Builders.AutocompleteCommandBuilder.#ctor(Discord.Interactions.Builders.ModuleBuilder,System.String,Discord.Interactions.ExecuteCallback)">
            <summary>
                Initializes a new <see cref="T:Discord.Interactions.Builders.AutocompleteCommandBuilder"/>.
            </summary>
            <param name="module">Parent module of this command.</param>
            <param name="name">Name of this command.</param>
            <param name="callback">Execution callback of this command.</param>
        </member>
        <member name="M:Discord.Interactions.Builders.AutocompleteCommandBuilder.WithParameterName(System.String)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.AutocompleteCommandBuilder.ParameterName"/>.
            </summary>
            <param name="name">New value of the <see cref="P:Discord.Interactions.Builders.AutocompleteCommandBuilder.ParameterName"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.AutocompleteCommandBuilder.WithCommandName(System.String)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.AutocompleteCommandBuilder.CommandName"/>.
            </summary>
            <param name="name">New value of the <see cref="P:Discord.Interactions.Builders.AutocompleteCommandBuilder.CommandName"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.AutocompleteCommandBuilder.AddParameter(System.Action{Discord.Interactions.Builders.CommandParameterBuilder})">
            <summary>
                Adds a command parameter to the parameters collection.
            </summary>
            <param name="configure"><see cref="T:Discord.Interactions.Builders.CommandParameterBuilder"/> factory.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="T:Discord.Interactions.Builders.CommandBuilder`3">
            <summary>
                Represents the base builder class for creating <see cref="T:Discord.Interactions.CommandInfo`1"/>.
            </summary>
            <typeparam name="TInfo">The <see cref="T:Discord.Interactions.CommandInfo`1"/> this builder yields when built.</typeparam>
            <typeparam name="TBuilder">Inherited <see cref="T:Discord.Interactions.Builders.CommandBuilder`3"/> type.</typeparam>
            <typeparam name="TParamBuilder">Builder type for this commands parameters.</typeparam>
        </member>
        <member name="P:Discord.Interactions.Builders.CommandBuilder`3.Module">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.Builders.CommandBuilder`3.Callback">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.Builders.CommandBuilder`3.Name">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.Builders.CommandBuilder`3.MethodName">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.Builders.CommandBuilder`3.IgnoreGroupNames">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.Builders.CommandBuilder`3.TreatNameAsRegex">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.Builders.CommandBuilder`3.RunMode">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.Builders.CommandBuilder`3.Attributes">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.Builders.CommandBuilder`3.Parameters">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.Builders.CommandBuilder`3.Preconditions">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.Builders.CommandBuilder`3.Discord#Interactions#Builders#ICommandBuilder#Parameters">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.Builders.CommandBuilder`3.WithName(System.String)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.CommandBuilder`3.Name"/>.
            </summary>
            <param name="name">New value of the <see cref="P:Discord.Interactions.Builders.CommandBuilder`3.Name"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.CommandBuilder`3.WithMethodName(System.String)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.CommandBuilder`3.MethodName"/>.
            </summary>
            <param name="name">New value of the <see cref="P:Discord.Interactions.Builders.CommandBuilder`3.MethodName"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.CommandBuilder`3.WithAttributes(System.Attribute[])">
            <summary>
                Adds attributes to <see cref="P:Discord.Interactions.Builders.CommandBuilder`3.Attributes"/>.
            </summary>
            <param name="attributes">New attributes to be added to <see cref="P:Discord.Interactions.Builders.CommandBuilder`3.Attributes"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.CommandBuilder`3.SetRunMode(Discord.Interactions.RunMode)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.CommandBuilder`3.RunMode"/>.
            </summary>
            <param name="runMode">New value of the <see cref="P:Discord.Interactions.Builders.CommandBuilder`3.RunMode"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.CommandBuilder`3.WithNameAsRegex(System.Boolean)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.CommandBuilder`3.TreatNameAsRegex"/>.
            </summary>
            <param name="value">New value of the <see cref="P:Discord.Interactions.Builders.CommandBuilder`3.TreatNameAsRegex"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.CommandBuilder`3.AddParameters(`2[])">
            <summary>
                Adds parameter builders to <see cref="P:Discord.Interactions.Builders.CommandBuilder`3.Parameters"/>.
            </summary>
            <param name="parameters">New parameter builders to be added to <see cref="P:Discord.Interactions.Builders.CommandBuilder`3.Parameters"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.CommandBuilder`3.WithPreconditions(Discord.Interactions.PreconditionAttribute[])">
            <summary>
                Adds preconditions to <see cref="P:Discord.Interactions.Builders.CommandBuilder`3.Preconditions"/>.
            </summary>
            <param name="preconditions">New preconditions to be added to <see cref="P:Discord.Interactions.Builders.CommandBuilder`3.Preconditions"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.CommandBuilder`3.AddParameter(System.Action{`2})">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.Builders.CommandBuilder`3.Discord#Interactions#Builders#ICommandBuilder#WithName(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.Builders.CommandBuilder`3.Discord#Interactions#Builders#ICommandBuilder#WithMethodName(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.Builders.CommandBuilder`3.Discord#Interactions#Builders#ICommandBuilder#SetRunMode(Discord.Interactions.RunMode)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.Builders.CommandBuilder`3.Discord#Interactions#Builders#ICommandBuilder#WithNameAsRegex(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.Builders.CommandBuilder`3.Discord#Interactions#Builders#ICommandBuilder#AddParameters(Discord.Interactions.Builders.IParameterBuilder[])">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.Builders.CommandBuilder`3.Discord#Interactions#Builders#ICommandBuilder#WithPreconditions(Discord.Interactions.PreconditionAttribute[])">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Interactions.Builders.ComponentCommandBuilder">
            <summary>
                Represents a builder for creating <see cref="T:Discord.Interactions.ComponentCommandInfo"/>.
            </summary>
        </member>
        <member name="M:Discord.Interactions.Builders.ComponentCommandBuilder.#ctor(Discord.Interactions.Builders.ModuleBuilder,System.String,Discord.Interactions.ExecuteCallback)">
            <summary>
                Initializes a new <see cref="T:Discord.ComponentBuilder"/>.
            </summary>
            <param name="module">Parent module of this command.</param>
            <param name="name">Name of this command.</param>
            <param name="callback">Execution callback of this command.</param>
        </member>
        <member name="M:Discord.Interactions.Builders.ComponentCommandBuilder.AddParameter(System.Action{Discord.Interactions.Builders.ComponentCommandParameterBuilder})">
            <summary>
                Adds a command parameter to the parameters collection.
            </summary>
            <param name="configure"><see cref="T:Discord.Interactions.Builders.CommandParameterBuilder"/> factory.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="T:Discord.Interactions.Builders.ContextCommandBuilder">
            <summary>
                Represents a builder for creating <see cref="T:Discord.Interactions.ContextCommandInfo"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ContextCommandBuilder.CommandType">
            <summary>
                Gets the type of this command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ContextCommandBuilder.DefaultPermission">
            <summary>
                Gets the default permission of this command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ContextCommandBuilder.IsEnabledInDm">
            <summary>
                Gets whether this command can be used in DMs.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ContextCommandBuilder.IsNsfw">
            <summary>
                Gets whether this command is age restricted.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ContextCommandBuilder.DefaultMemberPermissions">
            <summary>
                Gets the default permissions needed for executing this command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ContextCommandBuilder.IntegrationTypes">
            <summary>
                Gets the install method for this command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ContextCommandBuilder.ContextTypes">
            <summary>
                Gets the context types this command can be executed in.
            </summary>
        </member>
        <member name="M:Discord.Interactions.Builders.ContextCommandBuilder.#ctor(Discord.Interactions.Builders.ModuleBuilder,System.String,Discord.Interactions.ExecuteCallback)">
            <summary>
                Initializes a new <see cref="T:Discord.Interactions.Builders.ContextCommandBuilder"/>.
            </summary>
            <param name="module">Parent module of this command.</param>
            <param name="name">Name of this command.</param>
            <param name="callback">Execution callback of this command.</param>
        </member>
        <member name="M:Discord.Interactions.Builders.ContextCommandBuilder.SetType(Discord.ApplicationCommandType)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.ContextCommandBuilder.CommandType"/>.
            </summary>
            <param name="commandType">New value of the <see cref="P:Discord.Interactions.Builders.ContextCommandBuilder.CommandType"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ContextCommandBuilder.SetDefaultPermission(System.Boolean)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.ContextCommandBuilder.DefaultPermission"/>.
            </summary>
            <param name="defaultPermision">New value of the <see cref="P:Discord.Interactions.Builders.ContextCommandBuilder.DefaultPermission"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ContextCommandBuilder.AddParameter(System.Action{Discord.Interactions.Builders.CommandParameterBuilder})">
            <summary>
                Adds a command parameter to the parameters collection.
            </summary>
            <param name="configure"><see cref="T:Discord.Interactions.Builders.CommandParameterBuilder"/> factory.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ContextCommandBuilder.SetEnabledInDm(System.Boolean)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.ContextCommandBuilder.IsEnabledInDm"/>.
            </summary>
            <param name="isEnabled">New value of the <see cref="P:Discord.Interactions.Builders.ContextCommandBuilder.IsEnabledInDm"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ContextCommandBuilder.SetNsfw(System.Boolean)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.ContextCommandBuilder.IsNsfw"/>.
            </summary>
            <param name="isNsfw">New value of the <see cref="P:Discord.Interactions.Builders.ContextCommandBuilder.IsNsfw"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ContextCommandBuilder.WithDefaultMemberPermissions(Discord.GuildPermission)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.ContextCommandBuilder.DefaultMemberPermissions"/>.
            </summary>
            <param name="permissions">New value of the <see cref="P:Discord.Interactions.Builders.ContextCommandBuilder.DefaultMemberPermissions"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ContextCommandBuilder.WithIntegrationTypes(Discord.ApplicationIntegrationType[])">
            <summary>
                Sets the <see cref="P:Discord.Interactions.Builders.ContextCommandBuilder.IntegrationTypes"/> of this <see cref="T:Discord.Interactions.Builders.ContextCommandBuilder"/>.
            </summary>
            <param name="integrationTypes">Install types for this command.</param>
            <returns>The builder instance.</returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ContextCommandBuilder.WithContextTypes(Discord.InteractionContextType[])">
            <summary>
                Sets the <see cref="P:Discord.Interactions.Builders.ContextCommandBuilder.ContextTypes"/> of this <see cref="T:Discord.Interactions.Builders.ContextCommandBuilder"/>.
            </summary>
            <param name="contextTypes">Context types the command can be executed in.</param>
            <returns>The builder instance.</returns>
        </member>
        <member name="T:Discord.Interactions.Builders.ICommandBuilder">
            <summary>
                Represent a command builder for creating <see cref="T:Discord.Interactions.ICommandInfo"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ICommandBuilder.Callback">
            <summary>
                Gets the execution delegate of this command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ICommandBuilder.Module">
            <summary>
                Gets the parent module of this command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ICommandBuilder.Name">
            <summary>
                Gets the name of this command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ICommandBuilder.MethodName">
            <summary>
                Gets or sets the method name of this command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ICommandBuilder.IgnoreGroupNames">
            <summary>
                Gets or sets <see langword="true"/> if this command will be registered and executed as a standalone command, unaffected by the <see cref="T:Discord.Interactions.GroupAttribute"/>s of
                of the commands parents.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ICommandBuilder.TreatNameAsRegex">
            <summary>
                Gets or sets whether the <see cref="P:Discord.Interactions.Builders.ICommandBuilder.Name"/> should be directly used as a Regex pattern.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ICommandBuilder.RunMode">
            <summary>
                Gets or sets the run mode this command gets executed with.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ICommandBuilder.Attributes">
            <summary>
                Gets a collection of the attributes of this command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ICommandBuilder.Parameters">
            <summary>
                Gets a collection of the parameters of this command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ICommandBuilder.Preconditions">
            <summary>
                Gets a collection of the preconditions of this command.
            </summary>
        </member>
        <member name="M:Discord.Interactions.Builders.ICommandBuilder.WithName(System.String)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.ICommandBuilder.Name"/>.
            </summary>
            <param name="name">New value of the <see cref="P:Discord.Interactions.Builders.ICommandBuilder.Name"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ICommandBuilder.WithMethodName(System.String)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.ICommandBuilder.MethodName"/>.
            </summary>
            <param name="name">New value of the <see cref="P:Discord.Interactions.Builders.ICommandBuilder.MethodName"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ICommandBuilder.WithAttributes(System.Attribute[])">
            <summary>
                Adds attributes to <see cref="P:Discord.Interactions.Builders.ICommandBuilder.Attributes"/>.
            </summary>
            <param name="attributes">New attributes to be added to <see cref="P:Discord.Interactions.Builders.ICommandBuilder.Attributes"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ICommandBuilder.SetRunMode(Discord.Interactions.RunMode)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.ICommandBuilder.RunMode"/>.
            </summary>
            <param name="runMode">New value of the <see cref="P:Discord.Interactions.Builders.ICommandBuilder.RunMode"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ICommandBuilder.WithNameAsRegex(System.Boolean)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.ICommandBuilder.TreatNameAsRegex"/>.
            </summary>
            <param name="value">New value of the <see cref="P:Discord.Interactions.Builders.ICommandBuilder.TreatNameAsRegex"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ICommandBuilder.AddParameters(Discord.Interactions.Builders.IParameterBuilder[])">
            <summary>
                Adds parameter builders to <see cref="P:Discord.Interactions.Builders.ICommandBuilder.Parameters"/>.
            </summary>
            <param name="parameters">New parameter builders to be added to <see cref="P:Discord.Interactions.Builders.ICommandBuilder.Parameters"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ICommandBuilder.WithPreconditions(Discord.Interactions.PreconditionAttribute[])">
            <summary>
                Adds preconditions to <see cref="P:Discord.Interactions.Builders.ICommandBuilder.Preconditions"/>.
            </summary>
            <param name="preconditions">New preconditions to be added to <see cref="P:Discord.Interactions.Builders.ICommandBuilder.Preconditions"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="T:Discord.Interactions.Builders.ModalCommandBuilder">
            <summary>
                Represents a builder for creating a <see cref="T:Discord.Interactions.ModalCommandInfo"/>.
            </summary>
        </member>
        <member name="M:Discord.Interactions.Builders.ModalCommandBuilder.#ctor(Discord.Interactions.Builders.ModuleBuilder)">
            <summary>
                Initializes a new <see cref="T:Discord.Interactions.Builders.ModalCommandBuilder"/>.
            </summary>
            <param name="module">Parent module of this modal.</param>
        </member>
        <member name="M:Discord.Interactions.Builders.ModalCommandBuilder.#ctor(Discord.Interactions.Builders.ModuleBuilder,System.String,Discord.Interactions.ExecuteCallback)">
            <summary>
                Initializes a new <see cref="T:Discord.Interactions.Builders.ModalCommandBuilder"/>.
            </summary>
            <param name="module">Parent module of this modal.</param>
            <param name="name">Name of this modal.</param>
            <param name="callback">Execution callback of this modal.</param>
        </member>
        <member name="M:Discord.Interactions.Builders.ModalCommandBuilder.AddParameter(System.Action{Discord.Interactions.Builders.ModalCommandParameterBuilder})">
            <summary>
                Adds a modal parameter to the parameters collection.
            </summary>
            <param name="configure"><see cref="T:Discord.Interactions.Builders.ModalCommandParameterBuilder"/> factory.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="T:Discord.Interactions.Builders.SlashCommandBuilder">
            <summary>
                Represents a builder for creating <see cref="T:Discord.Interactions.SlashCommandInfo"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.SlashCommandBuilder.Description">
            <summary>
                Gets and sets the description of this command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.SlashCommandBuilder.DefaultPermission">
            <summary>
                Gets and sets the default permission of this command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.SlashCommandBuilder.IsEnabledInDm">
            <summary>
                Gets whether this command can be used in DMs.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.SlashCommandBuilder.IsNsfw">
            <summary>
                Gets whether this command is age restricted.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.SlashCommandBuilder.DefaultMemberPermissions">
            <summary>
                Gets the default permissions needed for executing this command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.SlashCommandBuilder.IntegrationTypes">
            <summary>
                Gets or sets the install method for this command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.SlashCommandBuilder.ContextTypes">
            <summary>
                Gets or sets the context types this command can be executed in.
            </summary>
        </member>
        <member name="M:Discord.Interactions.Builders.SlashCommandBuilder.#ctor(Discord.Interactions.Builders.ModuleBuilder,System.String,Discord.Interactions.ExecuteCallback)">
            <summary>
                Initializes a new <see cref="T:Discord.Interactions.Builders.SlashCommandBuilder"/>.
            </summary>
            <param name="module">Parent module of this command.</param>
            <param name="name">Name of this command.</param>
            <param name="callback">Execution callback of this command.</param>
        </member>
        <member name="M:Discord.Interactions.Builders.SlashCommandBuilder.WithDescription(System.String)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.SlashCommandBuilder.Description"/>.
            </summary>
            <param name="description">New value of the <see cref="P:Discord.Interactions.Builders.SlashCommandBuilder.Description"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.SlashCommandBuilder.WithDefaultPermission(System.Boolean)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.SlashCommandBuilder.DefaultPermission"/>.
            </summary>
            <param name="permission">New value of the <see cref="P:Discord.Interactions.Builders.SlashCommandBuilder.DefaultPermission"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.SlashCommandBuilder.AddParameter(System.Action{Discord.Interactions.Builders.SlashCommandParameterBuilder})">
            <summary>
                Adds a command parameter to the parameters collection.
            </summary>
            <param name="configure"><see cref="T:Discord.Interactions.Builders.SlashCommandParameterBuilder"/> factory.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.SlashCommandBuilder.SetEnabledInDm(System.Boolean)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.SlashCommandBuilder.IsEnabledInDm"/>.
            </summary>
            <param name="isEnabled">New value of the <see cref="P:Discord.Interactions.Builders.SlashCommandBuilder.IsEnabledInDm"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.SlashCommandBuilder.SetNsfw(System.Boolean)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.SlashCommandBuilder.IsNsfw"/>.
            </summary>
            <param name="isNsfw">New value of the <see cref="P:Discord.Interactions.Builders.SlashCommandBuilder.IsNsfw"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.SlashCommandBuilder.WithDefaultMemberPermissions(Discord.GuildPermission)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.SlashCommandBuilder.DefaultMemberPermissions"/>.
            </summary>
            <param name="permissions">New value of the <see cref="P:Discord.Interactions.Builders.SlashCommandBuilder.DefaultMemberPermissions"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.SlashCommandBuilder.WithIntegrationTypes(Discord.ApplicationIntegrationType[])">
            <summary>
                Sets the <see cref="P:Discord.Interactions.Builders.SlashCommandBuilder.IntegrationTypes"/> on this <see cref="T:Discord.Interactions.Builders.SlashCommandBuilder"/>.
            </summary>
            <param name="integrationTypes">Install types for this command.</param>
            <returns>The builder instance.</returns>
        </member>
        <member name="M:Discord.Interactions.Builders.SlashCommandBuilder.WithContextTypes(Discord.InteractionContextType[])">
            <summary>
                Sets the <see cref="P:Discord.Interactions.Builders.SlashCommandBuilder.ContextTypes"/> on this <see cref="T:Discord.Interactions.Builders.SlashCommandBuilder"/>.
            </summary>
            <param name="contextTypes">Context types the command can be executed in.</param>
            <returns>The builder instance.</returns>
        </member>
        <member name="T:Discord.Interactions.Builders.IInputComponentBuilder">
            <summary>
                Represent a builder for creating <see cref="T:Discord.Interactions.InputComponentInfo"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.IInputComponentBuilder.Modal">
            <summary>
                Gets the parent modal of this input component.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.IInputComponentBuilder.CustomId">
            <summary>
                Gets the custom id of this input component.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.IInputComponentBuilder.Label">
            <summary>
                Gets the label of this input component.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.IInputComponentBuilder.IsRequired">
            <summary>
                Gets whether this input component is required.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.IInputComponentBuilder.ComponentType">
            <summary>
                Gets the component type of this input component.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.IInputComponentBuilder.Type">
            <summary>
                Get the reference type of this input component.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.IInputComponentBuilder.PropertyInfo">
            <summary>
                Get the <see cref="P:Discord.Interactions.Builders.IInputComponentBuilder.PropertyInfo"/> of this component's property.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.IInputComponentBuilder.TypeConverter">
            <summary>
                Get the <see cref="T:Discord.Interactions.ComponentTypeConverter"/> assigned to this input.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.IInputComponentBuilder.DefaultValue">
            <summary>
                Gets the default value of this input component.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.IInputComponentBuilder.Attributes">
            <summary>
                Gets a collection of the attributes of this component.
            </summary>
        </member>
        <member name="M:Discord.Interactions.Builders.IInputComponentBuilder.WithCustomId(System.String)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.IInputComponentBuilder.CustomId"/>.
            </summary>
            <param name="customId">New value of the <see cref="P:Discord.Interactions.Builders.IInputComponentBuilder.CustomId"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.IInputComponentBuilder.WithLabel(System.String)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.IInputComponentBuilder.Label"/>.
            </summary>
            <param name="label">New value of the <see cref="P:Discord.Interactions.Builders.IInputComponentBuilder.Label"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.IInputComponentBuilder.SetIsRequired(System.Boolean)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.IInputComponentBuilder.IsRequired"/>.
            </summary>
            <param name="isRequired">New value of the <see cref="P:Discord.Interactions.Builders.IInputComponentBuilder.IsRequired"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.IInputComponentBuilder.WithType(System.Type)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.IInputComponentBuilder.Type"/>.
            </summary>
            <param name="type">New value of the <see cref="P:Discord.Interactions.Builders.IInputComponentBuilder.Type"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.IInputComponentBuilder.SetDefaultValue(System.Object)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.IInputComponentBuilder.DefaultValue"/>.
            </summary>
            <param name="value">New value of the <see cref="P:Discord.Interactions.Builders.IInputComponentBuilder.DefaultValue"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.IInputComponentBuilder.WithAttributes(System.Attribute[])">
            <summary>
                Adds attributes to <see cref="P:Discord.Interactions.Builders.IInputComponentBuilder.Attributes"/>.
            </summary>
            <param name="attributes">New attributes to be added to <see cref="P:Discord.Interactions.Builders.IInputComponentBuilder.Attributes"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="T:Discord.Interactions.Builders.InputComponentBuilder`2">
            <summary>
                Represents the base builder class for creating <see cref="T:Discord.Interactions.InputComponentInfo"/>.
            </summary>
            <typeparam name="TInfo">The <see cref="T:Discord.Interactions.InputComponentInfo"/> this builder yields when built.</typeparam>
            <typeparam name="TBuilder">Inherited <see cref="T:Discord.Interactions.Builders.InputComponentBuilder`2"/> type.</typeparam>
        </member>
        <member name="P:Discord.Interactions.Builders.InputComponentBuilder`2.Modal">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.Builders.InputComponentBuilder`2.CustomId">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.Builders.InputComponentBuilder`2.Label">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.Builders.InputComponentBuilder`2.IsRequired">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.Builders.InputComponentBuilder`2.ComponentType">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.Builders.InputComponentBuilder`2.Type">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.Builders.InputComponentBuilder`2.PropertyInfo">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.Builders.InputComponentBuilder`2.TypeConverter">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.Builders.InputComponentBuilder`2.DefaultValue">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.Builders.InputComponentBuilder`2.Attributes">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.Builders.InputComponentBuilder`2.#ctor(Discord.Interactions.Builders.ModalBuilder)">
            <summary>
                Creates an instance of <see cref="T:Discord.Interactions.Builders.InputComponentBuilder`2"/>
            </summary>
            <param name="modal">Parent modal of this input component.</param>
        </member>
        <member name="M:Discord.Interactions.Builders.InputComponentBuilder`2.WithCustomId(System.String)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.InputComponentBuilder`2.CustomId"/>.
            </summary>
            <param name="customId">New value of the <see cref="P:Discord.Interactions.Builders.InputComponentBuilder`2.CustomId"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.InputComponentBuilder`2.WithLabel(System.String)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.InputComponentBuilder`2.Label"/>.
            </summary>
            <param name="label">New value of the <see cref="P:Discord.Interactions.Builders.InputComponentBuilder`2.Label"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.InputComponentBuilder`2.SetIsRequired(System.Boolean)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.InputComponentBuilder`2.IsRequired"/>.
            </summary>
            <param name="isRequired">New value of the <see cref="P:Discord.Interactions.Builders.InputComponentBuilder`2.IsRequired"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.InputComponentBuilder`2.WithComponentType(Discord.ComponentType)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.InputComponentBuilder`2.ComponentType"/>.
            </summary>
            <param name="componentType">New value of the <see cref="P:Discord.Interactions.Builders.InputComponentBuilder`2.ComponentType"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.InputComponentBuilder`2.WithType(System.Type)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.InputComponentBuilder`2.Type"/>.
            </summary>
            <param name="type">New value of the <see cref="P:Discord.Interactions.Builders.InputComponentBuilder`2.Type"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.InputComponentBuilder`2.SetDefaultValue(System.Object)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.InputComponentBuilder`2.DefaultValue"/>.
            </summary>
            <param name="value">New value of the <see cref="P:Discord.Interactions.Builders.InputComponentBuilder`2.DefaultValue"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.InputComponentBuilder`2.WithAttributes(System.Attribute[])">
            <summary>
                Adds attributes to <see cref="P:Discord.Interactions.Builders.InputComponentBuilder`2.Attributes"/>.
            </summary>
            <param name="attributes">New attributes to be added to <see cref="P:Discord.Interactions.Builders.InputComponentBuilder`2.Attributes"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.InputComponentBuilder`2.Discord#Interactions#Builders#IInputComponentBuilder#WithCustomId(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.Builders.InputComponentBuilder`2.Discord#Interactions#Builders#IInputComponentBuilder#WithLabel(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.Builders.InputComponentBuilder`2.Discord#Interactions#Builders#IInputComponentBuilder#WithType(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.Builders.InputComponentBuilder`2.Discord#Interactions#Builders#IInputComponentBuilder#SetDefaultValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.Builders.InputComponentBuilder`2.Discord#Interactions#Builders#IInputComponentBuilder#WithAttributes(System.Attribute[])">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.Builders.InputComponentBuilder`2.Discord#Interactions#Builders#IInputComponentBuilder#SetIsRequired(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Interactions.Builders.TextInputComponentBuilder">
            <summary>
                Represents a builder for creating <see cref="T:Discord.Interactions.TextInputComponentInfo"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.TextInputComponentBuilder.Style">
            <summary>
                Gets and sets the style of the text input.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.TextInputComponentBuilder.Placeholder">
            <summary>
                Gets and sets the placeholder of the text input.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.TextInputComponentBuilder.MinLength">
            <summary>
                Gets and sets the minimum length of the text input.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.TextInputComponentBuilder.MaxLength">
            <summary>
                Gets and sets the maximum length of the text input.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.TextInputComponentBuilder.InitialValue">
            <summary>
                Gets and sets the initial value to be displayed by this input.
            </summary>
        </member>
        <member name="M:Discord.Interactions.Builders.TextInputComponentBuilder.#ctor(Discord.Interactions.Builders.ModalBuilder)">
            <summary>
                Initializes a new <see cref="T:Discord.Interactions.Builders.TextInputComponentBuilder"/>.
            </summary>
            <param name="modal">Parent modal of this component.</param>
        </member>
        <member name="M:Discord.Interactions.Builders.TextInputComponentBuilder.WithStyle(Discord.TextInputStyle)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.TextInputComponentBuilder.Style"/>.
            </summary>
            <param name="style">New value of the <see cref="P:Discord.Interactions.Builders.TextInputComponentBuilder.Style"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.TextInputComponentBuilder.WithPlaceholder(System.String)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.TextInputComponentBuilder.Placeholder"/>.
            </summary>
            <param name="placeholder">New value of the <see cref="P:Discord.Interactions.Builders.TextInputComponentBuilder.Placeholder"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.TextInputComponentBuilder.WithMinLength(System.Int32)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.TextInputComponentBuilder.MinLength"/>.
            </summary>
            <param name="minLength">New value of the <see cref="P:Discord.Interactions.Builders.TextInputComponentBuilder.MinLength"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.TextInputComponentBuilder.WithMaxLength(System.Int32)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.TextInputComponentBuilder.MaxLength"/>.
            </summary>
            <param name="maxLength">New value of the <see cref="P:Discord.Interactions.Builders.TextInputComponentBuilder.MaxLength"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.TextInputComponentBuilder.WithInitialValue(System.String)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.TextInputComponentBuilder.InitialValue"/>.
            </summary>
            <param name="value">New value of the <see cref="P:Discord.Interactions.Builders.TextInputComponentBuilder.InitialValue"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="T:Discord.Interactions.Builders.ModalBuilder">
            <summary>
                Represents a builder for creating <see cref="T:Discord.Interactions.ModalInfo"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ModalBuilder.ModalInitializer">
            <summary>
                Gets the initialization delegate for this modal.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ModalBuilder.Title">
            <summary>
                Gets the title of this modal.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ModalBuilder.Type">
            <summary>
                Gets the <see cref="T:Discord.Interactions.IModal"/> implementation used to initialize this object.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ModalBuilder.Components">
            <summary>
                Gets a collection of the components of this modal.
            </summary>
        </member>
        <member name="M:Discord.Interactions.Builders.ModalBuilder.#ctor(System.Type,Discord.Interactions.ModalInitializer,Discord.Interactions.InteractionService)">
            <summary>
                Initializes a new <see cref="T:Discord.Interactions.Builders.ModalBuilder"/>
            </summary>
            <param name="modalInitializer">The initialization delegate for this modal.</param>
        </member>
        <member name="M:Discord.Interactions.Builders.ModalBuilder.WithTitle(System.String)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.ModalBuilder.Title"/>.
            </summary>
            <param name="title">New value of the <see cref="P:Discord.Interactions.Builders.ModalBuilder.Title"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ModalBuilder.AddTextComponent(System.Action{Discord.Interactions.Builders.TextInputComponentBuilder})">
            <summary>
                Adds text components to <see cref="P:Discord.Interactions.Builders.ModalBuilder.Components"/>.
            </summary>
            <param name="configure">Text Component builder factory.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="T:Discord.Interactions.Builders.ModuleBuilder">
            <summary>
                Represents a builder for creating <see cref="T:Discord.Interactions.ModuleInfo"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ModuleBuilder.InteractionService">
            <summary>
                Gets the underlying Interaction Service.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ModuleBuilder.Parent">
            <summary>
                Gets the parent module if this module is a sub-module.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ModuleBuilder.Name">
            <summary>
                Gets the name of this module.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ModuleBuilder.SlashGroupName">
            <summary>
                Gets and sets the group name of this module.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ModuleBuilder.IsSlashGroup">
            <summary>
                Gets whether this has a <see cref="T:Discord.Interactions.GroupAttribute"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ModuleBuilder.Description">
            <summary>
                Gets and sets the description of this module.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ModuleBuilder.DefaultPermission">
            <summary>
                Gets and sets the default permission of this module.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ModuleBuilder.IsEnabledInDm">
            <summary>
                Gets whether this command can be used in DMs.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ModuleBuilder.IsNsfw">
            <summary>
                Gets whether this command is age restricted.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ModuleBuilder.DefaultMemberPermissions">
            <summary>
                Gets the default permissions needed for executing this command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ModuleBuilder.DontAutoRegister">
            <summary>
                Gets and sets whether this has a <see cref="T:Discord.Interactions.DontAutoRegisterAttribute"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ModuleBuilder.Attributes">
            <summary>
                Gets a collection of the attributes of this module.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ModuleBuilder.Preconditions">
            <summary>
                Gets a collection of the preconditions of this module.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ModuleBuilder.SubModules">
            <summary>
                Gets a collection of the sub-modules of this module.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ModuleBuilder.SlashCommands">
            <summary>
                Gets a collection of the Slash Commands of this module.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ModuleBuilder.ContextCommands">
            <summary>
                Gets a collection of the Context Commands of this module.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ModuleBuilder.ComponentCommands">
            <summary>
                Gets a collection of the Component Commands of this module.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ModuleBuilder.AutocompleteCommands">
            <summary>
                Gets a collection of the Autocomplete Commands of this module.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ModuleBuilder.ModalCommands">
            <summary>
                Gets a collection of the Modal Commands of this module.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ModuleBuilder.IntegrationTypes">
            <summary>
                Gets or sets the install method for this command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ModuleBuilder.ContextTypes">
            <summary>
                Gets or sets the context types this command can be executed in.
            </summary>
        </member>
        <member name="M:Discord.Interactions.Builders.ModuleBuilder.#ctor(Discord.Interactions.InteractionService,System.String,Discord.Interactions.Builders.ModuleBuilder)">
            <summary>
                Initializes a new <see cref="T:Discord.Interactions.Builders.ModuleBuilder"/>.
            </summary>
            <param name="interactionService">The underlying Interaction Service.</param>
            <param name="name">Name of this module.</param>
            <param name="parent">Parent module of this sub-module.</param>
        </member>
        <member name="M:Discord.Interactions.Builders.ModuleBuilder.WithGroupName(System.String)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.ModuleBuilder.SlashGroupName"/>.
            </summary>
            <param name="name">New value of the <see cref="P:Discord.Interactions.Builders.ModuleBuilder.SlashGroupName"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ModuleBuilder.WithDescription(System.String)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.ModuleBuilder.Description"/>.
            </summary>
            <param name="description">New value of the <see cref="P:Discord.Interactions.Builders.ModuleBuilder.Description"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ModuleBuilder.WithDefaultPermission(System.Boolean)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.ModuleBuilder.DefaultPermission"/>.
            </summary>
            <param name="permission">New value of the <see cref="P:Discord.Interactions.Builders.ModuleBuilder.DefaultPermission"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ModuleBuilder.SetEnabledInDm(System.Boolean)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.ModuleBuilder.IsEnabledInDm"/>.
            </summary>
            <param name="isEnabled">New value of the <see cref="P:Discord.Interactions.Builders.ModuleBuilder.IsEnabledInDm"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ModuleBuilder.SetNsfw(System.Boolean)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.ModuleBuilder.IsNsfw"/>.
            </summary>
            <param name="isNsfw">New value of the <see cref="P:Discord.Interactions.Builders.ModuleBuilder.IsNsfw"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ModuleBuilder.WithDefaultMemberPermissions(Discord.GuildPermission)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.ModuleBuilder.DefaultMemberPermissions"/>.
            </summary>
            <param name="permissions">New value of the <see cref="P:Discord.Interactions.Builders.ModuleBuilder.DefaultMemberPermissions"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ModuleBuilder.AddAttributes(System.Attribute[])">
            <summary>
                Adds attributes to <see cref="P:Discord.Interactions.Builders.ModuleBuilder.Attributes"/>.
            </summary>
            <param name="attributes">New attributes to be added to <see cref="P:Discord.Interactions.Builders.ModuleBuilder.Attributes"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ModuleBuilder.AddPreconditions(Discord.Interactions.PreconditionAttribute[])">
            <summary>
                Adds preconditions to <see cref="P:Discord.Interactions.Builders.ModuleBuilder.Preconditions"/>.
            </summary>
            <param name="preconditions">New preconditions to be added to <see cref="P:Discord.Interactions.Builders.ModuleBuilder.Preconditions"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ModuleBuilder.AddSlashCommand(System.Action{Discord.Interactions.Builders.SlashCommandBuilder})">
            <summary>
                Adds slash command builder to <see cref="P:Discord.Interactions.Builders.ModuleBuilder.SlashCommands"/>.
            </summary>
            <param name="configure"><see cref="T:Discord.Interactions.Builders.SlashCommandBuilder"/> factory.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ModuleBuilder.AddSlashCommand(System.String,Discord.Interactions.ExecuteCallback,System.Action{Discord.Interactions.Builders.SlashCommandBuilder})">
            <summary>
                Adds slash command builder to <see cref="P:Discord.Interactions.Builders.ModuleBuilder.SlashCommands"/>.
            </summary>
            <param name="name">Name of the command.</param>
            <param name="callback">Command callback to be executed.</param>
            <param name="configure"><see cref="T:Discord.Interactions.Builders.SlashCommandBuilder"/> factory.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ModuleBuilder.AddContextCommand(System.Action{Discord.Interactions.Builders.ContextCommandBuilder})">
            <summary>
                Adds context command builder to <see cref="P:Discord.Interactions.Builders.ModuleBuilder.ContextCommands"/>.
            </summary>
            <param name="configure"><see cref="T:Discord.Interactions.Builders.ContextCommandBuilder"/> factory.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ModuleBuilder.AddContextCommand(System.String,Discord.Interactions.ExecuteCallback,System.Action{Discord.Interactions.Builders.ContextCommandBuilder})">
            <summary>
                Adds context command builder to <see cref="P:Discord.Interactions.Builders.ModuleBuilder.ContextCommands"/>.
            </summary>
            <param name="name">Name of the command.</param>
            <param name="callback">Command callback to be executed.</param>
            <param name="configure"><see cref="T:Discord.Interactions.Builders.ContextCommandBuilder"/> factory.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ModuleBuilder.AddComponentCommand(System.Action{Discord.Interactions.Builders.ComponentCommandBuilder})">
            <summary>
                Adds component command builder to <see cref="P:Discord.Interactions.Builders.ModuleBuilder.ComponentCommands"/>.
            </summary>
            <param name="configure"><see cref="T:Discord.Interactions.Builders.ComponentCommandBuilder"/> factory.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ModuleBuilder.AddComponentCommand(System.String,Discord.Interactions.ExecuteCallback,System.Action{Discord.Interactions.Builders.ComponentCommandBuilder})">
            <summary>
                Adds component command builder to <see cref="P:Discord.Interactions.Builders.ModuleBuilder.ComponentCommands"/>.
            </summary>
            <param name="name">Name of the command.</param>
            <param name="callback">Command callback to be executed.</param>
            <param name="configure"><see cref="T:Discord.Interactions.Builders.ComponentCommandBuilder"/> factory.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ModuleBuilder.AddAutocompleteCommand(System.Action{Discord.Interactions.Builders.AutocompleteCommandBuilder})">
            <summary>
                Adds autocomplete command builder to <see cref="P:Discord.Interactions.Builders.ModuleBuilder.AutocompleteCommands"/>.
            </summary>
            <param name="configure"><see cref="P:Discord.Interactions.Builders.ModuleBuilder.AutocompleteCommands"/> factory.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ModuleBuilder.AddSlashCommand(System.String,Discord.Interactions.ExecuteCallback,System.Action{Discord.Interactions.Builders.AutocompleteCommandBuilder})">
            <summary>
                Adds autocomplete command builder to <see cref="P:Discord.Interactions.Builders.ModuleBuilder.AutocompleteCommands"/>.
            </summary>
            <param name="name">Name of the command.</param>
            <param name="callback">Command callback to be executed.</param>
            <param name="configure"><see cref="T:Discord.Interactions.Builders.AutocompleteCommandBuilder"/> factory.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ModuleBuilder.AddModalCommand(System.Action{Discord.Interactions.Builders.ModalCommandBuilder})">
            <summary>
                Adds a modal command builder to <see cref="P:Discord.Interactions.Builders.ModuleBuilder.ModalCommands"/>.
            </summary>
            <param name="configure"><see cref="P:Discord.Interactions.Builders.ModuleBuilder.ModalCommands"/> factory.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ModuleBuilder.AddModalCommand(System.String,Discord.Interactions.ExecuteCallback,System.Action{Discord.Interactions.Builders.ModalCommandBuilder})">
            <summary>
                Adds a modal command builder to <see cref="P:Discord.Interactions.Builders.ModuleBuilder.ModalCommands"/>.
            </summary>
            <param name="name">Name of the command.</param>
            <param name="callback">Command callback to be executed.</param>
            <param name="configure"><see cref="P:Discord.Interactions.Builders.ModuleBuilder.ModalCommands"/> factory.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ModuleBuilder.AddModule(System.Action{Discord.Interactions.Builders.ModuleBuilder})">
            <summary>
                Adds sub-module builder to <see cref="P:Discord.Interactions.Builders.ModuleBuilder.SubModules"/>.
            </summary>
            <param name="configure"><see cref="T:Discord.Interactions.Builders.ModuleBuilder"/> factory.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ModuleBuilder.WithIntegrationTypes(Discord.ApplicationIntegrationType[])">
            <summary>
                Sets the <see cref="P:Discord.Interactions.Builders.ModuleBuilder.IntegrationTypes"/> on this <see cref="T:Discord.Interactions.Builders.ModuleBuilder"/>.
            </summary>
            <param name="integrationTypes">Install types for this command.</param>
            <returns>The builder instance.</returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ModuleBuilder.WithContextTypes(Discord.InteractionContextType[])">
            <summary>
                Sets  the <see cref="P:Discord.Interactions.Builders.ModuleBuilder.ContextTypes"/> on this <see cref="T:Discord.Interactions.Builders.ModuleBuilder"/>.
            </summary>
            <param name="contextTypes">Context types the command can be executed in.</param>
            <returns>The builder instance.</returns>
        </member>
        <member name="T:Discord.Interactions.Builders.CommandParameterBuilder">
            <summary>
                Represents a builder for creating <see cref="T:Discord.Interactions.CommandParameterInfo"/>.
            </summary>
        </member>
        <member name="M:Discord.Interactions.Builders.CommandParameterBuilder.#ctor(Discord.Interactions.Builders.ICommandBuilder,System.String,System.Type)">
            <summary>
                Initializes a new <see cref="T:Discord.Interactions.CommandParameterInfo"/>.
            </summary>
            <param name="command">Parent command of this parameter.</param>
            <param name="name">Name of this command.</param>
            <param name="type">Type of this parameter.</param>
        </member>
        <member name="T:Discord.Interactions.Builders.ComponentCommandParameterBuilder">
            <summary>
                Represents a builder for creating <see cref="T:Discord.Interactions.ComponentCommandParameterInfo"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ComponentCommandParameterBuilder.TypeConverter">
            <summary>
                Get the <see cref="T:Discord.Interactions.ComponentTypeConverter"/> assigned to this parameter, if <see cref="P:Discord.Interactions.Builders.ComponentCommandParameterBuilder.IsRouteSegmentParameter"/> is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ComponentCommandParameterBuilder.TypeReader">
            <summary>
                Get the <see cref="T:Discord.Interactions.TypeReader"/> assigned to this parameter, if <see cref="P:Discord.Interactions.Builders.ComponentCommandParameterBuilder.IsRouteSegmentParameter"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ComponentCommandParameterBuilder.IsRouteSegmentParameter">
            <summary>
                Gets whether this parameter is a CustomId segment or a Component value parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ComponentCommandParameterBuilder.Instance">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.Builders.ComponentCommandParameterBuilder.#ctor(Discord.Interactions.Builders.ICommandBuilder,System.String,System.Type)">
            <summary>
                Initializes a new <see cref="T:Discord.Interactions.Builders.ComponentCommandParameterBuilder"/>.
            </summary>
            <param name="command">Parent command of this parameter.</param>
            <param name="name">Name of this command.</param>
            <param name="type">Type of this parameter.</param>
        </member>
        <member name="M:Discord.Interactions.Builders.ComponentCommandParameterBuilder.SetParameterType(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.Builders.ComponentCommandParameterBuilder.SetParameterType(System.Type,System.IServiceProvider)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.ParameterBuilder`2.ParameterType"/>.
            </summary>
            <param name="type">New value of the <see cref="P:Discord.Interactions.Builders.ParameterBuilder`2.ParameterType"/>.</param>
            <param name="services">Service container to be used to resolve the dependencies of this parameters <see cref="T:Discord.Interactions.TypeConverter"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ComponentCommandParameterBuilder.SetIsRouteSegment(System.Boolean)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.ComponentCommandParameterBuilder.IsRouteSegmentParameter"/>.
            </summary>
            <param name="isRouteSegment">New value of the <see cref="P:Discord.Interactions.Builders.ComponentCommandParameterBuilder.IsRouteSegmentParameter"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="T:Discord.Interactions.Builders.IParameterBuilder">
            <summary>
                Represent a command builder for creating <see cref="T:Discord.Interactions.IParameterInfo"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.IParameterBuilder.Command">
            <summary>
                Gets the parent command of this parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.IParameterBuilder.Name">
            <summary>
                Gets the name of this parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.IParameterBuilder.ParameterType">
            <summary>
                Gets the type of this parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.IParameterBuilder.IsRequired">
            <summary>
                Gets whether this parameter is required.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.IParameterBuilder.IsParameterArray">
            <summary>
                Gets whether this parameter is <see langword="params"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.IParameterBuilder.DefaultValue">
            <summary>
                Gets the default value of this parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.IParameterBuilder.Attributes">
            <summary>
                Gets a collection of the attributes of this command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.IParameterBuilder.Preconditions">
            <summary>
                Gets a collection of the preconditions of this command.
            </summary>
        </member>
        <member name="M:Discord.Interactions.Builders.IParameterBuilder.WithName(System.String)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.IParameterBuilder.Name"/>.
            </summary>
            <param name="name">New value of the <see cref="P:Discord.Interactions.Builders.IParameterBuilder.Name"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.IParameterBuilder.SetParameterType(System.Type)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.IParameterBuilder.ParameterType"/>.
            </summary>
            <param name="type">New value of the <see cref="P:Discord.Interactions.Builders.IParameterBuilder.ParameterType"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.IParameterBuilder.SetRequired(System.Boolean)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.IParameterBuilder.IsRequired"/>.
            </summary>
            <param name="isRequired">New value of the <see cref="P:Discord.Interactions.Builders.IParameterBuilder.IsRequired"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.IParameterBuilder.SetDefaultValue(System.Object)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.IParameterBuilder.DefaultValue"/>.
            </summary>
            <param name="defaultValue">New value of the <see cref="P:Discord.Interactions.Builders.IParameterBuilder.DefaultValue"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.IParameterBuilder.AddAttributes(System.Attribute[])">
            <summary>
                Adds attributes to <see cref="P:Discord.Interactions.Builders.IParameterBuilder.Attributes"/>.
            </summary>
            <param name="attributes">New attributes to be added to <see cref="P:Discord.Interactions.Builders.IParameterBuilder.Attributes"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.IParameterBuilder.AddPreconditions(Discord.Interactions.ParameterPreconditionAttribute[])">
            <summary>
                Adds preconditions to <see cref="P:Discord.Interactions.Builders.IParameterBuilder.Preconditions"/>.
            </summary>
            <param name="preconditions">New attributes to be added to <see cref="P:Discord.Interactions.Builders.IParameterBuilder.Preconditions"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="T:Discord.Interactions.Builders.ModalCommandParameterBuilder">
            <summary>
                Represents a builder for creating <see cref="T:Discord.Interactions.Builders.ModalCommandBuilder"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ModalCommandParameterBuilder.Modal">
            <summary>
                Gets the built <see cref="T:Discord.Interactions.ModalInfo"/> class for this parameter, if <see cref="P:Discord.Interactions.Builders.ModalCommandParameterBuilder.IsModalParameter"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ModalCommandParameterBuilder.IsModalParameter">
            <summary>
                Gets whether or not this parameter is an <see cref="T:Discord.Interactions.IModal"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.ModalCommandParameterBuilder.TypeReader">
            <summary>
                Gets the <see cref="P:Discord.Interactions.Builders.ModalCommandParameterBuilder.TypeReader"/> assigned to this parameter, if <see cref="P:Discord.Interactions.Builders.ModalCommandParameterBuilder.IsModalParameter"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="M:Discord.Interactions.Builders.ModalCommandParameterBuilder.#ctor(Discord.Interactions.Builders.ICommandBuilder,System.String,System.Type)">
            <summary>
                Initializes a new <see cref="T:Discord.Interactions.Builders.ModalCommandParameterBuilder"/>.
            </summary>
            <param name="command">Parent command of this parameter.</param>
            <param name="name">Name of this command.</param>
            <param name="type">Type of this parameter.</param>
        </member>
        <member name="M:Discord.Interactions.Builders.ModalCommandParameterBuilder.SetParameterType(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Interactions.Builders.ParameterBuilder`2">
            <summary>
                Represents the base builder class for creating <see cref="T:Discord.Interactions.IParameterInfo"/>.
            </summary>
            <typeparam name="TInfo">The <see cref="T:Discord.Interactions.IParameterInfo"/> this builder yields when built.</typeparam>
            <typeparam name="TBuilder">Inherited <see cref="T:Discord.Interactions.Builders.ParameterBuilder`2"/> type.</typeparam>
        </member>
        <member name="P:Discord.Interactions.Builders.ParameterBuilder`2.Command">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.Builders.ParameterBuilder`2.Name">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.Builders.ParameterBuilder`2.ParameterType">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.Builders.ParameterBuilder`2.IsRequired">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.Builders.ParameterBuilder`2.IsParameterArray">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.Builders.ParameterBuilder`2.DefaultValue">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.Builders.ParameterBuilder`2.Attributes">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.Builders.ParameterBuilder`2.Preconditions">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.Builders.ParameterBuilder`2.WithName(System.String)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.ParameterBuilder`2.Name"/>.
            </summary>
            <param name="name">New value of the <see cref="P:Discord.Interactions.Builders.ParameterBuilder`2.Name"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ParameterBuilder`2.SetParameterType(System.Type)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.ParameterBuilder`2.ParameterType"/>.
            </summary>
            <param name="type">New value of the <see cref="P:Discord.Interactions.Builders.ParameterBuilder`2.ParameterType"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ParameterBuilder`2.SetRequired(System.Boolean)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.ParameterBuilder`2.IsRequired"/>.
            </summary>
            <param name="isRequired">New value of the <see cref="P:Discord.Interactions.Builders.ParameterBuilder`2.IsRequired"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ParameterBuilder`2.SetDefaultValue(System.Object)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.ParameterBuilder`2.DefaultValue"/>.
            </summary>
            <param name="defaultValue">New value of the <see cref="P:Discord.Interactions.Builders.ParameterBuilder`2.DefaultValue"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ParameterBuilder`2.AddAttributes(System.Attribute[])">
            <summary>
                Adds attributes to <see cref="P:Discord.Interactions.Builders.ParameterBuilder`2.Attributes"/>
            </summary>
            <param name="attributes">New attributes to be added to <see cref="P:Discord.Interactions.Builders.ParameterBuilder`2.Attributes"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ParameterBuilder`2.AddPreconditions(Discord.Interactions.ParameterPreconditionAttribute[])">
            <summary>
                Adds preconditions to <see cref="P:Discord.Interactions.Builders.ParameterBuilder`2.Preconditions"/>
            </summary>
            <param name="attributes">New attributes to be added to <see cref="P:Discord.Interactions.Builders.ParameterBuilder`2.Preconditions"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.ParameterBuilder`2.Discord#Interactions#Builders#IParameterBuilder#WithName(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.Builders.ParameterBuilder`2.Discord#Interactions#Builders#IParameterBuilder#SetParameterType(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.Builders.ParameterBuilder`2.Discord#Interactions#Builders#IParameterBuilder#SetRequired(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.Builders.ParameterBuilder`2.Discord#Interactions#Builders#IParameterBuilder#SetDefaultValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.Builders.ParameterBuilder`2.Discord#Interactions#Builders#IParameterBuilder#AddAttributes(System.Attribute[])">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.Builders.ParameterBuilder`2.Discord#Interactions#Builders#IParameterBuilder#AddPreconditions(Discord.Interactions.ParameterPreconditionAttribute[])">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Interactions.Builders.SlashCommandParameterBuilder">
            <summary>
                Represents a builder for creating <see cref="T:Discord.Interactions.SlashCommandParameterInfo"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.Description">
            <summary>
                Gets or sets the description of this parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.MaxValue">
            <summary>
                Gets or sets the max value of this parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.MinValue">
            <summary>
                Gets or sets the min value of this parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.MinLength">
            <summary>
                Gets or sets the minimum length allowed for a string type parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.MaxLength">
            <summary>
                Gets or sets the maximum length allowed for a string type parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.Choices">
            <summary>
                Gets a collection of the choices of this command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.ChannelTypes">
            <summary>
                Gets a collection of the channel types of this command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.ComplexParameterFields">
            <summary>
                Gets the constructor parameters of this parameter, if <see cref="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.IsComplexParameter"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.Autocomplete">
            <summary>
                Gets or sets whether this parameter should be configured for Autocomplete Interactions.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.TypeConverter">
            <summary>
                Gets or sets the <see cref="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.TypeConverter"/> of this parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.IsComplexParameter">
            <summary>
                Gets whether this type should be treated as a complex parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.ComplexParameterInitializer">
            <summary>
                Gets the initializer delegate for this parameter, if <see cref="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.IsComplexParameter"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.AutocompleteHandler">
            <summary>
                Gets or sets the <see cref="T:Discord.Interactions.IAutocompleteHandler"/> of this parameter.
            </summary>
        </member>
        <member name="M:Discord.Interactions.Builders.SlashCommandParameterBuilder.#ctor(Discord.Interactions.Builders.ICommandBuilder,System.String,System.Type,Discord.Interactions.ComplexParameterInitializer)">
            <summary>
                Initializes a new <see cref="T:Discord.Interactions.Builders.SlashCommandParameterBuilder"/>.
            </summary>
            <param name="command">Parent command of this parameter.</param>
            <param name="name">Name of this command.</param>
            <param name="type">Type of this parameter.</param>
        </member>
        <member name="M:Discord.Interactions.Builders.SlashCommandParameterBuilder.WithDescription(System.String)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.Description"/>.
            </summary>
            <param name="description">New value of the <see cref="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.Description"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.SlashCommandParameterBuilder.WithMinValue(System.Double)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.MinValue"/>.
            </summary>
            <param name="value">New value of the <see cref="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.MinValue"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.SlashCommandParameterBuilder.WithMaxValue(System.Double)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.MaxValue"/>.
            </summary>
            <param name="value">New value of the <see cref="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.MaxValue"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.SlashCommandParameterBuilder.WithMinLength(System.Int32)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.MinLength"/>.
            </summary>
            <param name="length">New value of the <see cref="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.MinLength"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.SlashCommandParameterBuilder.WithMaxLength(System.Int32)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.MaxLength"/>.
            </summary>
            <param name="length">New value of the <see cref="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.MaxLength"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.SlashCommandParameterBuilder.WithChoices(Discord.Interactions.ParameterChoice[])">
            <summary>
                Adds parameter choices to <see cref="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.Choices"/>.
            </summary>
            <param name="options">New choices to be added to <see cref="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.Choices"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.SlashCommandParameterBuilder.WithChannelTypes(Discord.ChannelType[])">
            <summary>
                Adds channel types to <see cref="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.ChannelTypes"/>.
            </summary>
            <param name="channelTypes">New channel types to be added to <see cref="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.ChannelTypes"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.SlashCommandParameterBuilder.WithChannelTypes(System.Collections.Generic.IEnumerable{Discord.ChannelType})">
            <summary>
                Adds channel types to <see cref="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.ChannelTypes"/>.
            </summary>
            <param name="channelTypes">New channel types to be added to <see cref="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.ChannelTypes"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.SlashCommandParameterBuilder.WithAutocompleteHandler(System.Type,System.IServiceProvider)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.AutocompleteHandler"/>.
            </summary>
            <param name="autocompleteHandlerType">Type of the <see cref="T:Discord.Interactions.IAutocompleteHandler"/>.</param>
            <param name="services">Service container to be used to resolve the dependencies of this parameters <see cref="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.TypeConverter"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.SlashCommandParameterBuilder.SetParameterType(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.Builders.SlashCommandParameterBuilder.SetParameterType(System.Type,System.IServiceProvider)">
            <summary>
                Sets <see cref="P:Discord.Interactions.Builders.ParameterBuilder`2.ParameterType"/>.
            </summary>
            <param name="type">New value of the <see cref="P:Discord.Interactions.Builders.ParameterBuilder`2.ParameterType"/>.</param>
            <param name="services">Service container to be used to resolve the dependencies of this parameters <see cref="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.TypeConverter"/>.</param>
            <returns>
                The builder instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.Builders.SlashCommandParameterBuilder.AddComplexParameterField(System.Action{Discord.Interactions.Builders.SlashCommandParameterBuilder})">
            <summary>
                Adds a parameter builders to <see cref="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.ComplexParameterFields"/>.
            </summary>
            <param name="configure"><see cref="T:Discord.Interactions.Builders.SlashCommandParameterBuilder"/> factory.</param>
            <returns>
                The builder instance.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the added field has a <see cref="T:Discord.Interactions.ComplexParameterAttribute"/>.</exception>
        </member>
        <member name="M:Discord.Interactions.Builders.SlashCommandParameterBuilder.AddComplexParameterFields(Discord.Interactions.Builders.SlashCommandParameterBuilder[])">
            <summary>
                Adds parameter builders to <see cref="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.ComplexParameterFields"/>.
            </summary>
            <param name="fields">New parameter builders to be added to <see cref="P:Discord.Interactions.Builders.SlashCommandParameterBuilder.ComplexParameterFields"/>.</param>
            <returns>
                The builder instance.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the added field has a <see cref="T:Discord.Interactions.ComplexParameterAttribute"/>.</exception>
        </member>
        <member name="T:Discord.Interactions.IModal">
            <summary>
                Represents a generic <see cref="T:Discord.Modal"/> for use with the interaction service.
            </summary>
        </member>
        <member name="P:Discord.Interactions.IModal.Title">
            <summary>
                Gets the modal's title.
            </summary>
        </member>
        <member name="T:Discord.Interactions.ParameterChoice">
            <summary>
                Represents a Slash Command parameter choice.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ParameterChoice.Name">
            <summary>
                Gets the name of the choice.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ParameterChoice.Value">
            <summary>
                Gets the value of the choice.
            </summary>
        </member>
        <member name="T:Discord.Interactions.SlashCommandChoiceType">
            <summary>
                Supported types of pre-defined parameter choices.
            </summary>
        </member>
        <member name="F:Discord.Interactions.SlashCommandChoiceType.String">
            <summary>
                Discord type for <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="F:Discord.Interactions.SlashCommandChoiceType.Integer">
            <summary>
                Discord type for <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="F:Discord.Interactions.SlashCommandChoiceType.Number">
            <summary>
                Discord type for <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:Discord.Interactions.IDiscordInteractionExtentions.RespondWithModalAsync``1(Discord.IDiscordInteraction,System.String,Discord.RequestOptions,System.Action{Discord.ModalBuilder})">
            <summary>
                Respond to an interaction with a <see cref="T:Discord.Interactions.IModal"/>.
            </summary>
            <typeparam name="T">Type of the <see cref="T:Discord.Interactions.IModal"/> implementation.</typeparam>
            <param name="interaction">The interaction to respond to.</param>
            <param name="modifyModal">Delegate that can be used to modify the modal.</param>
            <param name="options">The request options for this <see langword="async"/> request.</param>
            <returns>A task that represents the asynchronous operation of responding to the interaction.</returns>
        </member>
        <member name="M:Discord.Interactions.IDiscordInteractionExtentions.RespondWithModalAsync``1(Discord.IDiscordInteraction,System.String,Discord.Interactions.InteractionService,Discord.RequestOptions,System.Action{Discord.ModalBuilder})">
            <summary>
                Respond to an interaction with a <see cref="T:Discord.Interactions.IModal"/>.
            </summary>
            <remarks>
                This method overload uses the <paramref name="interactionService"/> parameter to create a new <see cref="T:Discord.Interactions.ModalInfo"/>
                if there isn't a built one already in cache.
            </remarks>
            <typeparam name="T">Type of the <see cref="T:Discord.Interactions.IModal"/> implementation.</typeparam>
            <param name="interaction">The interaction to respond to.</param>
            <param name="interactionService">Interaction service instance that should be used to build <see cref="T:Discord.Interactions.ModalInfo"/>s.</param>
            <param name="options">The request options for this <see langword="async"/> request.</param>
            <param name="modifyModal">Delegate that can be used to modify the modal.</param>
            <returns></returns>
        </member>
        <member name="M:Discord.Interactions.IDiscordInteractionExtentions.RespondWithModalAsync``1(Discord.IDiscordInteraction,System.String,``0,Discord.RequestOptions,System.Action{Discord.ModalBuilder})">
            <summary>
                Respond to an interaction with an <see cref="T:Discord.Interactions.IModal"/> and fills the value fields of the modal using the property values of the provided
                instance.
            </summary>
            <typeparam name="T">Type of the <see cref="T:Discord.Interactions.IModal"/> implementation.</typeparam>
            <param name="interaction">The interaction to respond to.</param>
            <param name="modal">The <see cref="T:Discord.Interactions.IModal"/> instance to get field values from.</param>
            <param name="options">The request options for this <see langword="async"/> request.</param>
            <param name="modifyModal">Delegate that can be used to modify the modal.</param>
            <returns></returns>
        </member>
        <member name="T:Discord.Interactions.IInteractionModuleBase">
            <summary>
                Represents a generic interaction module base.
            </summary>
        </member>
        <member name="M:Discord.Interactions.IInteractionModuleBase.SetContext(Discord.IInteractionContext)">
            <summary>
                Sets the context of this module.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Discord.Interactions.IInteractionModuleBase.BeforeExecuteAsync(Discord.Interactions.ICommandInfo)">
            <summary>
                Method body to be executed asynchronously before executing an application command.
            </summary>
            <param name="command">Command information related to the Discord Application Command.</param>
        </member>
        <member name="M:Discord.Interactions.IInteractionModuleBase.BeforeExecute(Discord.Interactions.ICommandInfo)">
            <summary>
                Method body to be executed before executing an application command.
            </summary>
            <param name="command">Command information related to the Discord Application Command.</param>
        </member>
        <member name="M:Discord.Interactions.IInteractionModuleBase.AfterExecuteAsync(Discord.Interactions.ICommandInfo)">
            <summary>
                Method body to be executed asynchronously after an application command execution.
            </summary>
            <param name="command">Command information related to the Discord Application Command.</param>
        </member>
        <member name="M:Discord.Interactions.IInteractionModuleBase.AfterExecute(Discord.Interactions.ICommandInfo)">
            <summary>
                Method body to be executed after an application command execution.
            </summary>
            <param name="command">Command information related to the Discord Application Command.</param>
        </member>
        <member name="M:Discord.Interactions.IInteractionModuleBase.OnModuleBuilding(Discord.Interactions.InteractionService,Discord.Interactions.ModuleInfo)">
            <summary>
                Method body to be executed when <see cref="M:Discord.Interactions.Builders.ModuleBuilder.Build(Discord.Interactions.InteractionService,System.IServiceProvider,Discord.Interactions.ModuleInfo)"/> is called.
            </summary>
            <param name="commandService">Command Service instance that built this module.</param>
            <param name="module">Info class of this module.</param>
        </member>
        <member name="M:Discord.Interactions.IInteractionModuleBase.Construct(Discord.Interactions.Builders.ModuleBuilder,Discord.Interactions.InteractionService)">
            <summary>
                Method body to be executed after the automated module creation is completed and before <see cref="M:Discord.Interactions.Builders.ModuleBuilder.Build(Discord.Interactions.InteractionService,System.IServiceProvider,Discord.Interactions.ModuleInfo)"/> is called.
            </summary>
            <param name="builder">Builder class of this module.</param>
            <param name="commandService">Command Service instance that is building this method.</param>
        </member>
        <member name="T:Discord.Interactions.AutocompleteCommandInfo">
            <summary>
                Represents the info class of an attribute based method for handling Autocomplete Interaction events.
            </summary>
        </member>
        <member name="P:Discord.Interactions.AutocompleteCommandInfo.ParameterName">
            <summary>
                Gets the name of the target parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.AutocompleteCommandInfo.CommandName">
            <summary>
                Gets the name of the target command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.AutocompleteCommandInfo.Parameters">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.AutocompleteCommandInfo.SupportsWildCards">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.AutocompleteCommandInfo.ExecuteAsync(Discord.IInteractionContext,System.IServiceProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.AutocompleteCommandInfo.InvokeModuleEvent(Discord.IInteractionContext,Discord.Interactions.IResult)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.AutocompleteCommandInfo.GetLogString(Discord.IInteractionContext)">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Interactions.ExecuteCallback">
            <summary>
                Represents a cached method execution delegate.
            </summary>
            <param name="context">Execution context that will be injected into the module class.</param>
            <param name="args">Method arguments array.</param>
            <param name="serviceProvider">Service collection for initializing the module.</param>
            <param name="commandInfo">Command info class of the executed method.</param>
            <returns>
                A task representing the execution operation.
            </returns>
        </member>
        <member name="T:Discord.Interactions.CommandInfo`1">
            <summary>
                The base information class for <see cref="T:Discord.Interactions.InteractionService"/> commands.
            </summary>
            <typeparam name="TParameter">The type of <see cref="T:Discord.Interactions.IParameterInfo"/> that is used by this command type.</typeparam>
        </member>
        <member name="P:Discord.Interactions.CommandInfo`1.Module">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.CommandInfo`1.CommandService">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.CommandInfo`1.Name">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.CommandInfo`1.MethodName">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.CommandInfo`1.IgnoreGroupNames">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.CommandInfo`1.SupportsWildCards">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.CommandInfo`1.IsTopLevelCommand">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.CommandInfo`1.RunMode">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.CommandInfo`1.Attributes">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.CommandInfo`1.Preconditions">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.CommandInfo`1.Parameters">
            <inheritdoc cref="P:Discord.Interactions.ICommandInfo.Parameters"/>
        </member>
        <member name="M:Discord.Interactions.CommandInfo`1.ExecuteAsync(Discord.IInteractionContext,System.IServiceProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.CommandInfo`1.CheckPreconditionsAsync(Discord.IInteractionContext,System.IServiceProvider)">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.CommandInfo`1.Discord#Interactions#ICommandInfo#Parameters">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.CommandInfo`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Interactions.ComponentCommandInfo">
            <summary>
                Represents the info class of an attribute based method for handling Component Interaction events.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ComponentCommandInfo.Parameters">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.ComponentCommandInfo.SupportsWildCards">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.ComponentCommandInfo.ExecuteAsync(Discord.IInteractionContext,System.IServiceProvider)">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Interactions.ContextCommandInfo">
            <summary>
                Base information class for attribute based context command handlers.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ContextCommandInfo.CommandType">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.ContextCommandInfo.DefaultPermission">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.ContextCommandInfo.IsEnabledInDm">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.ContextCommandInfo.IsNsfw">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.ContextCommandInfo.DefaultMemberPermissions">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.ContextCommandInfo.ContextTypes">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.ContextCommandInfo.IntegrationTypes">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.ContextCommandInfo.Parameters">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.ContextCommandInfo.SupportsWildCards">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.ContextCommandInfo.IgnoreGroupNames">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.ContextCommandInfo.InvokeModuleEvent(Discord.IInteractionContext,Discord.Interactions.IResult)">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Interactions.MessageCommandInfo">
            <summary>
                Represents the info class of an attribute based method for command type <see cref="F:Discord.ApplicationCommandType.Message"/>.
            </summary>
        </member>
        <member name="M:Discord.Interactions.MessageCommandInfo.ExecuteAsync(Discord.IInteractionContext,System.IServiceProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.MessageCommandInfo.GetLogString(Discord.IInteractionContext)">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Interactions.UserCommandInfo">
            <summary>
                Represents the info class of an attribute based method for command type <see cref="F:Discord.ApplicationCommandType.User"/>.
            </summary>
        </member>
        <member name="M:Discord.Interactions.UserCommandInfo.ExecuteAsync(Discord.IInteractionContext,System.IServiceProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.UserCommandInfo.GetLogString(Discord.IInteractionContext)">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Interactions.ModalCommandInfo">
            <summary>
                Represents the info class of an attribute based method for handling Modal Interaction events.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModalCommandInfo.Modal">
            <summary>
                Gets the <see cref="T:Discord.Interactions.ModalInfo"/> class for this commands <see cref="T:Discord.Interactions.IModal"/> parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModalCommandInfo.SupportsWildCards">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.ModalCommandInfo.Parameters">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.ModalCommandInfo.ExecuteAsync(Discord.IInteractionContext,System.IServiceProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.ModalCommandInfo.InvokeModuleEvent(Discord.IInteractionContext,Discord.Interactions.IResult)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.ModalCommandInfo.GetLogString(Discord.IInteractionContext)">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Interactions.SlashCommandInfo">
            <summary>
                Represents the info class of an attribute based method for command type <see cref="F:Discord.ApplicationCommandType.Slash"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.SlashCommandInfo.Description">
            <summary>
                Gets the command description that will be displayed on Discord.
            </summary>
        </member>
        <member name="P:Discord.Interactions.SlashCommandInfo.CommandType">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.SlashCommandInfo.DefaultPermission">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.SlashCommandInfo.IsEnabledInDm">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.SlashCommandInfo.IsNsfw">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.SlashCommandInfo.DefaultMemberPermissions">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.SlashCommandInfo.Parameters">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.SlashCommandInfo.SupportsWildCards">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.SlashCommandInfo.FlattenedParameters">
            <summary>
                Gets the flattened collection of command parameters and complex parameter fields.
            </summary>
        </member>
        <member name="P:Discord.Interactions.SlashCommandInfo.ContextTypes">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.SlashCommandInfo.IntegrationTypes">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.SlashCommandInfo.ExecuteAsync(Discord.IInteractionContext,System.IServiceProvider)">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Interactions.IApplicationCommandInfo">
            <summary>
                Represents a <see cref="T:Discord.Interactions.InteractionService"/> command that can be registered to Discord.
            </summary>
        </member>
        <member name="P:Discord.Interactions.IApplicationCommandInfo.Name">
            <summary>
                Gets the name of this command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.IApplicationCommandInfo.CommandType">
            <summary>
                Gets the type of this command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.IApplicationCommandInfo.DefaultPermission">
            <summary>
                Gets the DefaultPermission of this command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.IApplicationCommandInfo.IsEnabledInDm">
            <summary>
                Gets whether this command can be used in DMs.
            </summary>
        </member>
        <member name="P:Discord.Interactions.IApplicationCommandInfo.IsNsfw">
            <summary>
                Gets whether this command can is age restricted.
            </summary>
        </member>
        <member name="P:Discord.Interactions.IApplicationCommandInfo.DefaultMemberPermissions">
            <summary>
                Gets the default permissions needed for executing this command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.IApplicationCommandInfo.ContextTypes">
            <summary>
                Gets the context types this command can be executed in.
            </summary>
        </member>
        <member name="P:Discord.Interactions.IApplicationCommandInfo.IntegrationTypes">
            <summary>
                Gets the install methods for this command.
            </summary>
        </member>
        <member name="T:Discord.Interactions.ICommandInfo">
            <summary>
                Represent a command information object that can be executed.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ICommandInfo.Name">
            <summary>
                Gets the name of the command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ICommandInfo.MethodName">
            <summary>
                Gets the name of the command handler method.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ICommandInfo.IgnoreGroupNames">
            <summary>
                Gets <see langword="true"/> if this command will be registered and executed as a standalone command, unaffected by the <see cref="T:Discord.Interactions.GroupAttribute"/>s of
                of the commands parents.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ICommandInfo.SupportsWildCards">
            <summary>
                Gets whether this command supports wild card patterns.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ICommandInfo.IsTopLevelCommand">
            <summary>
                Gets <see langword="true"/> if this command is a top level command and none of its parents have a <see cref="T:Discord.Interactions.GroupAttribute"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ICommandInfo.Module">
            <summary>
                Gets the module that the method belongs to.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ICommandInfo.CommandService">
            <summary>
                Gets the the underlying command service.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ICommandInfo.RunMode">
            <summary>
                Get the run mode this command gets executed with.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ICommandInfo.Attributes">
            <summary>
                Gets a collection of the attributes of this command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ICommandInfo.Preconditions">
            <summary>
                Gets a collection of the preconditions of this command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ICommandInfo.Parameters">
            <summary>
                Gets a collection of the parameters of this command.
            </summary>
        </member>
        <member name="M:Discord.Interactions.ICommandInfo.ExecuteAsync(Discord.IInteractionContext,System.IServiceProvider)">
            <summary>
                Executes the command with the provided context.
            </summary>
            <param name="context">The execution context.</param>
            <param name="services">Dependencies that will be used to create the module instance.</param>
            <returns>
                A task representing the execution process. The task result contains the execution result.
            </returns>
        </member>
        <member name="M:Discord.Interactions.ICommandInfo.CheckPreconditionsAsync(Discord.IInteractionContext,System.IServiceProvider)">
            <summary>
                Check if an execution context meets the command precondition requirements.
            </summary>
        </member>
        <member name="T:Discord.Interactions.InputComponentInfo">
            <summary>
                Represents the base info class for <see cref="T:Discord.Interactions.IModal"/> input components.
            </summary>
        </member>
        <member name="P:Discord.Interactions.InputComponentInfo.Modal">
            <summary>
                Gets the parent modal of this component.
            </summary>
        </member>
        <member name="P:Discord.Interactions.InputComponentInfo.CustomId">
            <summary>
                Gets the custom id of this component.
            </summary>
        </member>
        <member name="P:Discord.Interactions.InputComponentInfo.Label">
            <summary>
                Gets the label of this component.
            </summary>
        </member>
        <member name="P:Discord.Interactions.InputComponentInfo.IsRequired">
            <summary>
                Gets whether or not this component requires a user input.
            </summary>
        </member>
        <member name="P:Discord.Interactions.InputComponentInfo.ComponentType">
            <summary>
                Gets the type of this component.
            </summary>
        </member>
        <member name="P:Discord.Interactions.InputComponentInfo.Type">
            <summary>
                Gets the reference type of this component.
            </summary>
        </member>
        <member name="P:Discord.Interactions.InputComponentInfo.PropertyInfo">
            <summary>
                Gets the property linked to this component.
            </summary>
        </member>
        <member name="P:Discord.Interactions.InputComponentInfo.TypeConverter">
            <summary>
                Gets the <see cref="T:Discord.Interactions.ComponentTypeConverter"/> assigned to this component.
            </summary>
        </member>
        <member name="P:Discord.Interactions.InputComponentInfo.DefaultValue">
            <summary>
                Gets the default value of this component.
            </summary>
        </member>
        <member name="P:Discord.Interactions.InputComponentInfo.Attributes">
            <summary>
                Gets a collection of the attributes of this command.
            </summary>
        </member>
        <member name="T:Discord.Interactions.TextInputComponentInfo">
            <summary>
                Represents the <see cref="T:Discord.Interactions.InputComponentInfo"/> class for <see cref="F:Discord.ComponentType.TextInput"/> type.
            </summary>
        </member>
        <member name="P:Discord.Interactions.TextInputComponentInfo.Style">
            <summary>
                Gets the style of the text input.
            </summary>
        </member>
        <member name="P:Discord.Interactions.TextInputComponentInfo.Placeholder">
            <summary>
                Gets the placeholder of the text input.
            </summary>
        </member>
        <member name="P:Discord.Interactions.TextInputComponentInfo.MinLength">
            <summary>
                Gets the minimum length of the text input.
            </summary>
        </member>
        <member name="P:Discord.Interactions.TextInputComponentInfo.MaxLength">
            <summary>
                Gets the maximum length of the text input.
            </summary>
        </member>
        <member name="P:Discord.Interactions.TextInputComponentInfo.InitialValue">
            <summary>
                Gets the initial value to be displayed by this input.
            </summary>
        </member>
        <member name="T:Discord.Interactions.IParameterInfo">
            <summary>
                Represents a <see cref="T:Discord.Interactions.ICommandInfo"/> parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.IParameterInfo.Command">
            <summary>
                Gets the command that this parameter belongs to.
            </summary>
        </member>
        <member name="P:Discord.Interactions.IParameterInfo.Name">
            <summary>
                Gets the name of this parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.IParameterInfo.ParameterType">
            <summary>
                Gets the type of this parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.IParameterInfo.IsRequired">
            <summary>
                Gets whether this parameter is required.
            </summary>
        </member>
        <member name="P:Discord.Interactions.IParameterInfo.IsParameterArray">
            <summary>
                Gets whether this parameter is marked with a <see langword="params"/> keyword.
            </summary>
        </member>
        <member name="P:Discord.Interactions.IParameterInfo.DefaultValue">
            <summary>
                Gets the default value of this parameter if the parameter is optional.
            </summary>
        </member>
        <member name="P:Discord.Interactions.IParameterInfo.Attributes">
            <summary>
                Gets a list of the attributes this parameter has.
            </summary>
        </member>
        <member name="P:Discord.Interactions.IParameterInfo.Preconditions">
            <summary>
                Gets a list of the preconditions this parameter has.
            </summary>
        </member>
        <member name="M:Discord.Interactions.IParameterInfo.CheckPreconditionsAsync(Discord.IInteractionContext,System.Object,System.IServiceProvider)">
            <summary>
                Check if an execution context meets the parameter precondition requirements.
            </summary>
        </member>
        <member name="T:Discord.Interactions.ModalInitializer">
            <summary>
                Represents a cached object initialization delegate.
            </summary>
            <param name="args">Property arguments array.</param>
            <returns>
                Returns the constructed object.
            </returns>
        </member>
        <member name="T:Discord.Interactions.ModalInfo">
            <summary>
                Represents the info class of an <see cref="T:Discord.Interactions.IModal"/> form.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModalInfo.Title">
            <summary>
                Gets the title of this modal.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModalInfo.Type">
            <summary>
                Gets the <see cref="T:Discord.Interactions.IModal"/> implementation used to initialize this object.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModalInfo.Components">
            <summary>
                Gets a collection of the components of this modal.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModalInfo.TextComponents">
            <summary>
                Gets a collection of the text components of this modal.
            </summary>
        </member>
        <member name="M:Discord.Interactions.ModalInfo.CreateModal(Discord.IModalInteraction,System.Boolean)">
            <summary>
                Creates an <see cref="T:Discord.Interactions.IModal"/> and fills it with provided message components.
            </summary>
            <param name="modalInteraction"><see cref="T:Discord.IModalInteraction"/> that will be injected into the modal.</param>
            <returns>
                A <see cref="T:Discord.Interactions.IModal"/> filled with the provided components.
            </returns>
        </member>
        <member name="M:Discord.Interactions.ModalInfo.CreateModalAsync(Discord.IInteractionContext,System.IServiceProvider,System.Boolean)">
            <summary>
                Creates an <see cref="T:Discord.Interactions.IModal"/> and fills it with provided message components.
            </summary>
            <param name="context">Context of the <see cref="T:Discord.IModalInteraction"/> that will be injected into the modal.</param>
            <param name="services">Services to be passed onto the <see cref="T:Discord.Interactions.ComponentTypeConverter"/>s of the modal fields.</param>
            <param name="throwOnMissingField">Whether or not this method should exit on encountering a missing modal field.</param>
            <returns>
                A <see cref="T:Discord.Interactions.TypeConverterResult"/> if a type conversion has failed, else  a <see cref="T:Discord.Interactions.ParseResult"/>.
            </returns>
        </member>
        <member name="T:Discord.Interactions.ModuleInfo">
            <summary>
                Contains the information of a Interactions Module.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModuleInfo.CommandService">
            <summary>
                Gets the underlying command service.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModuleInfo.Name">
            <summary>
                Gets the name of this module class.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModuleInfo.SlashGroupName">
            <summary>
                Gets the group name of this module, if the module is marked with a <see cref="T:Discord.Interactions.GroupAttribute"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModuleInfo.IsSlashGroup">
            <summary>
                Gets <see langword="true"/> if this module is marked with a <see cref="T:Discord.Interactions.GroupAttribute"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModuleInfo.Description">
            <summary>
                Gets the description of this module if <see cref="P:Discord.Interactions.ModuleInfo.IsSlashGroup"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModuleInfo.DefaultPermission">
            <summary>
                Gets the default Permission of this module.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModuleInfo.IsEnabledInDm">
            <summary>
                Gets whether this command can be used in DMs.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModuleInfo.IsNsfw">
            <summary>
                Gets whether this command is age restricted.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModuleInfo.DefaultMemberPermissions">
            <summary>
                Gets the default permissions needed for executing this command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModuleInfo.SubModules">
            <summary>
                Gets the collection of Sub Modules of this module.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModuleInfo.SlashCommands">
            <summary>
                Gets the Slash Commands that are declared in this module.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModuleInfo.ContextCommands">
            <summary>
                Gets the Context Commands that are declared in this module.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModuleInfo.ComponentCommands">
            <summary>
                Gets the Component Commands that are declared in this module.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModuleInfo.AutocompleteCommands">
            <summary>
                Gets the Autocomplete Commands that are declared in this module.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModuleInfo.Parent">
            <summary>
                Gets the declaring type of this module, if <see cref="P:Discord.Interactions.ModuleInfo.IsSubModule"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModuleInfo.IsSubModule">
            <summary>
                Gets <see langword="true"/> if this module is declared by another <see cref="T:Discord.Interactions.InteractionModuleBase`1"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModuleInfo.Attributes">
            <summary>
                Gets a collection of the attributes of this module.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModuleInfo.Preconditions">
            <summary>
                Gets a collection of the preconditions of this module.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModuleInfo.IsTopLevelGroup">
            <summary>
                Gets <see langword="true"/> if this module has a valid <see cref="T:Discord.Interactions.GroupAttribute"/> and has no parent with a <see cref="T:Discord.Interactions.GroupAttribute"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModuleInfo.DontAutoRegister">
            <summary>
                Gets <see langword="true"/> if this module will not be registered by <see cref="M:Discord.Interactions.InteractionService.RegisterCommandsGloballyAsync(System.Boolean)"/>
                or <see cref="M:Discord.Interactions.InteractionService.RegisterCommandsToGuildAsync(System.UInt64,System.Boolean)"/> methods.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModuleInfo.ContextTypes">
            <summary>
                Gets the context types commands in this module can be executed in.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModuleInfo.IntegrationTypes">
            <summary>
                Gets the install method for commands in this module.
            </summary>
        </member>
        <member name="T:Discord.Interactions.CommandParameterInfo">
            <summary>
                Represents the base parameter info class for <see cref="T:Discord.Interactions.InteractionService"/> commands.
            </summary>
        </member>
        <member name="P:Discord.Interactions.CommandParameterInfo.Command">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.CommandParameterInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.CommandParameterInfo.ParameterType">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.CommandParameterInfo.IsRequired">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.CommandParameterInfo.IsParameterArray">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.CommandParameterInfo.DefaultValue">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.CommandParameterInfo.Attributes">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.CommandParameterInfo.Preconditions">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.CommandParameterInfo.CheckPreconditionsAsync(Discord.IInteractionContext,System.Object,System.IServiceProvider)">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Interactions.ComponentCommandParameterInfo">
            <summary>
                Represents the parameter info class for <see cref="T:Discord.Interactions.ComponentCommandInfo"/> commands.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ComponentCommandParameterInfo.TypeConverter">
            <summary>
                Gets the <see cref="T:Discord.Interactions.ComponentTypeConverter"/> that will be used to convert a message component value into
                <see cref="P:Discord.Interactions.CommandParameterInfo.ParameterType"/>, if  <see cref="P:Discord.Interactions.ComponentCommandParameterInfo.IsRouteSegmentParameter"/> is false.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ComponentCommandParameterInfo.TypeReader">
            <summary>
                Gets the <see cref="P:Discord.Interactions.ComponentCommandParameterInfo.TypeReader"/> that will be used to convert a CustomId segment value into
                <see cref="P:Discord.Interactions.CommandParameterInfo.ParameterType"/>, if <see cref="P:Discord.Interactions.ComponentCommandParameterInfo.IsRouteSegmentParameter"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ComponentCommandParameterInfo.IsRouteSegmentParameter">
            <summary>
                Gets whether this parameter is a CustomId segment or a component value parameter.
            </summary>
        </member>
        <member name="T:Discord.Interactions.ModalCommandParameterInfo">
            <summary>
                Represents the base parameter info class for <see cref="T:Discord.Interactions.InteractionService"/> modals.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModalCommandParameterInfo.Modal">
            <summary>
                Gets the <see cref="T:Discord.Interactions.ModalInfo"/> class for this parameter if <see cref="P:Discord.Interactions.ModalCommandParameterInfo.IsModalParameter"/> is true.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModalCommandParameterInfo.IsModalParameter">
            <summary>
                Gets whether this parameter is an <see cref="T:Discord.Interactions.IModal"/>
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModalCommandParameterInfo.TypeReader">
            <summary>
                Gets the <see cref="P:Discord.Interactions.ModalCommandParameterInfo.TypeReader"/> assigned to this parameter, if <see cref="P:Discord.Interactions.ModalCommandParameterInfo.IsModalParameter"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ModalCommandParameterInfo.Command">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Interactions.ComplexParameterInitializer">
            <summary>
                Represents a cached argument constructor delegate.
            </summary>
            <param name="args">Method arguments array.</param>
            <returns>
                Returns the constructed object.
            </returns>
        </member>
        <member name="T:Discord.Interactions.SlashCommandParameterInfo">
            <summary>
                Represents the parameter info class for <see cref="T:Discord.Interactions.SlashCommandInfo"/> commands.
            </summary>
        </member>
        <member name="P:Discord.Interactions.SlashCommandParameterInfo.Command">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.SlashCommandParameterInfo.Description">
            <summary>
                Gets the description of the Slash Command Parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.SlashCommandParameterInfo.MinValue">
            <summary>
                Gets the minimum value permitted for a number type parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.SlashCommandParameterInfo.MaxValue">
            <summary>
                Gets the maximum value permitted for a number type parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.SlashCommandParameterInfo.MinLength">
            <summary>
                Gets the minimum length allowed for a string type parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.SlashCommandParameterInfo.MaxLength">
            <summary>
                Gets the maximum length allowed for a string type parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.SlashCommandParameterInfo.TypeConverter">
            <summary>
                Gets the <see cref="T:Discord.Interactions.TypeConverter`1"/> that will be used to convert the incoming <see cref="T:Discord.IDiscordInteractionData"/> into
                <see cref="P:Discord.Interactions.CommandParameterInfo.ParameterType"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.SlashCommandParameterInfo.AutocompleteHandler">
            <summary>
                Gets the <see cref="T:Discord.Interactions.IAutocompleteHandler"/> that's linked to this parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.SlashCommandParameterInfo.IsAutocomplete">
            <summary>
                Gets whether this parameter is configured for Autocomplete Interactions.
            </summary>
        </member>
        <member name="P:Discord.Interactions.SlashCommandParameterInfo.IsComplexParameter">
            <summary>
                Gets whether this type should be treated as a complex parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.SlashCommandParameterInfo.DiscordOptionType">
            <summary>
                Gets the Discord option type this parameter represents. If the parameter is not a complex parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.SlashCommandParameterInfo.Choices">
            <summary>
                Gets the parameter choices of this Slash Application Command parameter.
            </summary>
        </member>
        <member name="P:Discord.Interactions.SlashCommandParameterInfo.ChannelTypes">
            <summary>
                Gets the allowed channel types for this option.
            </summary>
        </member>
        <member name="P:Discord.Interactions.SlashCommandParameterInfo.ComplexParameterFields">
            <summary>
                Gets the constructor parameters of this parameter, if <see cref="P:Discord.Interactions.SlashCommandParameterInfo.IsComplexParameter"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="T:Discord.Interactions.InteractionCommandError">
            <summary>
                Defines the type of error a command can throw.
            </summary>
        </member>
        <member name="F:Discord.Interactions.InteractionCommandError.UnknownCommand">
            <summary>
                Thrown when the command is unknown.
            </summary>
        </member>
        <member name="F:Discord.Interactions.InteractionCommandError.ConvertFailed">
            <summary>
                Thrown when the Slash Command parameter fails to be converted by a TypeReader.
            </summary>
        </member>
        <member name="F:Discord.Interactions.InteractionCommandError.BadArgs">
            <summary>
                Thrown when the input text has too few or too many arguments.
            </summary>
        </member>
        <member name="F:Discord.Interactions.InteractionCommandError.Exception">
            <summary>
                Thrown when an exception occurs mid-command execution.
            </summary>
        </member>
        <member name="F:Discord.Interactions.InteractionCommandError.Unsuccessful">
            <summary>
                Thrown when the command is not successfully executed on runtime.
            </summary>
        </member>
        <member name="F:Discord.Interactions.InteractionCommandError.UnmetPrecondition">
            <summary>
                Thrown when the command fails to meet a <see cref="T:Discord.Interactions.PreconditionAttribute"/>'s conditions.
            </summary>
        </member>
        <member name="F:Discord.Interactions.InteractionCommandError.ParseFailed">
            <summary>
                Thrown when the command context cannot be parsed by the <see cref="T:Discord.Interactions.ICommandInfo"/>.
            </summary>
        </member>
        <member name="T:Discord.Interactions.InteractionContext">
            <inheritdoc cref="T:Discord.IInteractionContext"/>
        </member>
        <member name="P:Discord.Interactions.InteractionContext.Client">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.InteractionContext.Guild">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.InteractionContext.Channel">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.InteractionContext.User">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.InteractionContext.Interaction">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.InteractionContext.SegmentMatches">
            <inheritdoc cref="P:Discord.IRouteMatchContainer.SegmentMatches"/>
        </member>
        <member name="M:Discord.Interactions.InteractionContext.#ctor(Discord.IDiscordClient,Discord.IDiscordInteraction,Discord.IMessageChannel)">
            <summary>
                Initializes a new <see cref="T:Discord.Interactions.InteractionContext"/>.
            </summary>
            <param name="client">The underlying client.</param>
            <param name="interaction">The underlying interaction.</param>
            <param name="channel"><see cref="T:Discord.IMessageChannel"/> the command originated from.</param>
        </member>
        <member name="M:Discord.Interactions.InteractionContext.SetSegmentMatches(System.Collections.Generic.IEnumerable{Discord.IRouteSegmentMatch})">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.InteractionContext.Discord#IRouteMatchContainer#SegmentMatches">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Interactions.InteractionModuleBase`1">
            <summary>
                Provides a base class for a command module to inherit from.
            </summary>
            <typeparam name="T">Type of interaction context to be injected into the module.</typeparam>
        </member>
        <member name="P:Discord.Interactions.InteractionModuleBase`1.Context">
            <summary>
                Gets the underlying context of the command.
            </summary>
        </member>
        <member name="M:Discord.Interactions.InteractionModuleBase`1.AfterExecute(Discord.Interactions.ICommandInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.InteractionModuleBase`1.BeforeExecute(Discord.Interactions.ICommandInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.InteractionModuleBase`1.BeforeExecuteAsync(Discord.Interactions.ICommandInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.InteractionModuleBase`1.AfterExecuteAsync(Discord.Interactions.ICommandInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.InteractionModuleBase`1.OnModuleBuilding(Discord.Interactions.InteractionService,Discord.Interactions.ModuleInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.InteractionModuleBase`1.Construct(Discord.Interactions.Builders.ModuleBuilder,Discord.Interactions.InteractionService)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.InteractionModuleBase`1.DeferAsync(System.Boolean,Discord.RequestOptions)">
            <inheritdoc cref="M:Discord.IDiscordInteraction.DeferAsync(System.Boolean,Discord.RequestOptions)"/>
        </member>
        <member name="M:Discord.Interactions.InteractionModuleBase`1.RespondAsync(System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.RequestOptions,Discord.MessageComponent,Discord.Embed,Discord.PollProperties)">
            <inheritdoc cref="M:Discord.IDiscordInteraction.RespondAsync(System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)"/>
        </member>
        <member name="M:Discord.Interactions.InteractionModuleBase`1.RespondWithFileAsync(System.IO.Stream,System.String,System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <inheritdoc cref="M:Discord.IDiscordInteraction.RespondWithFileAsync(System.IO.Stream,System.String,System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)"/>
        </member>
        <member name="M:Discord.Interactions.InteractionModuleBase`1.RespondWithFileAsync(System.String,System.String,System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <inheritdoc cref="M:Discord.IDiscordInteraction.RespondWithFileAsync(System.String,System.String,System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)"/>
        </member>
        <member name="M:Discord.Interactions.InteractionModuleBase`1.RespondWithFileAsync(Discord.FileAttachment,System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <inheritdoc cref="M:Discord.IDiscordInteraction.RespondWithFileAsync(Discord.FileAttachment,System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)"/>
        </member>
        <member name="M:Discord.Interactions.InteractionModuleBase`1.RespondWithFilesAsync(System.Collections.Generic.IEnumerable{Discord.FileAttachment},System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <inheritdoc cref="M:Discord.IDiscordInteraction.RespondWithFilesAsync(System.Collections.Generic.IEnumerable{Discord.FileAttachment},System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)"/>
        </member>
        <member name="M:Discord.Interactions.InteractionModuleBase`1.FollowupAsync(System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.RequestOptions,Discord.MessageComponent,Discord.Embed,Discord.PollProperties)">
            <inheritdoc cref="M:Discord.IDiscordInteraction.FollowupAsync(System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)"/>
        </member>
        <member name="M:Discord.Interactions.InteractionModuleBase`1.FollowupWithFileAsync(System.IO.Stream,System.String,System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <inheritdoc cref="M:Discord.IDiscordInteraction.FollowupWithFileAsync(System.IO.Stream,System.String,System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)"/>
        </member>
        <member name="M:Discord.Interactions.InteractionModuleBase`1.FollowupWithFileAsync(System.String,System.String,System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <inheritdoc cref="M:Discord.IDiscordInteraction.FollowupWithFileAsync(System.String,System.String,System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)"/>
        </member>
        <member name="M:Discord.Interactions.InteractionModuleBase`1.FollowupWithFileAsync(Discord.FileAttachment,System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <inheritdoc cref="M:Discord.IDiscordInteraction.FollowupWithFileAsync(Discord.FileAttachment,System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)"/>
        </member>
        <member name="M:Discord.Interactions.InteractionModuleBase`1.FollowupWithFilesAsync(System.Collections.Generic.IEnumerable{Discord.FileAttachment},System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)">
            <inheritdoc cref="M:Discord.IDiscordInteraction.FollowupWithFilesAsync(System.Collections.Generic.IEnumerable{Discord.FileAttachment},System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.MessageComponent,Discord.Embed,Discord.RequestOptions,Discord.PollProperties)"/>
        </member>
        <member name="M:Discord.Interactions.InteractionModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)">
            <inheritdoc cref="M:Discord.IMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,Discord.AllowedMentions,Discord.MessageReference,Discord.MessageComponent,Discord.ISticker[],Discord.Embed[],Discord.MessageFlags,Discord.PollProperties)"/>
        </member>
        <member name="M:Discord.Interactions.InteractionModuleBase`1.GetOriginalResponseAsync(Discord.RequestOptions)">
            <inheritdoc cref="M:Discord.IDiscordInteraction.GetOriginalResponseAsync(Discord.RequestOptions)"/>
        </member>
        <member name="M:Discord.Interactions.InteractionModuleBase`1.ModifyOriginalResponseAsync(System.Action{Discord.MessageProperties},Discord.RequestOptions)">
            <inheritdoc cref="M:Discord.IDiscordInteraction.ModifyOriginalResponseAsync(System.Action{Discord.MessageProperties},Discord.RequestOptions)"/>
        </member>
        <member name="M:Discord.Interactions.InteractionModuleBase`1.DeleteOriginalResponseAsync">
            <inheritdoc cref="M:Discord.IDeletable.DeleteAsync(Discord.RequestOptions)"/>
        </member>
        <member name="M:Discord.Interactions.InteractionModuleBase`1.RespondWithModalAsync(Discord.Modal,Discord.RequestOptions)">
            <inheritdoc cref="M:Discord.IDiscordInteraction.RespondWithModalAsync(Discord.Modal,Discord.RequestOptions)"/>
        </member>
        <member name="M:Discord.Interactions.InteractionModuleBase`1.RespondWithModalAsync``1(System.String,``0,Discord.RequestOptions,System.Action{Discord.ModalBuilder})">
            <inheritdoc cref="M:Discord.Interactions.IDiscordInteractionExtentions.RespondWithModalAsync``1(Discord.IDiscordInteraction,System.String,``0,Discord.RequestOptions,System.Action{Discord.ModalBuilder})"/>
        </member>
        <member name="M:Discord.Interactions.InteractionModuleBase`1.RespondWithModalAsync``1(System.String,Discord.RequestOptions,System.Action{Discord.ModalBuilder})">
            <inheritdoc cref="M:Discord.Interactions.IDiscordInteractionExtentions.RespondWithModalAsync``1(Discord.IDiscordInteraction,System.String,Discord.RequestOptions,System.Action{Discord.ModalBuilder})"/>
        </member>
        <member name="M:Discord.Interactions.InteractionModuleBase`1.RespondWithPremiumRequiredAsync(Discord.RequestOptions)">
            <inheritdoc cref="M:Discord.IDiscordInteraction.RespondWithPremiumRequiredAsync(Discord.RequestOptions)"/>
        </member>
        <member name="M:Discord.Interactions.InteractionModuleBase`1.Discord#Interactions#IInteractionModuleBase#SetContext(Discord.IInteractionContext)">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Interactions.InteractionModuleBase">
            <summary>
                Provides a base class for a command module to inherit from.
            </summary>
        </member>
        <member name="T:Discord.Interactions.InteractionService">
            <summary>
                Provides the framework for building and registering Discord Application Commands.
            </summary>
        </member>
        <member name="E:Discord.Interactions.InteractionService.Log">
            <summary>
                Occurs when a Slash Command related information is received.
            </summary>
        </member>
        <member name="E:Discord.Interactions.InteractionService.InteractionExecuted">
            <summary>
                Occurs when any type of interaction is executed.
            </summary>
        </member>
        <member name="E:Discord.Interactions.InteractionService.SlashCommandExecuted">
            <summary>
                Occurs when a Slash Command is executed.
            </summary>
        </member>
        <member name="E:Discord.Interactions.InteractionService.ContextCommandExecuted">
            <summary>
                Occurs when a Context Command is executed.
            </summary>
        </member>
        <member name="E:Discord.Interactions.InteractionService.ComponentCommandExecuted">
            <summary>
                Occurs when a Message Component command is executed.
            </summary>
        </member>
        <member name="E:Discord.Interactions.InteractionService.AutocompleteCommandExecuted">
            <summary>
                Occurs when a Autocomplete command is executed.
            </summary>
        </member>
        <member name="E:Discord.Interactions.InteractionService.AutocompleteHandlerExecuted">
            <summary>
                Occurs when a AutocompleteHandler is executed.
            </summary>
        </member>
        <member name="E:Discord.Interactions.InteractionService.ModalCommandExecuted">
            <summary>
                Occurs when a Modal command is executed.
            </summary>
        </member>
        <member name="P:Discord.Interactions.InteractionService.LocalizationManager">
            <summary>
                Get the <see cref="T:Discord.Interactions.ILocalizationManager"/> used by this Interaction Service instance to localize strings.
            </summary>
        </member>
        <member name="P:Discord.Interactions.InteractionService.RestClient">
            <summary>
                Rest client to be used to register application commands.
            </summary>
        </member>
        <member name="P:Discord.Interactions.InteractionService.Modules">
            <summary>
                Represents all modules loaded within <see cref="T:Discord.Interactions.InteractionService"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.InteractionService.SlashCommands">
            <summary>
                Represents all Slash Commands loaded within <see cref="T:Discord.Interactions.InteractionService"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.InteractionService.ContextCommands">
            <summary>
                Represents all Context Commands loaded within <see cref="T:Discord.Interactions.InteractionService"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.InteractionService.ComponentCommands">
            <summary>
                Represents all Component Commands loaded within <see cref="T:Discord.Interactions.InteractionService"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.InteractionService.ModalCommands">
            <summary>
                Represents all Modal Commands loaded within <see cref="T:Discord.Interactions.InteractionService"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.InteractionService.Modals">
            <summary>
                Gets a collection of the cached <see cref="T:Discord.Interactions.ModalInfo"/> classes that are referenced in registered <see cref="T:Discord.Interactions.ModalCommandInfo"/>s.
            </summary>
        </member>
        <member name="M:Discord.Interactions.InteractionService.#ctor(Discord.Rest.DiscordRestClient,Discord.Interactions.InteractionServiceConfig)">
            <summary>
                Initialize a <see cref="T:Discord.Interactions.InteractionService"/> with provided configurations.
            </summary>
            <param name="discord">The discord client.</param>
            <param name="config">The configuration class.</param>
        </member>
        <member name="M:Discord.Interactions.InteractionService.#ctor(Discord.Rest.IRestClientProvider,Discord.Interactions.InteractionServiceConfig)">
            <summary>
                Initialize a <see cref="T:Discord.Interactions.InteractionService"/> with provided configurations.
            </summary>
            <param name="discordProvider">The discord client provider.</param>
            <param name="config">The configuration class.</param>
        </member>
        <member name="M:Discord.Interactions.InteractionService.CreateModuleAsync(System.String,System.IServiceProvider,System.Action{Discord.Interactions.Builders.ModuleBuilder})">
            <summary>
                Create and loads a <see cref="T:Discord.Interactions.ModuleInfo"/> using a builder factory.
            </summary>
            <param name="name">Name of the module.</param>
            <param name="services">The <see cref="T:System.IServiceProvider"/> for your dependency injection solution if using one; otherwise, pass <see langword="null" />.</param>
            <param name="buildFunc">Module builder factory.</param>
            <returns>
                A task representing the operation for adding modules. The task result contains the built module instance.
            </returns>
        </member>
        <member name="M:Discord.Interactions.InteractionService.AddModulesAsync(System.Reflection.Assembly,System.IServiceProvider)">
            <summary>
                Discover and load command modules from an <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <param name="assembly"><see cref="T:System.Reflection.Assembly"/> the command modules are defined in.</param>
            <param name="services">The <see cref="T:System.IServiceProvider"/> for your dependency injection solution if using one; otherwise, pass <see langword="null" />.</param>
            <returns>
                A task representing the operation for adding modules. The task result contains a collection of the modules added.
            </returns>
        </member>
        <member name="M:Discord.Interactions.InteractionService.AddModuleAsync``1(System.IServiceProvider)">
            <summary>
                Add a command module from a <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">Type of the module.</typeparam>
            <param name="services">The <see cref="T:System.IServiceProvider" /> for your dependency injection solution if using one; otherwise, pass <see langword="null" /> .</param>
            <returns>
                A task representing the operation for adding the module. The task result contains the built module.
            </returns>
            <exception cref="T:System.ArgumentException">
                Thrown if this module has already been added.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                Thrown when the <typeparamref name="T"/> is not a valid module definition.
            </exception>
        </member>
        <member name="M:Discord.Interactions.InteractionService.AddModuleAsync(System.Type,System.IServiceProvider)">
            <summary>
                Add a command module from a <see cref="T:System.Type"/>.
            </summary>
            <param name="type">Type of the module.</param>
            <param name="services">The <see cref="T:System.IServiceProvider" /> for your dependency injection solution if using one; otherwise, pass <see langword="null" /> .</param>
            <returns>
                A task representing the operation for adding the module. The task result contains the built module.
            </returns>
            <exception cref="T:System.ArgumentException">
                Thrown if this module has already been added.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                Thrown when the <paramref name="type"/> is not a valid module definition.
            </exception>
        </member>
        <member name="M:Discord.Interactions.InteractionService.RegisterCommandsToGuildAsync(System.UInt64,System.Boolean)">
            <summary>
                Register Application Commands from <see cref="P:Discord.Interactions.InteractionService.ContextCommands"/> and <see cref="P:Discord.Interactions.InteractionService.SlashCommands"/> to a guild.
            </summary>
            <param name="guildId">Id of the target guild.</param>
            <param name="deleteMissing">If <see langword="false"/>, this operation will not delete the commands that are missing from <see cref="T:Discord.Interactions.InteractionService"/>.</param>
            <returns>
                A task representing the command registration process. The task result contains the active application commands of the target guild.
            </returns>
        </member>
        <member name="M:Discord.Interactions.InteractionService.RegisterCommandsGloballyAsync(System.Boolean)">
            <summary>
                Register Application Commands from <see cref="P:Discord.Interactions.InteractionService.ContextCommands"/> and <see cref="P:Discord.Interactions.InteractionService.SlashCommands"/> to Discord on in global scope.
            </summary>
            <param name="deleteMissing">If <see langword="false"/>, this operation will not delete the commands that are missing from <see cref="T:Discord.Interactions.InteractionService"/>.</param>
            <returns>
               A task representing the command registration process. The task result contains the active global application commands of bot.
            </returns>
        </member>
        <member name="M:Discord.Interactions.InteractionService.AddCommandsToGuildAsync(Discord.IGuild,System.Boolean,Discord.Interactions.ICommandInfo[])">
            <summary>
                Register Application Commands from <paramref name="commands"/> to a guild.
            </summary>
            <remarks>
                Commands will be registered as standalone commands, if you want the <see cref="T:Discord.Interactions.GroupAttribute"/> to take effect,
                use <see cref="M:Discord.Interactions.InteractionService.AddModulesToGuildAsync(Discord.IGuild,System.Boolean,Discord.Interactions.ModuleInfo[])"/>. Registering a commands without group names might cause the command traversal to fail.
            </remarks>
            <param name="guild">The target guild.</param>
            <param name="deleteMissing">If <see langword="false"/>, this operation will not delete the commands that are missing from <see cref="T:Discord.Interactions.InteractionService"/>.</param>
            <param name="commands">Commands to be registered to Discord.</param>
            <returns>
                A task representing the command registration process. The task result contains the active application commands of the target guild.
            </returns>
        </member>
        <member name="M:Discord.Interactions.InteractionService.AddCommandsToGuildAsync(System.UInt64,System.Boolean,Discord.Interactions.ICommandInfo[])">
            <summary>
                Register Application Commands from <paramref name="commands"/> to a guild.
            </summary>
            <remarks>
                Commands will be registered as standalone commands, if you want the <see cref="T:Discord.Interactions.GroupAttribute"/> to take effect,
                use <see cref="M:Discord.Interactions.InteractionService.AddModulesToGuildAsync(System.UInt64,System.Boolean,Discord.Interactions.ModuleInfo[])"/>. Registering a commands without group names might cause the command traversal to fail.
            </remarks>
            <param name="guildId">The target guild ID.</param>
            <param name="deleteMissing">If <see langword="false"/>, this operation will not delete the commands that are missing from <see cref="T:Discord.Interactions.InteractionService"/>.</param>
            <param name="commands">Commands to be registered to Discord.</param>
            <returns>
                A task representing the command registration process. The task result contains the active application commands of the target guild.
            </returns>
        </member>
        <member name="M:Discord.Interactions.InteractionService.AddModulesToGuildAsync(Discord.IGuild,System.Boolean,Discord.Interactions.ModuleInfo[])">
            <summary>
                Register Application Commands from modules provided in <paramref name="modules"/> to a guild.
            </summary>
            <param name="guild">The target guild.</param>
            <param name="deleteMissing">If <see langword="false"/>, this operation will not delete the commands that are missing from <see cref="T:Discord.Interactions.InteractionService"/>.</param>
            <param name="modules">Modules to be registered to Discord.</param>
            <returns>
                A task representing the command registration process. The task result contains the active application commands of the target guild.
            </returns>
        </member>
        <member name="M:Discord.Interactions.InteractionService.AddModulesToGuildAsync(System.UInt64,System.Boolean,Discord.Interactions.ModuleInfo[])">
            <summary>
                Register Application Commands from modules provided in <paramref name="modules"/> to a guild.
            </summary>
            <param name="guildId">The target guild ID.</param>
            <param name="deleteMissing">If <see langword="false"/>, this operation will not delete the commands that are missing from <see cref="T:Discord.Interactions.InteractionService"/>.</param>
            <param name="modules">Modules to be registered to Discord.</param>
            <returns>
                A task representing the command registration process. The task result contains the active application commands of the target guild.
            </returns>
        </member>
        <member name="M:Discord.Interactions.InteractionService.AddModulesGloballyAsync(System.Boolean,Discord.Interactions.ModuleInfo[])">
            <summary>
                Register Application Commands from modules provided in <paramref name="modules"/> as global commands.
            </summary>
            <param name="deleteMissing">If <see langword="false"/>, this operation will not delete the commands that are missing from <see cref="T:Discord.Interactions.InteractionService"/>.</param>
            <param name="modules">Modules to be registered to Discord.</param>
            <returns>
                A task representing the command registration process. The task result contains the active application commands of the target guild.
            </returns>
        </member>
        <member name="M:Discord.Interactions.InteractionService.AddCommandsGloballyAsync(System.Boolean,Discord.Interactions.IApplicationCommandInfo[])">
            <summary>
                Register Application Commands from <paramref name="commands"/> as global commands.
            </summary>
            <remarks>
                Commands will be registered as standalone commands, if you want the <see cref="T:Discord.Interactions.GroupAttribute"/> to take effect,
                use <see cref="M:Discord.Interactions.InteractionService.AddModulesToGuildAsync(Discord.IGuild,System.Boolean,Discord.Interactions.ModuleInfo[])"/>. Registering a commands without group names might cause the command traversal to fail.
            </remarks>
            <param name="deleteMissing">If <see langword="false"/>, this operation will not delete the commands that are missing from <see cref="T:Discord.Interactions.InteractionService"/>.</param>
            <param name="commands">Commands to be registered to Discord.</param>
            <returns>
                A task representing the command registration process. The task result contains the active application commands of the target guild.
            </returns>
        </member>
        <member name="M:Discord.Interactions.InteractionService.RemoveModuleAsync``1">
            <summary>
                Remove a command module.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the module.</typeparam>
            <returns>
                A task that represents the asynchronous removal operation. The task result contains a value that
                indicates whether the module is successfully removed.
            </returns>
        </member>
        <member name="M:Discord.Interactions.InteractionService.RemoveModuleAsync(System.Type)">
            <summary>
                Remove a command module.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the module.</param>
            <returns>
                A task that represents the asynchronous removal operation. The task result contains a value that
                indicates whether the module is successfully removed.
            </returns>
        </member>
        <member name="M:Discord.Interactions.InteractionService.RemoveModuleAsync(Discord.Interactions.ModuleInfo)">
            <summary>
                Remove a command module.
            </summary>
            <param name="module">The <see cref="T:Discord.Interactions.ModuleInfo" /> to be removed from the service.</param>
            <returns>
                A task that represents the asynchronous removal operation. The task result contains a value that
                indicates whether the <paramref name="module"/> is successfully removed.
            </returns>
        </member>
        <member name="M:Discord.Interactions.InteractionService.RemoveModulesFromGuildAsync(Discord.IGuild,Discord.Interactions.ModuleInfo[])">
            <summary>
                Unregister Application Commands from modules provided in <paramref name="modules"/> from a guild.
            </summary>
            <param name="guild">The target guild.</param>
            <param name="modules">Modules to be deregistered from Discord.</param>
            <returns>
                A task representing the command de-registration process. The task result contains the active application commands of the target guild.
            </returns>
        </member>
        <member name="M:Discord.Interactions.InteractionService.RemoveModulesFromGuildAsync(System.UInt64,Discord.Interactions.ModuleInfo[])">
            <summary>
                Unregister Application Commands from modules provided in <paramref name="modules"/> from a guild.
            </summary>
            <param name="guildId">The target guild ID.</param>
            <param name="modules">Modules to be deregistered from Discord.</param>
            <returns>
                A task representing the command de-registration process. The task result contains the active application commands of the target guild.
            </returns>
        </member>
        <member name="M:Discord.Interactions.InteractionService.SearchSlashCommand(Discord.ISlashCommandInteraction)">
            <summary>
                Search the registered slash commands using a <see cref="T:Discord.ISlashCommandInteraction"/>.
            </summary>
            <param name="slashCommandInteraction">Interaction entity to perform the search with.</param>
            <returns>
                The search result. When successful, result contains the found <see cref="T:Discord.Interactions.SlashCommandInfo"/>.
            </returns>
        </member>
        <member name="M:Discord.Interactions.InteractionService.SearchComponentCommand(Discord.IComponentInteraction)">
            <summary>
                Search the registered slash commands using a <see cref="T:Discord.IComponentInteraction"/>.
            </summary>
            <param name="componentInteraction">Interaction entity to perform the search with.</param>
            <returns>
                The search result. When successful, result contains the found <see cref="T:Discord.Interactions.ComponentCommandInfo"/>.
            </returns>
        </member>
        <member name="M:Discord.Interactions.InteractionService.SearchUserCommand(Discord.IUserCommandInteraction)">
            <summary>
                Search the registered slash commands using a <see cref="T:Discord.IUserCommandInteraction"/>.
            </summary>
            <param name="userCommandInteraction">Interaction entity to perform the search with.</param>
            <returns>
                The search result. When successful, result contains the found <see cref="T:Discord.Interactions.ContextCommandInfo"/>.
            </returns>
        </member>
        <member name="M:Discord.Interactions.InteractionService.SearchMessageCommand(Discord.IMessageCommandInteraction)">
            <summary>
                Search the registered slash commands using a <see cref="T:Discord.IMessageCommandInteraction"/>.
            </summary>
            <param name="messageCommandInteraction">Interaction entity to perform the search with.</param>
            <returns>
                The search result. When successful, result contains the found <see cref="T:Discord.Interactions.ContextCommandInfo"/>.
            </returns>
        </member>
        <member name="M:Discord.Interactions.InteractionService.SearchAutocompleteCommand(Discord.IAutocompleteInteraction)">
            <summary>
                Search the registered slash commands using a <see cref="T:Discord.IAutocompleteInteraction"/>.
            </summary>
            <param name="autocompleteInteraction">Interaction entity to perform the search with.</param>
            <returns>
                The search result. When successful, result contains the found <see cref="T:Discord.Interactions.AutocompleteCommandInfo"/>.
            </returns>
        </member>
        <member name="M:Discord.Interactions.InteractionService.ExecuteCommandAsync(Discord.IInteractionContext,System.IServiceProvider)">
            <summary>
                Execute a Command from a given <see cref="T:Discord.IInteractionContext"/>.
            </summary>
            <param name="context">Name context of the command.</param>
            <param name="services">The service to be used in the command's dependency injection.</param>
            <returns>
                A task representing the command execution process. The task result contains the result of the execution.
            </returns>
        </member>
        <member name="M:Discord.Interactions.InteractionService.AddTypeConverter``1(Discord.Interactions.TypeConverter)">
            <summary>
                Add a concrete type <see cref="T:Discord.Interactions.TypeConverter"/>.
            </summary>
            <typeparam name="T">Primary target <see cref="T:System.Type"/> of the <see cref="T:Discord.Interactions.TypeConverter"/>.</typeparam>
            <param name="converter">The <see cref="T:Discord.Interactions.TypeConverter"/> instance.</param>
        </member>
        <member name="M:Discord.Interactions.InteractionService.AddTypeConverter(System.Type,Discord.Interactions.TypeConverter)">
            <summary>
                Add a concrete type <see cref="T:Discord.Interactions.TypeConverter"/>.
            </summary>
            <param name="type">Primary target <see cref="T:System.Type"/> of the <see cref="T:Discord.Interactions.TypeConverter"/>.</param>
            <param name="converter">The <see cref="T:Discord.Interactions.TypeConverter"/> instance.</param>
        </member>
        <member name="M:Discord.Interactions.InteractionService.AddGenericTypeConverter``1(System.Type)">
            <summary>
                Add a generic type <see cref="T:Discord.Interactions.TypeConverter`1"/>.
            </summary>
            <typeparam name="T">Generic Type constraint of the <see cref="T:System.Type"/> of the <see cref="T:Discord.Interactions.TypeConverter`1"/>.</typeparam>
            <param name="converterType">Type of the <see cref="T:Discord.Interactions.TypeConverter`1"/>.</param>
        </member>
        <member name="M:Discord.Interactions.InteractionService.AddGenericTypeConverter(System.Type,System.Type)">
            <summary>
                Add a generic type <see cref="T:Discord.Interactions.TypeConverter`1"/>.
            </summary>
            <param name="targetType">Generic Type constraint of the <see cref="T:System.Type"/> of the <see cref="T:Discord.Interactions.TypeConverter`1"/>.</param>
            <param name="converterType">Type of the <see cref="T:Discord.Interactions.TypeConverter`1"/>.</param>
        </member>
        <member name="M:Discord.Interactions.InteractionService.AddComponentTypeConverter``1(Discord.Interactions.ComponentTypeConverter)">
            <summary>
                Add a concrete type <see cref="T:Discord.Interactions.ComponentTypeConverter"/>.
            </summary>
            <typeparam name="T">Primary target <see cref="T:System.Type"/> of the <see cref="T:Discord.Interactions.ComponentTypeConverter"/>.</typeparam>
            <param name="converter">The <see cref="T:Discord.Interactions.ComponentTypeConverter"/> instance.</param>
        </member>
        <member name="M:Discord.Interactions.InteractionService.AddComponentTypeConverter(System.Type,Discord.Interactions.ComponentTypeConverter)">
            <summary>
                Add a concrete type <see cref="T:Discord.Interactions.ComponentTypeConverter"/>.
            </summary>
            <param name="type">Primary target <see cref="T:System.Type"/> of the <see cref="T:Discord.Interactions.ComponentTypeConverter"/>.</param>
            <param name="converter">The <see cref="T:Discord.Interactions.ComponentTypeConverter"/> instance.</param>
        </member>
        <member name="M:Discord.Interactions.InteractionService.AddGenericComponentTypeConverter``1(System.Type)">
            <summary>
                Add a generic type <see cref="T:Discord.Interactions.ComponentTypeConverter`1"/>.
            </summary>
            <typeparam name="T">Generic Type constraint of the <see cref="T:System.Type"/> of the <see cref="T:Discord.Interactions.ComponentTypeConverter`1"/>.</typeparam>
            <param name="converterType">Type of the <see cref="T:Discord.Interactions.ComponentTypeConverter`1"/>.</param>
        </member>
        <member name="M:Discord.Interactions.InteractionService.AddGenericComponentTypeConverter(System.Type,System.Type)">
            <summary>
                Add a generic type <see cref="T:Discord.Interactions.ComponentTypeConverter`1"/>.
            </summary>
            <param name="targetType">Generic Type constraint of the <see cref="T:System.Type"/> of the <see cref="T:Discord.Interactions.ComponentTypeConverter`1"/>.</param>
            <param name="converterType">Type of the <see cref="T:Discord.Interactions.ComponentTypeConverter`1"/>.</param>
        </member>
        <member name="M:Discord.Interactions.InteractionService.AddTypeReader``1(Discord.Interactions.TypeReader)">
            <summary>
                Add a concrete type <see cref="T:Discord.Interactions.TypeReader"/>.
            </summary>
            <typeparam name="T">Primary target <see cref="T:System.Type"/> of the <see cref="T:Discord.Interactions.TypeReader"/>.</typeparam>
            <param name="reader">The <see cref="T:Discord.Interactions.TypeReader"/> instance.</param>
        </member>
        <member name="M:Discord.Interactions.InteractionService.AddTypeReader(System.Type,Discord.Interactions.TypeReader)">
            <summary>
                Add a concrete type <see cref="T:Discord.Interactions.TypeReader"/>.
            </summary>
            <param name="type">Primary target <see cref="T:System.Type"/> of the <see cref="T:Discord.Interactions.TypeReader"/>.</param>
            <param name="reader">The <see cref="T:Discord.Interactions.TypeReader"/> instance.</param>
        </member>
        <member name="M:Discord.Interactions.InteractionService.AddGenericTypeReader``1(System.Type)">
            <summary>
                Add a generic type <see cref="T:Discord.Interactions.TypeReader`1"/>.
            </summary>
            <typeparam name="T">Generic Type constraint of the <see cref="T:System.Type"/> of the <see cref="T:Discord.Interactions.TypeReader`1"/>.</typeparam>
            <param name="readerType">Type of the <see cref="T:Discord.Interactions.TypeReader`1"/>.</param>
        </member>
        <member name="M:Discord.Interactions.InteractionService.AddGenericTypeReader(System.Type,System.Type)">
            <summary>
                Add a generic type <see cref="T:Discord.Interactions.TypeReader`1"/>.
            </summary>
            <param name="targetType">Generic Type constraint of the <see cref="T:System.Type"/> of the <see cref="T:Discord.Interactions.TypeReader`1"/>.</param>
            <param name="readerType">Type of the <see cref="T:Discord.Interactions.TypeReader`1"/>.</param>
        </member>
        <member name="M:Discord.Interactions.InteractionService.TryRemoveTypeReader``1(Discord.Interactions.TypeReader@)">
            <summary>
                Removes a type reader for the type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to remove the readers from.</typeparam>
            <param name="reader">The reader if the resulting remove operation was successful.</param>
            <returns><see langword="true"/> if the remove operation was successful; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Discord.Interactions.InteractionService.TryRemoveTypeReader(System.Type,Discord.Interactions.TypeReader@)">
            <summary>
                Removes a type reader for the given type.
            </summary>
            <remarks>
                Removing a <see cref="T:Discord.Interactions.TypeReader"/> from the <see cref="T:Discord.Interactions.InteractionService"/> will not dereference the <see cref="T:Discord.Interactions.TypeReader"/> from the loaded module/command instances.
                You need to reload the modules for the changes to take effect.
            </remarks>
            <param name="type">The type to remove the reader from.</param>
            <param name="reader">The reader if the resulting remove operation was successful.</param>
            <returns><see langword="true"/> if the remove operation was successful; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Discord.Interactions.InteractionService.TryRemoveGenericTypeReader``1(System.Type@)">
            <summary>
                Removes a generic type reader from the type <typeparamref name="T"/>.
            </summary>
            <remarks>
                Removing a <see cref="T:Discord.Interactions.TypeReader"/> from the <see cref="T:Discord.Interactions.InteractionService"/> will not dereference the <see cref="T:Discord.Interactions.TypeReader"/> from the loaded module/command instances.
                You need to reload the modules for the changes to take effect.
            </remarks>
            <typeparam name="T">The type to remove the readers from.</typeparam>
            <param name="readerType">The removed readers type.</param>
            <returns><see langword="true"/> if the remove operation was successful; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Discord.Interactions.InteractionService.TryRemoveGenericTypeReader(System.Type,System.Type@)">
            <summary>
                Removes a generic type reader from the given type.
            </summary>
            <remarks>
                Removing a <see cref="T:Discord.Interactions.TypeReader"/> from the <see cref="T:Discord.Interactions.InteractionService"/> will not dereference the <see cref="T:Discord.Interactions.TypeReader"/> from the loaded module/command instances.
                You need to reload the modules for the changes to take effect.
            </remarks>
            <param name="type">The type to remove the reader from.</param>
            <param name="readerType">The readers type if the remove operation was successful.</param>
            <returns><see langword="true"/> if the remove operation was successful; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Discord.Interactions.InteractionService.SerializeValueAsync``1(``0,System.IServiceProvider)">
            <summary>
                Serialize an object using a <see cref="T:Discord.Interactions.TypeReader"/> into a <see cref="T:System.String"/> to be placed in a Component CustomId.
            </summary>
            <remarks>
                Removing a <see cref="T:Discord.Interactions.TypeReader"/> from the <see cref="T:Discord.Interactions.InteractionService"/> will not dereference the <see cref="T:Discord.Interactions.TypeReader"/> from the loaded module/command instances.
                You need to reload the modules for the changes to take effect.
            </remarks>
            <typeparam name="T">Type of the object to be serialized.</typeparam>
            <param name="obj">Object to be serialized.</param>
            <param name="services">Services that will be passed on to the <see cref="T:Discord.Interactions.TypeReader"/>.</param>
            <returns>
                A task representing the conversion process. The task result contains the result of the conversion.
            </returns>
        </member>
        <member name="M:Discord.Interactions.InteractionService.GenerateCustomIdStringAsync(System.String,System.IServiceProvider,System.Object[])">
            <summary>
                Serialize and format multiple objects into a Custom Id string.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="services">>Services that will be passed on to the <see cref="T:Discord.Interactions.TypeReader"/>s.</param>
            <param name="args">Objects to be serialized.</param>
            <returns>
                A task representing the conversion process. The task result contains the result of the conversion.
            </returns>
        </member>
        <member name="M:Discord.Interactions.InteractionService.AddModalInfo``1">
            <summary>
                Loads and caches an <see cref="T:Discord.Interactions.ModalInfo"/> for the provided <see cref="T:Discord.Interactions.IModal"/>.
            </summary>
            <typeparam name="T">Type of <see cref="T:Discord.Interactions.IModal"/> to be loaded.</typeparam>
            <returns>
                The built <see cref="T:Discord.Interactions.ModalInfo"/> instance.
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Discord.Interactions.InteractionService.ModifySlashCommandPermissionsAsync(Discord.Interactions.ModuleInfo,Discord.IGuild,Discord.ApplicationCommandPermission[])">
            <summary>
                Modify the command permissions of the matching Discord Slash Command.
            </summary>
            <param name="module">Module representing the top level Slash Command.</param>
            <param name="guild">Target guild.</param>
            <param name="permissions">New permission values.</param>
            <returns>
                The active command permissions after the modification.
            </returns>
        </member>
        <member name="M:Discord.Interactions.InteractionService.ModifySlashCommandPermissionsAsync(Discord.Interactions.ModuleInfo,System.UInt64,Discord.ApplicationCommandPermission[])">
            <summary>
                Modify the command permissions of the matching Discord Slash Command.
            </summary>
            <param name="module">Module representing the top level Slash Command.</param>
            <param name="guildId">Target guild ID.</param>
            <param name="permissions">New permission values.</param>
            <returns>
                The active command permissions after the modification.
            </returns>
        </member>
        <member name="M:Discord.Interactions.InteractionService.ModifySlashCommandPermissionsAsync(Discord.Interactions.SlashCommandInfo,Discord.IGuild,Discord.ApplicationCommandPermission[])">
            <summary>
                Modify the command permissions of the matching Discord Slash Command.
            </summary>
            <param name="command">The Slash Command.</param>
            <param name="guild">Target guild.</param>
            <param name="permissions">New permission values.</param>
            <returns>
                The active command permissions after the modification.
            </returns>
        </member>
        <member name="M:Discord.Interactions.InteractionService.ModifySlashCommandPermissionsAsync(Discord.Interactions.SlashCommandInfo,System.UInt64,Discord.ApplicationCommandPermission[])">
            <summary>
                Modify the command permissions of the matching Discord Slash Command.
            </summary>
            <param name="command">The Slash Command.</param>
            <param name="guildId">Target guild ID.</param>
            <param name="permissions">New permission values.</param>
            <returns>
                The active command permissions after the modification.
            </returns>
        </member>
        <member name="M:Discord.Interactions.InteractionService.ModifyContextCommandPermissionsAsync(Discord.Interactions.ContextCommandInfo,Discord.IGuild,Discord.ApplicationCommandPermission[])">
            <summary>
                Modify the command permissions of the matching Discord Slash Command.
            </summary>
            <param name="command">The Context Command.</param>
            <param name="guild">Target guild.</param>
            <param name="permissions">New permission values.</param>
            <returns>
                The active command permissions after the modification.
            </returns>
        </member>
        <member name="M:Discord.Interactions.InteractionService.ModifyContextCommandPermissionsAsync(Discord.Interactions.ContextCommandInfo,System.UInt64,Discord.ApplicationCommandPermission[])">
            <summary>
                Modify the command permissions of the matching Discord Slash Command.
            </summary>
            <param name="command">The Context Command.</param>
            <param name="guildId">Target guild ID.</param>
            <param name="permissions">New permission values.</param>
            <returns>
                The active command permissions after the modification.
            </returns>
        </member>
        <member name="M:Discord.Interactions.InteractionService.GetSlashCommandInfo``1(System.String)">
            <summary>
                Gets a <see cref="T:Discord.Interactions.SlashCommandInfo"/>.
            </summary>
            <typeparam name="TModule">Declaring module type of this command, must be a type of <see cref="T:Discord.Interactions.InteractionModuleBase`1"/>.</typeparam>
            <param name="methodName">Method name of the handler, use of <see langword="nameof"/> is recommended.</param>
            <returns>
                <see cref="T:Discord.Interactions.SlashCommandInfo"/> instance for this command.
            </returns>
            <exception cref="T:System.InvalidOperationException">Module or Slash Command couldn't be found.</exception>
        </member>
        <member name="M:Discord.Interactions.InteractionService.GetContextCommandInfo``1(System.String)">
            <summary>
                Gets a <see cref="T:Discord.Interactions.ContextCommandInfo"/>.
            </summary>
            <typeparam name="TModule">Declaring module type of this command, must be a type of <see cref="T:Discord.Interactions.InteractionModuleBase`1"/>.</typeparam>
            <param name="methodName">Method name of the handler, use of <see langword="nameof"/> is recommended.</param>
            <returns>
                <see cref="T:Discord.Interactions.ContextCommandInfo"/> instance for this command.
            </returns>
            <exception cref="T:System.InvalidOperationException">Module or Context Command couldn't be found.</exception>
        </member>
        <member name="M:Discord.Interactions.InteractionService.GetComponentCommandInfo``1(System.String)">
            <summary>
                Gets a <see cref="T:Discord.Interactions.ComponentCommandInfo"/>.
            </summary>
            <typeparam name="TModule">Declaring module type of this command, must be a type of <see cref="T:Discord.Interactions.InteractionModuleBase`1"/>.</typeparam>
            <param name="methodName">Method name of the handler, use of <see langword="nameof"/> is recommended.</param>
            <returns>
                <see cref="T:Discord.Interactions.ComponentCommandInfo"/> instance for this command.
            </returns>
            <exception cref="T:System.InvalidOperationException">Module or Component Command couldn't be found.</exception>
        </member>
        <member name="M:Discord.Interactions.InteractionService.GetModuleInfo``1">
            <summary>
                Gets a built <see cref="T:Discord.Interactions.ModuleInfo"/>.
            </summary>
            <typeparam name="TModule">Type of the module, must be a type of <see cref="T:Discord.Interactions.InteractionModuleBase`1"/>.</typeparam>
            <returns>
                <see cref="T:Discord.Interactions.ModuleInfo"/> instance for this module.
            </returns>
        </member>
        <member name="M:Discord.Interactions.InteractionService.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Interactions.InteractionServiceConfig">
            <summary>
                Represents a configuration class for <see cref="T:Discord.Interactions.InteractionService"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.InteractionServiceConfig.LogLevel">
            <summary>
                Gets or sets the minimum log level severity that will be sent to the <see cref="E:Discord.Interactions.InteractionService.Log"/> event.
            </summary>
        </member>
        <member name="P:Discord.Interactions.InteractionServiceConfig.DefaultRunMode">
            <summary>
                Gets or sets the default <see cref="T:Discord.Interactions.RunMode" /> commands should have, if one is not specified on the
                Command attribute or builder.
            </summary>
        </member>
        <member name="P:Discord.Interactions.InteractionServiceConfig.ThrowOnError">
            <summary>
                Gets or sets whether <see cref="F:Discord.Interactions.RunMode.Sync"/> commands should push exceptions up to the caller.
            </summary>
        </member>
        <member name="P:Discord.Interactions.InteractionServiceConfig.InteractionCustomIdDelimiters">
            <summary>
                Gets or sets the delimiters that will be used to separate group names and the method name when a Message Component Interaction is received.
            </summary>
        </member>
        <member name="P:Discord.Interactions.InteractionServiceConfig.WildCardExpression">
            <summary>
                Gets or sets the string expression that will be treated as a wild card.
            </summary>
        </member>
        <member name="P:Discord.Interactions.InteractionServiceConfig.UseCompiledLambda">
            <summary>
                Gets or sets the option to use compiled lambda expressions to create module instances and execute commands. This method improves performance at the cost of memory.
            </summary>
            <remarks>
                For performance reasons, if you frequently use <see cref="T:Discord.Modal"/>s with the service, it is highly recommended that you enable compiled lambdas.
            </remarks>
        </member>
        <member name="P:Discord.Interactions.InteractionServiceConfig.EnableAutocompleteHandlers">
            <summary>
                Gets or sets the option allowing you to use <see cref="T:Discord.Interactions.AutocompleteHandler"/>s.
            </summary>
            <remarks>
                Since <see cref="T:Discord.Interactions.AutocompleteHandler"/>s are prioritized over <see cref="T:Discord.Interactions.AutocompleteCommandInfo"/>s, if <see cref="T:Discord.Interactions.AutocompleteHandler"/>s are not used, this should be
                disabled to decrease the lookup time.
            </remarks>
        </member>
        <member name="P:Discord.Interactions.InteractionServiceConfig.AutoServiceScopes">
            <summary>
                Gets or sets whether new service scopes should be automatically created when resolving module dependencies on every command execution.
            </summary>
        </member>
        <member name="P:Discord.Interactions.InteractionServiceConfig.RestResponseCallback">
            <summary>
                Gets or sets delegate to be used by the <see cref="T:Discord.Interactions.InteractionService"/> when responding to a Rest based interaction.
            </summary>
        </member>
        <member name="P:Discord.Interactions.InteractionServiceConfig.ExitOnMissingModalField">
            <summary>
                Gets or sets whether a command execution should exit when a modal command encounters a missing modal component value.
            </summary>
        </member>
        <member name="P:Discord.Interactions.InteractionServiceConfig.LocalizationManager">
            <summary>
                Localization provider to be used when registering application commands.
            </summary>
        </member>
        <member name="T:Discord.Interactions.RestResponseCallback">
            <summary>
                Represents a cached delegate for creating interaction responses to webhook based Discord Interactions.
            </summary>
            <param name="context">Execution context that will be injected into the module class.</param>
            <param name="responseBody">Body of the interaction response.</param>
            <returns>
                A task representing the response operation.
            </returns>
        </member>
        <member name="T:Discord.Interactions.ILocalizationManager">
            <summary>
                Represents a localization provider for Discord Application Commands.
            </summary>
        </member>
        <member name="M:Discord.Interactions.ILocalizationManager.GetAllNames(System.Collections.Generic.IList{System.String},Discord.Interactions.LocalizationTarget)">
            <summary>
                Get every the resource name for every available locale.
            </summary>
            <param name="key">Location of the resource.</param>
            <param name="destinationType">Type of the resource.</param>
            <returns>
                A dictionary containing every available locale and the resource name.
            </returns>
        </member>
        <member name="M:Discord.Interactions.ILocalizationManager.GetAllDescriptions(System.Collections.Generic.IList{System.String},Discord.Interactions.LocalizationTarget)">
            <summary>
                Get every the resource description for every available locale.
            </summary>
            <param name="key">Location of the resource.</param>
            <param name="destinationType">Type of the resource.</param>
            <returns>
                A dictionary containing every available locale and the resource name.
            </returns>
        </member>
        <member name="T:Discord.Interactions.JsonLocalizationManager">
            <summary>
                The default localization provider for Json resource files.
            </summary>
        </member>
        <member name="M:Discord.Interactions.JsonLocalizationManager.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Discord.Interactions.JsonLocalizationManager"/> class.
            </summary>
            <param name="basePath">Base path of the Json file.</param>
            <param name="fileName">Name of the Json file.</param>
        </member>
        <member name="M:Discord.Interactions.JsonLocalizationManager.GetAllDescriptions(System.Collections.Generic.IList{System.String},Discord.Interactions.LocalizationTarget)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Interactions.JsonLocalizationManager.GetAllNames(System.Collections.Generic.IList{System.String},Discord.Interactions.LocalizationTarget)">
            <inheritdoc />
        </member>
        <member name="T:Discord.Interactions.ResxLocalizationManager">
            <summary>
                The default localization provider for Resx files.
            </summary>
        </member>
        <member name="M:Discord.Interactions.ResxLocalizationManager.#ctor(System.String,System.Reflection.Assembly,System.Globalization.CultureInfo[])">
            <summary>
                Initializes a new instance of the <see cref="T:Discord.Interactions.ResxLocalizationManager"/> class.
            </summary>
            <param name="baseResource">Name of the base resource.</param>
            <param name="assembly">The main assembly for the resources.</param>
            <param name="supportedLocales">Cultures the <see cref="T:Discord.Interactions.ResxLocalizationManager"/> should search for.</param>
        </member>
        <member name="M:Discord.Interactions.ResxLocalizationManager.GetAllDescriptions(System.Collections.Generic.IList{System.String},Discord.Interactions.LocalizationTarget)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Interactions.ResxLocalizationManager.GetAllNames(System.Collections.Generic.IList{System.String},Discord.Interactions.LocalizationTarget)">
            <inheritdoc />
        </member>
        <member name="T:Discord.Interactions.LocalizationTarget">
            <summary>
                Resource targets for localization.
            </summary>
        </member>
        <member name="F:Discord.Interactions.LocalizationTarget.Group">
            <summary>
                Target is a <see cref="T:Discord.Interactions.IInteractionModuleBase"/> tagged with a <see cref="T:Discord.Interactions.GroupAttribute"/>.
            </summary>
        </member>
        <member name="F:Discord.Interactions.LocalizationTarget.Command">
            <summary>
                Target is an application command method.
            </summary>
        </member>
        <member name="F:Discord.Interactions.LocalizationTarget.Parameter">
            <summary>
                Target is a Slash Command parameter.
            </summary>
        </member>
        <member name="F:Discord.Interactions.LocalizationTarget.Choice">
            <summary>
                Target is a Slash Command parameter choice.
            </summary>
        </member>
        <member name="T:Discord.Interactions.RestInteractionModuleBase`1">
            <summary>
                Provides a base class for a Rest based command module to inherit from.
            </summary>
            <typeparam name="T">Type of interaction context to be injected into the module.</typeparam>
        </member>
        <member name="P:Discord.Interactions.RestInteractionModuleBase`1.InteractionService">
            <summary>
                Gets or sets the underlying Interaction Service.
            </summary>
        </member>
        <member name="M:Discord.Interactions.RestInteractionModuleBase`1.DeferAsync(System.Boolean,Discord.RequestOptions)">
            <summary>
                Defer a Rest based Discord Interaction using the <see cref="P:Discord.Interactions.InteractionServiceConfig.RestResponseCallback"/> delegate.
            </summary>
            <param name="ephemeral"><see langword="true"/> if the response should be hidden to everyone besides the invoker of the command, otherwise <see langword="false"/>.</param>
            <param name="options">The request options for this response.</param>
            <returns>
                A Task representing the operation of creating the interaction response.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the interaction isn't a type of <see cref="T:Discord.Rest.RestInteraction"/>.</exception>
        </member>
        <member name="M:Discord.Interactions.RestInteractionModuleBase`1.RespondAsync(System.String,Discord.Embed[],System.Boolean,System.Boolean,Discord.AllowedMentions,Discord.RequestOptions,Discord.MessageComponent,Discord.Embed,Discord.PollProperties)">
            <summary>
                Respond to a Rest based Discord Interaction using the <see cref="P:Discord.Interactions.InteractionServiceConfig.RestResponseCallback"/> delegate.
            </summary>
            <param name="text">The text of the message to be sent.</param>
            <param name="embeds">A array of embeds to send with this response. Max 10.</param>
            <param name="isTTS"><see langword="true"/> if the message should be read out by a text-to-speech reader, otherwise <see langword="false"/>.</param>
            <param name="ephemeral"><see langword="true"/> if the response should be hidden to everyone besides the invoker of the command, otherwise <see langword="false"/>.</param>
            <param name="allowedMentions">The allowed mentions for this response.</param>
            <param name="options">The request options for this response.</param>
            <param name="components">A <see cref="T:Discord.MessageComponent"/> to be sent with this response.</param>
            <param name="embed">A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored.</param>
            <returns>
                A Task representing the operation of creating the interaction response.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the interaction isn't a type of <see cref="T:Discord.Rest.RestInteraction"/>.</exception>
        </member>
        <member name="M:Discord.Interactions.RestInteractionModuleBase`1.RespondWithModalAsync(Discord.Modal,Discord.RequestOptions)">
            <summary>
                Responds to the interaction with a modal.
            </summary>
            <param name="modal">The modal to respond with.</param>
            <param name="options">The request options for this <see langword="async"/> request.</param>
            <returns>
                A Task representing the operation of creating the interaction response.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the interaction isn't a type of <see cref="T:Discord.Rest.RestInteraction"/>.</exception>
        </member>
        <member name="M:Discord.Interactions.RestInteractionModuleBase`1.RespondWithModalAsync``1(System.String,``0,Discord.RequestOptions,System.Action{Discord.ModalBuilder})">
            <summary>
                Responds to the interaction with a modal.
            </summary>
            <typeparam name="TModal">The type of the modal.</typeparam>
            <param name="customId">The custom ID of the modal.</param>
            <param name="modal">The modal to respond with.</param>
            <param name="options">The request options for this <see langword="async"/> request.</param>
            <param name="modifyModal">Delegate that can be used to modify the modal.</param>
            <returns>
                A Task representing the operation of creating the interaction response.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the interaction isn't a type of <see cref="T:Discord.Rest.RestInteraction"/>.</exception>
        </member>
        <member name="M:Discord.Interactions.RestInteractionModuleBase`1.RespondWithModalAsync``1(System.String,Discord.RequestOptions,System.Action{Discord.ModalBuilder})">
            <summary>
                Responds to the interaction with a modal.
            </summary>
            <typeparam name="TModal"></typeparam>
            <param name="customId">The custom ID of the modal.</param>
            <param name="options">The request options for this <see langword="async"/> request.</param>
            <param name="modifyModal">Delegate that can be used to modify the modal.</param>
            <returns>
                A Task representing the operation of creating the interaction response.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the interaction isn't a type of <see cref="T:Discord.Rest.RestInteraction"/>.</exception>
        </member>
        <member name="T:Discord.Interactions.AutocompletionResult">
            <summary>
                Contains the information of a Autocomplete Interaction result.
            </summary>
        </member>
        <member name="P:Discord.Interactions.AutocompletionResult.Error">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.AutocompletionResult.ErrorReason">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.AutocompletionResult.IsSuccess">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.AutocompletionResult.Suggestions">
            <summary>
                Get the collection of Autocomplete suggestions to be displayed to the user.
            </summary>
        </member>
        <member name="M:Discord.Interactions.AutocompletionResult.FromSuccess">
            <summary>
                Initializes a new <see cref="T:Discord.Interactions.AutocompletionResult" /> with no error and without any <see cref="T:Discord.AutocompleteResult"/> indicating the command service shouldn't
                return any suggestions.
            </summary>
            <returns>
                A <see cref="T:Discord.Interactions.AutocompletionResult" /> that does not contain any errors.
            </returns>
        </member>
        <member name="M:Discord.Interactions.AutocompletionResult.FromSuccess(System.Collections.Generic.IEnumerable{Discord.AutocompleteResult})">
            <summary>
                Initializes a new <see cref="T:Discord.Interactions.AutocompletionResult" /> with no error.
            </summary>
            <param name="suggestions">Autocomplete suggestions to be displayed to the user</param>
            <returns>
                A <see cref="T:Discord.Interactions.AutocompletionResult" /> that does not contain any errors.
            </returns>
        </member>
        <member name="M:Discord.Interactions.AutocompletionResult.FromError(Discord.Interactions.IResult)">
            <summary>
                Initializes a new <see cref="T:Discord.Interactions.AutocompletionResult" /> with a specified result; this may or may not be an
                successful execution depending on the <see cref="P:Discord.Interactions.IResult.Error" /> and
                <see cref="P:Discord.Interactions.IResult.ErrorReason" /> specified.
            </summary>
            <param name="result">The result to inherit from.</param>
            <returns>
                A <see cref="T:Discord.Interactions.AutocompletionResult"/> that inherits the <see cref="T:Discord.Interactions.IResult"/> error type and reason.
            </returns>
        </member>
        <member name="M:Discord.Interactions.AutocompletionResult.FromError(System.Exception)">
            <summary>
                Initializes a new <see cref="T:Discord.Interactions.AutocompletionResult" /> with a specified exception, indicating an unsuccessful
                execution.
            </summary>
            <param name="exception">The exception that caused the autocomplete process to fail.</param>
            <returns>
                A <see cref="T:Discord.Interactions.AutocompletionResult" /> that contains the exception that caused the unsuccessful execution, along
                with a <see cref="T:Discord.Interactions.InteractionCommandError" /> of type <see cref="T:System.Exception"/> as well as the exception message as the
                reason.
            </returns>
        </member>
        <member name="M:Discord.Interactions.AutocompletionResult.FromError(Discord.Interactions.InteractionCommandError,System.String)">
            <summary>
                Initializes a new <see cref="T:Discord.Interactions.AutocompletionResult" /> with a specified <see cref="T:Discord.Interactions.InteractionCommandError" /> and its
                reason, indicating an unsuccessful execution.
            </summary>
            <param name="error">The type of error.</param>
            <param name="reason">The reason behind the error.</param>
            <returns>
                A <see cref="T:Discord.Interactions.AutocompletionResult" /> that contains a <see cref="T:Discord.Interactions.InteractionCommandError" /> and reason.
            </returns>
        </member>
        <member name="M:Discord.Interactions.AutocompletionResult.ToString">
            <summary>
                Gets a string that indicates the autocompletion result.
            </summary>
            <returns>
                <c>Success</c> if <see cref="P:Discord.Interactions.AutocompletionResult.IsSuccess"/> is <see langword="true" />; otherwise "<see cref="P:Discord.Interactions.AutocompletionResult.Error"/>: 
                <see cref="P:Discord.Interactions.AutocompletionResult.ErrorReason"/>".
            </returns>
        </member>
        <member name="T:Discord.Interactions.ExecuteResult">
            <summary>
                Contains information of the command's overall execution result.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ExecuteResult.Exception">
            <summary>
                Gets the exception that may have occurred during the command execution.
            </summary>
        </member>
        <member name="P:Discord.Interactions.ExecuteResult.Error">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.ExecuteResult.ErrorReason">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.ExecuteResult.IsSuccess">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.ExecuteResult.FromSuccess">
            <summary>
                Initializes a new <see cref="T:Discord.Interactions.ExecuteResult" /> with no error, indicating a successful execution.
            </summary>
            <returns>
                A <see cref="T:Discord.Interactions.ExecuteResult" /> that does not contain any errors.
            </returns>
        </member>
        <member name="M:Discord.Interactions.ExecuteResult.FromError(Discord.Interactions.InteractionCommandError,System.String)">
            <summary>
                Initializes a new <see cref="T:Discord.Interactions.ExecuteResult" /> with a specified <see cref="T:Discord.Interactions.InteractionCommandError" /> and its
                reason, indicating an unsuccessful execution.
            </summary>
            <param name="commandError">The type of error.</param>
            <param name="reason">The reason behind the error.</param>
            <returns>
                A <see cref="T:Discord.Interactions.ExecuteResult" /> that contains a <see cref="T:Discord.Interactions.InteractionCommandError" /> and reason.
            </returns>
        </member>
        <member name="M:Discord.Interactions.ExecuteResult.FromError(System.Exception)">
            <summary>
                Initializes a new <see cref="T:Discord.Interactions.ExecuteResult" /> with a specified exception, indicating an unsuccessful
                execution.
            </summary>
            <param name="exception">The exception that caused the command execution to fail.</param>
            <returns>
                A <see cref="T:Discord.Interactions.ExecuteResult" /> that contains the exception that caused the unsuccessful execution, along
                with a <see cref="T:Discord.Interactions.InteractionCommandError" /> of type <c>Exception</c> as well as the exception message as the
                reason.
            </returns>
        </member>
        <member name="M:Discord.Interactions.ExecuteResult.FromError(Discord.Interactions.IResult)">
            <summary>
                Initializes a new <see cref="T:Discord.Interactions.ExecuteResult" /> with a specified result; this may or may not be an
                successful execution depending on the <see cref="P:Discord.Interactions.IResult.Error" /> and
                <see cref="P:Discord.Interactions.IResult.ErrorReason" /> specified.
            </summary>
            <param name="result">The result to inherit from.</param>
            <returns>
                A <see cref="T:Discord.Interactions.ExecuteResult"/> that inherits the <see cref="T:Discord.Interactions.IResult"/> error type and reason.
            </returns>
        </member>
        <member name="M:Discord.Interactions.ExecuteResult.ToString">
            <summary>
                Gets a string that indicates the execution result.
            </summary>
            <returns>
                <c>Success</c> if <see cref="P:Discord.Interactions.ExecuteResult.IsSuccess"/> is <see langword="true"/>; otherwise "<see cref="P:Discord.Interactions.ExecuteResult.Error"/>: 
                <see cref="P:Discord.Interactions.ExecuteResult.ErrorReason"/>".
            </returns>
        </member>
        <member name="T:Discord.Interactions.IResult">
            <summary>
                Contains information of the result related to a command.
            </summary>
        </member>
        <member name="P:Discord.Interactions.IResult.Error">
            <summary>
                Gets the error type that may have occurred during the operation.
            </summary>
            <returns>
                A <see cref="T:Discord.Interactions.InteractionCommandError" /> indicating the type of error that may have occurred during the operation; 
                <see langword="null"/> if the operation was successful.
            </returns>
        </member>
        <member name="P:Discord.Interactions.IResult.ErrorReason">
            <summary>
                Gets the reason for the error.
            </summary>
            <returns>
                A string containing the error reason.
            </returns>
        </member>
        <member name="P:Discord.Interactions.IResult.IsSuccess">
            <summary>
                Indicates whether the operation was successful or not.
            </summary>
            <returns>
                <see langword="true"/> if the result is positive; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Discord.Interactions.PreconditionGroupResult">
            <summary>
                Represents a result type for grouped command preconditions.
            </summary>
        </member>
        <member name="P:Discord.Interactions.PreconditionGroupResult.Results">
            <summary>
                Gets the results of the preconditions of this group.
            </summary>
        </member>
        <member name="M:Discord.Interactions.PreconditionGroupResult.FromSuccess">
            <summary>
                Returns a <see cref="T:Discord.Interactions.PreconditionGroupResult" /> with no errors.
            </summary>
        </member>
        <member name="M:Discord.Interactions.PreconditionGroupResult.FromError(System.Exception)">
            <summary>
                Returns a <see cref="T:Discord.Interactions.PreconditionGroupResult" /> with <see cref="F:Discord.Interactions.InteractionCommandError.Exception" /> and the <see cref="P:System.Exception.Message"/>.
            </summary>
            <param name="exception">The exception that caused the precondition check to fail.</param>
        </member>
        <member name="M:Discord.Interactions.PreconditionGroupResult.FromError(Discord.Interactions.IResult)">
            <summary>
                Returns a <see cref="T:Discord.Interactions.PreconditionGroupResult" /> with the specified <paramref name="result"/> type.
            </summary>
            <param name="result">The result of failure.</param>
        </member>
        <member name="M:Discord.Interactions.PreconditionGroupResult.FromError(System.String,System.Collections.Generic.IEnumerable{Discord.Interactions.PreconditionResult})">
            <summary>
                Returns a <see cref="T:Discord.Interactions.PreconditionGroupResult" /> with <see cref="F:Discord.Interactions.InteractionCommandError.UnmetPrecondition" /> and the
                specified reason.
            </summary>
            <param name="reason">The reason of failure.</param>
            <param name="results">Precondition results of this group</param>
        </member>
        <member name="T:Discord.Interactions.PreconditionResult">
            <summary>
                Represents a result type for command preconditions.
            </summary>
        </member>
        <member name="P:Discord.Interactions.PreconditionResult.Error">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.PreconditionResult.ErrorReason">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.PreconditionResult.IsSuccess">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.PreconditionResult.#ctor(System.Nullable{Discord.Interactions.InteractionCommandError},System.String)">
            <summary>
                Initializes a new <see cref="T:Discord.Interactions.PreconditionResult" /> class with the command <paramref name="error"/> type
                and reason.
            </summary>
            <param name="error">The type of failure.</param>
            <param name="reason">The reason of failure.</param>
        </member>
        <member name="M:Discord.Interactions.PreconditionResult.FromSuccess">
            <summary>
                Returns a <see cref="T:Discord.Interactions.PreconditionResult" /> with no errors.
            </summary>
        </member>
        <member name="M:Discord.Interactions.PreconditionResult.FromError(System.Exception)">
            <summary>
                Returns a <see cref="T:Discord.Interactions.PreconditionResult" /> with <see cref="F:Discord.Interactions.InteractionCommandError.Exception" /> and the <see cref="P:System.Exception.Message"/>.
            </summary>
            <param name="exception">The exception that caused the precondition check to fail.</param>
        </member>
        <member name="M:Discord.Interactions.PreconditionResult.FromError(Discord.Interactions.IResult)">
            <summary>
                Returns a <see cref="T:Discord.Interactions.PreconditionResult" /> with the specified <paramref name="result"/> type.
            </summary>
            <param name="result">The result of failure.</param>
        </member>
        <member name="M:Discord.Interactions.PreconditionResult.FromError(System.String)">
            <summary>
                Returns a <see cref="T:Discord.Interactions.PreconditionResult" /> with <see cref="F:Discord.Interactions.InteractionCommandError.UnmetPrecondition" /> and the
                specified reason.
            </summary>
            <param name="reason">The reason of failure.</param>
        </member>
        <member name="T:Discord.Interactions.RuntimeResult">
            <summary>
                Represents the base class for creating command result containers.
            </summary>
        </member>
        <member name="P:Discord.Interactions.RuntimeResult.Error">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.RuntimeResult.ErrorReason">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.RuntimeResult.IsSuccess">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.RuntimeResult.#ctor(System.Nullable{Discord.Interactions.InteractionCommandError},System.String)">
            <summary>
                Initializes a new <see cref="T:Discord.Interactions.RuntimeResult" /> class with the type of error and reason.
            </summary>
            <param name="error">The type of failure, or <see langword="null" /> if none.</param>
            <param name="reason">The reason of failure.</param>
        </member>
        <member name="M:Discord.Interactions.RuntimeResult.ToString">
            <summary>
                Gets a string that indicates the runtime result.
            </summary>
            <returns>
                <c>Success</c> if <see cref="P:Discord.Interactions.RuntimeResult.IsSuccess"/> is <see langword="true" />; otherwise "<see cref="P:Discord.Interactions.RuntimeResult.Error"/>: 
                <see cref="P:Discord.Interactions.RuntimeResult.ErrorReason"/>".
            </returns>
        </member>
        <member name="T:Discord.Interactions.SearchResult`1">
            <summary>
                Contains information of a command search.
            </summary>
            <typeparam name="T">Type of the target command type.</typeparam>
        </member>
        <member name="P:Discord.Interactions.SearchResult`1.Text">
            <summary>
                Gets the input text of the command search.
            </summary>
        </member>
        <member name="P:Discord.Interactions.SearchResult`1.Command">
            <summary>
                Gets the found command, if the search was successful.
            </summary>
        </member>
        <member name="P:Discord.Interactions.SearchResult`1.RegexCaptureGroups">
            <summary>
                Gets the Regex groups captured by the wild card pattern.
            </summary>
        </member>
        <member name="P:Discord.Interactions.SearchResult`1.Error">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.SearchResult`1.ErrorReason">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.SearchResult`1.IsSuccess">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.SearchResult`1.FromSuccess(System.String,`0,System.String[])">
            <summary>
                Initializes a new <see cref="T:Discord.Interactions.SearchResult`1" /> with no error, indicating a successful execution.
            </summary>
            <returns>
                A <see cref="T:Discord.Interactions.SearchResult`1" /> that does not contain any errors.
            </returns>
        </member>
        <member name="M:Discord.Interactions.SearchResult`1.FromError(System.String,Discord.Interactions.InteractionCommandError,System.String)">
            <summary>
                Initializes a new <see cref="T:Discord.Interactions.SearchResult`1" /> with a specified <see cref="T:Discord.Interactions.InteractionCommandError" /> and its
                reason, indicating an unsuccessful execution.
            </summary>
            <param name="error">The type of error.</param>
            <param name="reason">The reason behind the error.</param>
            <returns>
                A <see cref="T:Discord.Interactions.SearchResult`1" /> that contains a <see cref="T:Discord.Interactions.InteractionCommandError" /> and reason.
            </returns>
        </member>
        <member name="M:Discord.Interactions.SearchResult`1.FromError(System.Exception)">
            <summary>
                Initializes a new <see cref="T:Discord.Interactions.SearchResult`1" /> with a specified exception, indicating an unsuccessful
                execution.
            </summary>
            <param name="ex">The exception that caused the command execution to fail.</param>
            <returns>
                A <see cref="T:Discord.Interactions.SearchResult`1" /> that contains the exception that caused the unsuccessful execution, along
                with a <see cref="T:Discord.Interactions.InteractionCommandError" /> of type <c>Exception</c> as well as the exception message as the
                reason.
            </returns>
        </member>
        <member name="M:Discord.Interactions.SearchResult`1.FromError(Discord.Interactions.IResult)">
            <summary>
                Initializes a new <see cref="T:Discord.Interactions.SearchResult`1" /> with a specified result; this may or may not be an
                successful depending on the <see cref="P:Discord.Interactions.IResult.Error" /> and
                <see cref="P:Discord.Interactions.IResult.ErrorReason" /> specified.
            </summary>
            <param name="result">The result to inherit from.</param>
            <returns>
                A <see cref="T:Discord.Interactions.SearchResult`1"/> that inherits the <see cref="T:Discord.Interactions.IResult"/> error type and reason.
            </returns>
        </member>
        <member name="M:Discord.Interactions.SearchResult`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Interactions.TypeConverterResult">
            <summary>
                Represents a result type for <see cref="M:Discord.Interactions.TypeConverter.ReadAsync(Discord.IInteractionContext,Discord.IApplicationCommandInteractionDataOption,System.IServiceProvider)"/>.
            </summary>
        </member>
        <member name="P:Discord.Interactions.TypeConverterResult.Value">
            <summary>
                Gets the result of the conversion if the operation was successful.
            </summary>
        </member>
        <member name="P:Discord.Interactions.TypeConverterResult.Error">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.TypeConverterResult.ErrorReason">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Interactions.TypeConverterResult.IsSuccess">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.TypeConverterResult.FromSuccess(System.Object)">
            <summary>
                Returns a <see cref="T:Discord.Interactions.TypeConverterResult" /> with no errors.
            </summary>
        </member>
        <member name="M:Discord.Interactions.TypeConverterResult.FromError(System.Exception)">
            <summary>
                Returns a <see cref="T:Discord.Interactions.TypeConverterResult" /> with <see cref="F:Discord.Interactions.InteractionCommandError.Exception" /> and the <see cref="P:System.Exception.Message"/>.
            </summary>
            <param name="exception">The exception that caused the type conversion to fail.</param>
        </member>
        <member name="M:Discord.Interactions.TypeConverterResult.FromError(Discord.Interactions.InteractionCommandError,System.String)">
            <summary>
                Returns a <see cref="T:Discord.Interactions.PreconditionResult" /> with the specified error and the reason.
            </summary>
            <param name="error">The type of error.</param>
            <param name="reason">The reason of failure.</param>
        </member>
        <member name="M:Discord.Interactions.TypeConverterResult.FromError(Discord.Interactions.IResult)">
            <summary>
                Returns a <see cref="T:Discord.Interactions.PreconditionResult" /> with the specified <paramref name="result"/> type.
            </summary>
            <param name="result">The result of failure.</param>
        </member>
        <member name="T:Discord.Interactions.RunMode">
            <summary>
                Specifies the behavior of the command execution workflow.
            </summary>
            <seealso cref="T:Discord.Interactions.InteractionServiceConfig"/>
        </member>
        <member name="F:Discord.Interactions.RunMode.Sync">
            <summary>
                Executes the command on the same thread as gateway one.
            </summary>
        </member>
        <member name="F:Discord.Interactions.RunMode.Async">
            <summary>
                Executes the command on a different thread from the gateway one.
            </summary>
        </member>
        <member name="F:Discord.Interactions.RunMode.Default">
            <summary>
                The default behaviour set in <see cref="T:Discord.Interactions.InteractionServiceConfig"/>.
            </summary>
        </member>
        <member name="T:Discord.Interactions.ComponentTypeConverter">
            <summary>
                Base class for creating Component TypeConverters. <see cref="T:Discord.Interactions.InteractionService"/> uses TypeConverters to interface with Slash Command parameters.
            </summary>
        </member>
        <member name="M:Discord.Interactions.ComponentTypeConverter.CanConvertTo(System.Type)">
            <summary>
                Will be used to search for alternative TypeConverters whenever the Command Service encounters an unknown parameter type.
            </summary>
            <param name="type">An object type.</param>
            <returns>
                The boolean  result.
            </returns>
        </member>
        <member name="M:Discord.Interactions.ComponentTypeConverter.ReadAsync(Discord.IInteractionContext,Discord.IComponentInteractionData,System.IServiceProvider)">
            <summary>
                Will be used to read the incoming payload before executing the method body.
            </summary>
            <param name="context">Command execution context.</param>
            <param name="option">Received option payload.</param>
            <param name="services">Service provider that will be used to initialize the command module.</param>
            <returns>
                The result of the read process.
            </returns>
        </member>
        <member name="T:Discord.Interactions.ComponentTypeConverter`1">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.ComponentTypeConverter`1.CanConvertTo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Interactions.HideAttribute">
            <summary>
                Enum values tagged with this attribute will not be displayed as a parameter choice
            </summary>
            <remarks>
                This attribute must be used along with the default <see cref="T:Discord.Interactions.EnumConverter`1"/>
            </remarks>
        </member>
        <member name="T:Discord.Interactions.TypeConverter">
            <summary>
                Base class for creating TypeConverters. <see cref="T:Discord.Interactions.InteractionService"/> uses TypeConverters to interface with Slash Command parameters.
            </summary>
        </member>
        <member name="M:Discord.Interactions.TypeConverter.CanConvertTo(System.Type)">
            <summary>
                Will be used to search for alternative TypeConverters whenever the Command Service encounters an unknown parameter type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Discord.Interactions.TypeConverter.GetDiscordType">
            <summary>
                Will be used to get the Application Command Option type.
            </summary>
            <returns>The option type.</returns>
        </member>
        <member name="M:Discord.Interactions.TypeConverter.ReadAsync(Discord.IInteractionContext,Discord.IApplicationCommandInteractionDataOption,System.IServiceProvider)">
            <summary>
                Will be used to read the incoming payload before executing the method body.
            </summary>
            <param name="context">Command execution context.</param>
            <param name="option">Received option payload.</param>
            <param name="services">Service provider that will be used to initialize the command module.</param>
            <returns>The result of the read process.</returns>
        </member>
        <member name="M:Discord.Interactions.TypeConverter.Write(Discord.ApplicationCommandOptionProperties,Discord.Interactions.IParameterInfo)">
            <summary>
                Will be used to manipulate the outgoing command option, before the command gets registered to Discord.
            </summary>
        </member>
        <member name="T:Discord.Interactions.TypeConverter`1">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.TypeConverter`1.CanConvertTo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Discord.Interactions.TypeReader">
            <summary>
                Base class for creating TypeConverters. <see cref="T:Discord.Interactions.InteractionService"/> uses TypeConverters to interface with Slash Command parameters.
            </summary>
        </member>
        <member name="M:Discord.Interactions.TypeReader.CanConvertTo(System.Type)">
            <summary>
                Will be used to search for alternative TypeReaders whenever the Command Service encounters an unknown parameter type.
            </summary>
            <param name="type">An object type.</param>
            <returns>
                The boolean result.
            </returns>
        </member>
        <member name="M:Discord.Interactions.TypeReader.ReadAsync(Discord.IInteractionContext,System.String,System.IServiceProvider)">
            <summary>
                Will be used to read the incoming payload before executing the method body.
            </summary>
            <param name="context">Command execution context.</param>
            <param name="option">Received option payload.</param>
            <param name="services">Service provider that will be used to initialize the command module.</param>
            <returns>The result of the read process.</returns>
        </member>
        <member name="M:Discord.Interactions.TypeReader.SerializeAsync(System.Object,System.IServiceProvider)">
            <summary>
                Will be used to serialize objects into strings.
            </summary>
            <param name="obj">Object to be serialized.</param>
            <returns>
                A task representing the conversion process. The result of the task contains the conversion result.
            </returns>
        </member>
        <member name="T:Discord.Interactions.TypeReader`1">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.TypeReader`1.CanConvertTo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Interactions.ReflectionUtils`1.CreateLambdaBuilder(System.Reflection.TypeInfo,Discord.Interactions.InteractionService)">
            <summary>
            Create a type initializer using compiled lambda expressions
            </summary>
        </member>
        <member name="M:Discord.Interactions.ReflectionUtils`1.CreateLambdaPropertySetter(System.Reflection.PropertyInfo)">
            <summary>
                Create a compiled lambda property setter.
            </summary>
        </member>
        <member name="M:Discord.Rest.RestExtensions.RespondWithModal``1(Discord.Rest.RestInteraction,System.String,Discord.RequestOptions,System.Action{Discord.ModalBuilder})">
            <summary>
                Respond to an interaction with a <see cref="T:Discord.Interactions.IModal"/>.
            </summary>
            <typeparam name="T">Type of the <see cref="T:Discord.Interactions.IModal"/> implementation.</typeparam>
            <param name="interaction">The interaction to respond to.</param>
            <param name="options">The request options for this <see langword="async"/> request.</param>
            <returns>Serialized payload to be used to create a HTTP response.</returns>
        </member>
        <member name="M:Discord.Rest.RestExtensions.RespondWithModal``1(Discord.Rest.RestInteraction,System.String,``0,Discord.RequestOptions,System.Action{Discord.ModalBuilder})">
            <summary>
                Respond to an interaction with an <see cref="T:Discord.Interactions.IModal"/>.
            </summary>
            <typeparam name="T">Type of the <see cref="T:Discord.Interactions.IModal"/> implementation.</typeparam>
            <param name="interaction">The interaction to respond to.</param>
            <param name="modal">The <see cref="T:Discord.Interactions.IModal"/> instance to get field values from.</param>
            <param name="options">The request options for this <see langword="async"/> request.</param>
            <param name="modifyModal">Delegate that can be used to modify the modal.</param>
            <returns>Serialized payload to be used to create a HTTP response.</returns>
        </member>
        <member name="M:Discord.WebSocket.WebSocketExtensions.GetCommandKeywords(Discord.IApplicationCommandInteractionData)">
            <summary>
                Get the name of the executed command and its parents in hierarchical order.
            </summary>
            <param name="data"></param>
            <returns>
                The name of the executed command and its parents in hierarchical order.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.WebSocketExtensions.GetCommandKeywords(Discord.IAutocompleteInteractionData)">
            <summary>
                Get the name of the executed command and its parents in hierarchical order.
            </summary>
            <param name="data"></param>
            <returns>
                The name of the executed command and its parents in hierarchical order.
            </returns>
        </member>
    </members>
</doc>
